;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; sqrtFpEc (C = sqrt(C,A))
;;
;; PRE: A = [0,1], C no alias-free
;; POST: C is alias-free
;; NOTE: if C has sqrt B = 1 if not B = 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RESOURCES:
;   with root: 2 arith + 1 binary + 14 steps
;   without root: 1 binary + 5 steps
;   TOTAL (worst case): 2 arith + 1 binary + 14 steps

VAR GLOBAL sqrtFpC_tmp
VAR GLOBAL sqrtFpC_res

sqrtFpEc:

        ; PATH: hasn't sqrt  =>  1 binary
        ; PATH: has sqrt => 1 binary + 2 arith
        ; TOTAL resources: 1 binary + 2 arith

        C               :MSTORE(sqrtFpC_tmp)

        ; [A] * [A] + 0 = [D] * 2 ** 256 + [E]

        ; set C because if jmp to sqrtFpEc C must have return value (FPEC_NON_SQRT)
        ${var _sqrtFpEc_sqrt = sqrtFpEcParity(C,A) } => A,C :MSTORE(sqrtFpC_res)

        ; In this point we check if C is LT than FPEC because if not:
        ;    a) A = FPEC_NON_SQRT, check hasn't sqrt.
        ;    b) A is an alias, it's a MAP, we check hasn't sqrt, but has => no proof generated

        ; A and C has same value

        %FPEC => B

        ; A
        $ => B                                           :LT,JMPNC(sqrtFpEc_End)

        ; A,C < FPEC (alias free)
        A => B
        0 => C

        ; A = B  => A * A + 0 =?

        $${var _sqrtFpEc_sq = _sqrtFpEc_sqrt * _sqrtFpEc_sqrt }

        ${_sqrtFpEc_sq >> 256} => D
        ${_sqrtFpEc_sq} => E :ARITH

        ;
        ; with committed E,D
        ; FpEc * [k] + C = D * 2 ** 256 + E
        ;

        $ => C          :MLOAD(sqrtFpC_tmp)
        ${_sqrtFpEc_sq / const.FPEC} => B
        %FPEC => A
        E :ARITH

        ; sqrtFpC_res hasn't alias because in this path sqrtFpC_res < FPEC

        1 => B
        $ => C          :MLOAD(sqrtFpC_res),RETURN

sqrtFpEc_End:
        ; B is 0, because C >= FPEC
        :RETURN