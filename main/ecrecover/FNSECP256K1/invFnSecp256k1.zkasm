;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRE: A is not alias-free
;; POST: The result B is not alias-free (on MAP)
;;
;; invFnSecp256k1:
;;             in: A
;;             out: B = A⁻¹ (mod n)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RESOURCES:
;   2 ariths + 9 steps

VAR GLOBAL invFnSecp256k1_tmp

invFnSecp256k1:

        ; 1] Compute and check the inverse over Z
        ; A·A⁻¹ + 0 = [D]·2²⁵⁶ + [E]
        0 => C
        ${var _invFnSecp256k1_A = inverseFnEc(A)} => B :MSTORE(invFnSecp256k1_tmp)
        $${var _invFnSecp256k1_AB = A * _invFnSecp256k1_A}
        ${_invFnSecp256k1_AB >> 256} => D
        ${_invFnSecp256k1_AB} => E :ARITH

        ; 2] Check it over Fn, that is, it must be satisfied that:
        ; n·[(A·A⁻¹) / n] + 1 = D·2²⁵⁶ + E
        %SECP256K1_N => A
        ${_invFnSecp256k1_AB / const.SECP256K1_N} => B
        1 => C
        E :ARITH

        $ => B   :MLOAD(invFnSecp256k1_tmp), RETURN