;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; invFpEc B = inv(A)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL invFpEc_tmp

invFpEc:

        %FPEC => B
        $       :LT,JMPC(invFpEc_normalized)
        $ => A  :SUB

invFpEc_normalized:
        0n => C
        ; B = inv(A)

        ${var _invFpEc_A = inverseFpEc(A)} => B :MSTORE(invFpEc_tmp);

        ; A * B + 0 = [D] * 2 ** 256 + [E]

        $${var _invFpEc_AB = A * _invFpEc_A}

        ${_invFpEc_AB >> 256} => D
        ${_invFpEc_AB} => E :ARITH

        ;
        ; with committed E,D
        ; FpEc * [k] + 1 = D * 2 ** 256 + E
        ;

        1n => C
        ${_invFpEc_AB / const.FPEC} => B
        %FPEC => A

        E :ARITH
        $ => B   :MLOAD(invFpEc_tmp),RETURN