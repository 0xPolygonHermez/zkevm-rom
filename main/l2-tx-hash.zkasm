;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compute l2TxHash for legacy and preEIP155 transactions
;;
;; - preEIP155 (message to sign in Ethereum: rlp[nonce, gasprice, gaslimit, to, value, data])
;;    [  1   bytes   ] txType = 0
;;    [  8   bytes   ] nonce
;;    [  32  bytes   ] gasPrice
;;    [  8  bytes    ] gasLimit
;;    [  1   bytes   ] deployment ('0': no deployment, '1': deployment)
;;    [  20  bytes   ] to (0 bytes if it is a deployment)
;;    [  32  bytes   ] value
;;    [  3   bytes   ] dataLength
;;    [  XX  bytes   ] data
;;    [  20  bytes   ] from
;;
;;
;; - Legacy (message to sign in Ethereum: rlp[nonce, gasprice, gaslimit, to, value, data, chainId, 0, 0])
;;    [  1   bytes   ] txType = 1
;;    [  8   bytes   ] nonce
;;    [  32  bytes   ] gasPrice
;;    [  8  bytes    ] gasLimit
;;    [  1   bytes   ] deployment ('0': no deployment, '1': deployment)
;;    [  20  bytes   ] to (0 bytes if it is a deployment)
;;    [  32  bytes   ] value
;;    [  3   bytes   ] dataLength
;;    [  XX  bytes   ] data
;;    [  8  bytes    ] chainId
;;    [  20  bytes   ] from
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR CTX l2TxHashPointer ; Pointer to l2TxHash hash address
VAR CTX l2HASHP ; pointer to the l2TxHash to store the bytes
VAR GLOBAL tmpVar_HASHPOS_L2HashTx ; temporary variable register HASHPOS
VAR GLOBAL tmpVar_A_L2HashTx ; temporary variable register A
VAR GLOBAL tmpVar_D_L2HashTx ; temporary variable register D
VAR GLOBAL tmpVar_E_L2HashTx ; temporary variable register E

;; Check counters to do the hashp and initialize HASHPOS of the l2TxHash
initL2HashTx:
        ; check one binary available to perform correctly the HASHPDIGEST
        %MAX_CNT_BINARY - CNT_BINARY - 1        :JMPN(outOfCountersBinary)
        ; reserve one byte for the txType in the l2HashTx
        ; txType will be known at the end of the RLP parsing
        1                                       :MSTORE(l2HASHP), RETURN

;; Write generic bytes to the l2TxHash
; @in A => value to write
; @in D => bytes size to write
addL2HashTx:
        ; store temporary register values
        E                               :MSTORE(tmpVar_E_L2HashTx)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load pointer l2HashTx and write bytes
        $ => E                          :MLOAD(l2TxHashPointer)
        $ => HASHPOS                    :MLOAD(l2HASHP)
        A                               :HASHP(E)
        HASHPOS                         :MSTORE(l2HASHP)

        ; load temporary register values
        $ => E                          :MLOAD(tmpVar_E_L2HashTx)
        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx), RETURN

;; Write 1 byte to l2TxHash: flag deployment = 1 ('0': no deployment transaction, '1': deployment transaction)
addL2HashTx_isDeploy:
        ; store temporary register values
        E                               :MSTORE(tmpVar_E_L2HashTx)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load pointer l2HashTx and write deployment flag
        $ => E                          :MLOAD(l2TxHashPointer)
        $ => HASHPOS                    :MLOAD(l2HASHP)
        1                               :HASHP1(E)
        HASHPOS                         :MSTORE(l2HASHP)

        ; load temporary register values
        $ => E                          :MLOAD(tmpVar_E_L2HashTx)
        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx), RETURN

;; Write 1 byte to l2TxHash: flag deployment = 0 ('0': no deployment transaction, '1': deployment transaction)
addL2HashTx_isNotDeploy:
        ; store temporary register values
        E                               :MSTORE(tmpVar_E_L2HashTx)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load pointer l2HashTx and write deployment flag
        $ => E                          :MLOAD(l2TxHashPointer)
        $ => HASHPOS                    :MLOAD(l2HASHP)
        0                               :HASHP1(E)
        HASHPOS                         :MSTORE(l2HASHP)

        ; load temporary register values
        $ => E                          :MLOAD(tmpVar_E_L2HashTx)
        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx), RETURN

;; Write 3 bytes to l2TxHash: data length
addL2HashTx_dataLength:
        ; store temporary register values
        A                               :SAVE(B,C,D,E,RCX,RR)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load pointer l2HashTx and write data length
        $ => E                          :MLOAD(l2TxHashPointer)
        $ => HASHPOS                    :MLOAD(l2HASHP)
        3 => D
        ${mem.txCalldataLen}            :HASHP(E), MLOAD(txCalldataLen)
        HASHPOS                         :MSTORE(l2HASHP)

        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx)
        $ => A                          :RESTORE, RETURN

;; Write 1 byte to l2TxHash: txType
; note: HASHPOS is not recovered and the outcome register is the l2TxHash length
addL2HashTx_txType:
        A                               :SAVE(B,C,D,E,RCX,RR)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load pointer l2HashTx and write txType
        $ => E                          :MLOAD(l2TxHashPointer)
        ; write txType in the first byte of the l2TxHash
        0 => HASHPOS
        $ => A                          :MLOAD(isPreEIP155), JMPZ(addL2HashTx_txType_write_1)
        0                               :HASHP1(E), JMP(addL2HashTx_txType_finish)
addL2HashTx_txType_write_1:
        1                               :HASHP1(E)
addL2HashTx_txType_finish:
        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx)
        $ => A                          :RESTORE, RETURN

;; Closes l2TxHash and store the result
closeL2TxHash:
        ; store temporary register values
        E                               :MSTORE(tmpVar_E_L2HashTx)
        HASHPOS                         :MSTORE(tmpVar_HASHPOS_L2HashTx)

        ; load HASHPOS l2TxHash
        $ => HASHPOS                    :MLOAD(l2HASHP)
        $ => E                          :MLOAD(l2TxHashPointer)
        HASHPOS                         :HASHPLEN(E)
        ; digest l2TxHash
        $ => E                          :HASHPDIGEST(E), MSTORE(l2TxHash)

        ; load temporary register values
        $ => E                          :MLOAD(tmpVar_E_L2HashTx)
        $ => HASHPOS                    :MLOAD(tmpVar_HASHPOS_L2HashTx), RETURN