INCLUDE "constants.zkasm"
INCLUDE "vars.zkasm"

; Blocks zkROM
;       A - Load initial registers into memory: oldStateRoot (B), oldAccInputHash (C), oldNumBatch (SP) & chainID (GAS)
;       B - Compute keccaks needed to finish the batch
;       C - Loop parsing RLP transactions
;       D - Load blockNum variable & Loop processing transactions
;       E - Batch computations: get newLocalExitRoot, assert transactions size, compute batchHashData & compute newAccInputHash
;       F - Finalize execution

start: ; main zkROM entry point
;;;;;;;;;;;;;;;;;;
;; A - Load input variables
;;;;;;;;;;;;;;;;;;
        STEP => A
        0                                   :ASSERT ; Ensure it is the beginning of the execution

        CTX                                 :MSTORE(forkID)
        CTX - %FORK_ID                      :JMPNZ(failAssert)

        B                                   :MSTORE(oldStateRoot)
        C                                   :MSTORE(oldAccInputHash)
        SP                                  :MSTORE(oldNumBatch)
        GAS                                 :MSTORE(chainID) ; assumed to be less than 32 bits

        ${getHistoricGERRoot()}             :MSTORE(historicGER)
        ${getSequencerAddr()}               :MSTORE(sequencerAddr)
        ${getTimestampLimit()}              :MSTORE(timestampLimit)
        ${getTxsLen()}                      :MSTORE(batchL2DataLength) ; less than 300.000 bytes. Enforced by the smart contract
        ${getIsForced()}                    :MSTORE(isForced)

        B => SR ;set initial state root
        SR                                  :MSTORE(batchSR)
        ; Increase batch number
        SP + 1                              :MSTORE(newNumBatch)

;;;;;;;;;;;;;;;;;;
;; B - Compute keccaks needed to finish the batch
;;;;;;;;;;;;;;;;;;
        $${eventLog(onStartBatch, C)}

        ; Compute necessary keccak counters to finish batch
        $ => A          :MLOAD(batchL2DataLength)
        ; Divide the total data length + 1 by 136 to obtain the keccak counter increment.
        ; 136 is the value used by the prover to increment keccak counters
        A + 1                                   :MSTORE(arithA)
        136                                     :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
        $ => B                                  :MLOAD(arithRes1)
        ; Compute minimum necessary keccaks to finish the batch
        B + 1 + %MIN_CNT_KECCAK_BATCH => B      :MSTORE(cntKeccakPreProcess)
        %MAX_CNT_KECCAK_F - CNT_KECCAK_F - B    :JMPN(outOfCountersKeccak)

;;;;;;;;;;;;;;;;;;
;; C - Loop parsing RLP transactions
;;      - Load transaction RLP data and ensure it has correct RLP encoding
;;      - If an error is found in any transaction, the batch will not process any transaction
;;;;;;;;;;;;;;;;;;

        E+1 => E                            :MSTORE(lastHashKIdUsed)
        0                                   :MSTORE(batchHashPos)
        E                                   :MSTORE(batchHashDataId)
        $ => A                              :MLOAD(lastCtxUsed)
        A                                   :MSTORE(ctxTxToUse) ; Points at first context to be used when processing transactions

        $${var p = 0}
        ; set flag isLoadingRLP to 1
        1               :MSTORE(isLoadingRLP)

txLoopRLP:
        $ => A          :MLOAD(lastCtxUsed)
        A+1 => CTX      :MSTORE(lastCtxUsed)

        $ => A          :MLOAD(batchL2DataLength)
        $ => C          :MLOAD(batchL2DataParsed)
        C - A           :JMPN(loadTx_rlp, endCheckRLP)

endCheckRLP:
        ; set flag isLoadingRLP to 0
        0               :MSTORE(isLoadingRLP)

;;;;;;;;;;;;;;;;;;
;; D    - Load blockNum variable
;;      - Loop processing transactions
;;              - Load transaction data and interpret it
;;;;;;;;;;;;;;;;;;

setBlockNum:
        %LAST_BLOCK_STORAGE_POS => C
        %ADDRESS_SYSTEM => A
        %SMT_KEY_SC_STORAGE => B
        $               :SLOAD,MSTORE(blockNum)
        ; If forced batch, process a forced changeL2BlockTx
        $               :MLOAD(isForced), JMPNZ(processForcedChangeL2Block)
txLoop:
        $ => A          :MLOAD(pendingTxs)
        A-1             :MSTORE(pendingTxs), JMPN(processTxsEnd)

        $ => A          :MLOAD(ctxTxToUse) ; Load first context used by transaction
        A+1 => CTX      :MSTORE(ctxTxToUse)
        ; Detect if transaction is a change L2 block tx
        ; Store initial state at the beginning of the transaction
        SR              :MSTORE(originSR)
        $ => A          :MLOAD(isChangeL2BlockTx)
        A - 1           :JMPZ(processChangeL2Block, processTx)

processTxFinished:
        $${eventLog(onFinishTx)}   :JMP(txLoop)

processTxsEnd:

;;;;;;;;;;;;;;;;;;
;; E - Batch asserts & computations:
;;      - get newLocalExitRoot
;;      - assert transactions size
;;      - compute batchHashData
;;      - compute newAccInputHash
;;;;;;;;;;;;;;;;;;

;; Get local exit root
        ; Read 'localExitRoot' variable from GLOBAL_EXIT_ROOT_MANAGER_L2 and store
        ; it to the 'newLocalExitRoot' input
        %ADDRESS_GLOBAL_EXIT_ROOT_MANAGER_L2  => A
        %SMT_KEY_SC_STORAGE => B
        %LOCAL_EXIT_ROOT_STORAGE_POS => C
        $ => A                                          :SLOAD
        A                                               :MSTORE(newLocalExitRoot)

;; Transactions size verification
        ; Ensure bytes added to compute the 'batchHashData' matches the number of bytes loaded from input
        $ => A                          :MLOAD(batchHashPos)
        $                               :MLOAD(batchL2DataLength), ASSERT

;; Compute 'batchHashData'
        A => HASHPOS
        $ => E                          :MLOAD(batchHashDataId)

        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)

        A                               :MSTORE(batchHashData)

;; Compute 'newAccInputHash'
        0 => HASHPOS

        32 => D
        $ => A                          :MLOAD(oldAccInputHash)
        A                               :HASHK(0)

        $ => A                          :MLOAD(batchHashData)
        A                               :HASHK(0)

        $ => A                          :MLOAD(historicGER)
        A                               :HASHK(0)

        8 => D
        $ => A                          :MLOAD(timestampLimit)
        A                               :HASHK(0)

        20 => D
        $ => A                          :MLOAD(sequencerAddr)
        A                               :HASHK(0)

        $ => A                          :MLOAD(isForced)
        A                               :HASHK1(0)
        HASHPOS                         :HASHKLEN(0)

        $ => C                          :HASHKDIGEST(0)
        C                               :MSTORE(newAccInputHash)
        $${eventLog(onFinishBatch)}

;;;;;;;;;;;;;;;;;;
;; F - Finalize execution
;;;;;;;;;;;;;;;;;;
        ; Set output registers
        $ => D                          :MLOAD(newAccInputHash)
        $ => E                          :MLOAD(newLocalExitRoot)
        $ => PC                         :MLOAD(newNumBatch)

        ; Set registers to its initials values
        $ => CTX                        :MLOAD(forkID)
        $ => B                          :MLOAD(oldStateRoot)
        $ => C                          :MLOAD(oldAccInputHash)
        $ => SP                         :MLOAD(oldNumBatch)
        $ => GAS                        :MLOAD(chainID)
        finalizeExecution:
                                        :JMP(finalWait)

INCLUDE "end.zkasm"
INCLUDE "load-tx-rlp.zkasm"
INCLUDE "process-tx.zkasm"
INCLUDE "process-change-l2-block.zkasm"
INCLUDE "utils.zkasm"

