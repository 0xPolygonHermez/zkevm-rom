INCLUDE "vars.zkasm"

start:
; First of all, load The call Data.  The first A value is forced with the hash of the TX. 
        ${getGlobalHash()}         :MSTORE(globalHash)                    ; In A register we have the TXHash

        32 => D
        ${getOldStateRoot()}=>SR            :HASHW(0)

        32 => D
        ${getOldLocalExitRoot()}  => A      :HASHW(0)
                                            :MSTORE(oldLocalExitRoot)

        32 => D
        ${getNewStateRoot()}  => A          :HASHW(0)
                                            :MSTORE(newStateRoot)

        32 => D
        ${getNewLocalExitRoot()}   => A     :HASHW(0)
        A                                   :MSTORE(newLocalExitRoot)

        32 => D
        ${getSequencerAddr()} => A          :HASHW(0)
        A                                   :MSTORE(sequencerAddr)

        32 => D
        ${getBatchHashData()} => A          :HASHW(0)
        A                                   :MSTORE(batchHashData)

        2 => D
        ${getChainId()}       => A          :HASHW(0)
        A                                   :MSTORE(chainId)

        32 => D
        ${getNumBatch()}        => A        :HASHW(0)
        A                                   :MSTORE(numBatch)

        ${getNTxs()} => A                   :MSTORE(pendingTxs)                           ; In Number of Txs to process

        $${var curTx = 0}

        $${var p = 0}

txLoop:
        $ => A          : MLOAD(pendingTxs)
        A-1 =>  A       : MSTORE(pendingTxs)
        A               : JMPC(processTxsEnd)

        $ => A          : MLOAD(lastCtxUsed)                           ; Set the CTX and store in system 
        A+1 => CTX      : MSTORE(lastCtxUsed)

                        : JMP(processTx)

processTxEnd:
        $${curTx = curTx +1}
                        : JMP(txLoop)

processTxsEnd: 


;;;;;;;
; Pay Fees to swquencer
;;;;;;;

        $ => D                          :MLOAD(sequencerAccValue)

        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C
        $ => A                          :SLOAD                                                  ; Original Balance in A

        1 => B
        D => C
        0 => D
        ${A+C} => D                     :ARITH                                                   ; New Balance in D

        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C
        $ => SR                         :SSTORE  

;;;;;;;
; Check Global Hash
;;;;;;;

        32 => D
        SR              : HASHW(0)
                        : HASHE(0)

        $ => A          : MLOAD(globalHash)
        $               : HASHR(0), ASSERT



        0 => A,B,C,D,E,CTX, SP, PC, GAS, MAXMEM, SR                 ; Set all registers to 0

longLoop:
        STEP-0x10000+40  : JMPC(longLoop2)
                        : JMP(finalLoop)
longLoop2:
        0
        0
        0
        0       ; 4
        0
        0
        0
        0       ; 8
        0
        0
        0
        0       ; 12
        0
        0
        0
        0       ; 16
        0
        0
        0
        0       ; 20
        0
        0
        0
        0       ; 24
        0
        0
        0
        0       ; 28
        0
        0
        0
        0       : JMP(longLoop) ; 32
                       

finalLoop:
;        STEP-0x800000+2  : JMPC(finalLoop)  ; 2**23
        STEP-0x10000+2  : JMPC(finalLoop)

                         : JMP(start)

INCLUDE "loadtx_rlp.zkasm"
INCLUDE "process_tx.zkasm"

