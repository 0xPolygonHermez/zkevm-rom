INCLUDE "constants.zkasm"
INCLUDE "vars.zkasm"

; Blocks zkROM
;       A - Load input variables
;       B - Set batch storage state-tree: batchHash (oldStateRoot) & globalExitRoot
;       C - Loop parsing RLP transactions
;       D - Loop processing transactions
;       E - Batch asserts: localExitRoot, transactions size, batchHashData & globalHash
;       F - Finalize execution

start: ; main zkROM entry point
;;;;;;;;;;;;;;;;;;
;; A - Load input variabales
;;;;;;;;;;;;;;;;;;
        ${getGlobalHash()}                  :MSTORE(globalHash)
        STEP => A
        1                                   :ASSERT ; Ensure it is the begining of the execution
        ${getGlobalExitRoot()}              :MSTORE(globalExitRoot)
        ${getOldStateRoot()}                :MSTORE(oldStateRoot)
        ${getOldLocalExitRoot()}            :MSTORE(oldLocalExitRoot)
        ${getSequencerAddr()}               :MSTORE(sequencerAddr)
        ${getBatchHashData()}               :MSTORE(batchHashData)
        ${getNumBatch()}                    :MSTORE(numBatch)
        ${getTimestamp()}                   :MSTORE(timestamp)
        ${getTxsLen()}                      :MSTORE(batchL2DataLength)

        ; Fill globalHash: oldStateRoot & oldLocalExitRoot
        32 => D
        $ => A                              :MLOAD(oldStateRoot)
        A                                   :HASHK(0) ; GlobalHash address is 0
        A => SR
        $ => A                              :MLOAD(oldLocalExitRoot)
        A                                   :HASHK(0)

        HASHPOS                             :MSTORE(oldHashPos) ; Save globalHash data position

;;;;;;;;;;;;;;;;;;
;; B - Set batch storage state-tree: batchHash (oldStateRoot) & globalExitRoot
;;;;;;;;;;;;;;;;;;

;; Set batch hash
        0 => HASHPOS ; A new hash with position 0 is started
        $ => E                              :MLOAD(lastHashKIdUsed)
        E+1 => E                            :MSTORE(lastHashKIdUsed)

        $ => A                              :MLOAD(numBatch)
        A - 1                               :HASHK(E)
        %STATE_ROOT_STORAGE_POS             :HASHK(E) ; Storage position of the batch hash
        HASHPOS                             :HASHKLEN(E)
        %MAX_CNT_KECCAK_F - CNT_KECCAK_F - %MIN_CNT_KECCAK_BATCH - 2:JMPN(outOfCounters)
        $ => C                              :HASHKDIGEST(E)
        ${eventLog(onStartBatch, C)}

        %ADDRESS_SYSTEM => A
        %SMT_KEY_SC_STORAGE => B
        $ => D                              :MLOAD(oldStateRoot)
        $ => SR                             :SSTORE ; Store 'oldStateRoot' in storage position 'keccak256(numBatch - 1, 0)'

;; Set global exit root
        0 => HASHPOS
        $ => E                              :MLOAD(lastHashKIdUsed)
        E+1 => E                            :MSTORE(lastHashKIdUsed)

        32 => D
        $ => A                              :MLOAD(globalExitRoot)
        A                                   :HASHK(E)
        %GLOBAL_EXIT_ROOT_STORAGE_POS       :HASHK(E) ; Storage position of the global exit root map
        HASHPOS                             :HASHKLEN(E)
        %MAX_CNT_KECCAK_F - CNT_KECCAK_F - %MIN_CNT_KECCAK_BATCH - 2:JMPN(outOfCounters)
        $ => C                              :HASHKDIGEST(E)

        %ADDRESS_GLOBAL_EXIT_ROOT_MANAGER_L2 => A
        %SMT_KEY_SC_STORAGE => B
        $ => D                              :MLOAD(numBatch)
        $ => SR                             :SSTORE ; Store 'numBatch' in storage position 'keccak256(globalExitRoot, 0)'
        SR                                  :MSTORE(batchSR)
;;;;;;;;;;;;;;;;;;
;; C - Loop parsing RLP transactions
;;      - Load transaction RLP data and ensure it has correct RLP encoding
;;      - If an error is found in any transaction, the batch will not process any transaction
;;;;;;;;;;;;;;;;;;

        E+1 => E                            :MSTORE(lastHashKIdUsed)
        0                                   :MSTORE(batchHashPos)
        E                                   :MSTORE(batchHashDataId)
        E                                   :MSTORE(lastTxHashId) ; Points at first hash address to be used when processing transactions
        $ => A                              :MLOAD(lastCtxUsed)
        A                                   :MSTORE(ctxTxToUse) ; Points at first context to be used when processing transactions

        $${var p = 0}

txLoopRLP:
        $ => A          :MLOAD(lastCtxUsed)
        A+1 => CTX      :MSTORE(lastCtxUsed)

        $ => A          :MLOAD(batchL2DataLength)
        $ => C          :MLOAD(batchL2DataParsed)
        C - A           :JMPN(loadTx_rlp)
                        :JMP(endCheckRLP)

endCheckRLP:
                        :JMP(txLoop)

;;;;;;;;;;;;;;;;;;
;; D - Loop processing transactions
;;      - Load transaction data and interpret it
;;;;;;;;;;;;;;;;;;

txLoop:
        $ => A          :MLOAD(pendingTxs)
        A-1 => A        :MSTORE(pendingTxs)
        A               :JMPN(processTxsEnd)

        $ => A          :MLOAD(ctxTxToUse) ; Load first context used by transaction
        A+1 => CTX      :MSTORE(ctxTxToUse)

                        :JMP(processTx)

processTxEnd:
        ${eventLog(onFinishTx)}
                        :JMP(txLoop)

processTxsEnd:

;;;;;;;;;;;;;;;;;;
;; E - Batch asserts: localExitRoot, transactions size, batchHashData & globalHash
;;;;;;;;;;;;;;;;;;

;; Assert local exit root
        ; Read 'localExitRoot' variable from GLOBAL_EXIT_ROOT_MANAGER_L2 and check
        ; it is equal to the 'newLocalExitRoot' input
        %ADDRESS_GLOBAL_EXIT_ROOT_MANAGER_L2  => A
        %SMT_KEY_SC_STORAGE => B
        %LOCAL_EXIT_ROOT_STORAGE_POS => C
        $ => A                                          :SLOAD
        A                                               :MSTORE(newLocalExitRoot)
assertNewLocalExitRoot:
        ${getNewLocalExitRoot()}                        :ASSERT


;; Transactions size verification
        ; Ensure bytes added to compute the 'batchHashData' matches the number of bytes loaded from input
        $ => A                          :MLOAD(batchHashPos)
        $                               :MLOAD(batchL2DataLength), ASSERT

;; Compute and check 'batchHashData'
        ; Compute 'batchHashData'
        ; Ensure hash result 'batchHashData' mathes the input
        A => HASHPOS
        $ => E                          :MLOAD(batchHashDataId)

        32 => D
        $ => A                          :MLOAD(globalExitRoot)
        A                               :HASHK(E)

        20 => D
        $ => A                          :MLOAD(sequencerAddr)
        A                               :HASHK(E)

        HASHPOS                         :HASHKLEN(E)
        $ => A                          :MLOAD(batchHashData)
        
        $                               :HASHKDIGEST(E), ASSERT

;; Compute and check 'globalHash'
        $ => HASHPOS                    :MLOAD(oldHashPos) ; Retrieve 'globalHash' hash postion

        32 => D
        SR                              :HASHK(0) ; add 'newStateRoot' to `globalHash`

        $ => A                          :MLOAD(newLocalExitRoot)
        A                               :HASHK(0)

        $ => A                          :MLOAD(batchHashData)
        A                               :HASHK(0)

        8 => D
        $ => A                          :MLOAD(numBatch)
        A                               :HASHK(0)

        $ => A                          :MLOAD(timestamp)
        A                               :HASHK(0)

        HASHPOS                         :HASHKLEN(0)

        $ => A                          :MLOAD(globalHash)
assertNewStateRoot:
        $                               :HASHKDIGEST(0), ASSERT

        ${eventLog(onFinishBatch)}

;;;;;;;;;;;;;;;;;;
;; F - Finalize execution
;;;;;;;;;;;;;;;;;;
finalizeExecution:
        0 => A,B,C,D,E,CTX, SP, PC, GAS, MAXMEM, SR, HASHPOS, RR ; Set all registers to 0
                                                                        :JMP(finalWait)

INCLUDE "end.zkasm"
INCLUDE "load-tx-rlp.zkasm"
INCLUDE "process-tx.zkasm"
INCLUDE "opcodes.zkasm"