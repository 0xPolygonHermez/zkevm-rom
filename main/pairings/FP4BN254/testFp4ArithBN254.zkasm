; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

CONSTL %BN254_P = 21888242871839275222246405745257275088696311157297823662689037894645226208583n 

VAR GLOBAL test

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)


        10n             :MSTORE(squareFp4BN254_a1_x)
        2n              :MSTORE(squareFp4BN254_a1_y)
        5n              :MSTORE(squareFp4BN254_a2_x)
        13n             :MSTORE(squareFp4BN254_a2_y)
                        :CALL(squareFp4BN254)
        ${dump(mem.squareFp4BN254_c1_x,mem.squareFp4BN254_c1_y,mem.squareFp4BN254_c2_x,mem.squareFp4BN254_c2_y)}

        11706129207700151979042100288958216850158405562525260961392090752318820540155n            :MSTORE(squareFp4BN254_a1_x)
        13581688218243497693010389261307054804658398598414171976249347555990073884710n              :MSTORE(squareFp4BN254_a1_y)
        2650685350723162073065693030364953757603657135232283880472468071129041178893n              :MSTORE(squareFp4BN254_a2_x)
        1415534485628002925645978830263295545820817030311522411523977773123510463790n             :MSTORE(squareFp4BN254_a2_y)
                        :CALL(squareFp4BN254)
        ${dump(mem.squareFp4BN254_c1_x,mem.squareFp4BN254_c1_y,mem.squareFp4BN254_c2_x,mem.squareFp4BN254_c2_y)}

        12879671296228341798957541889042068293248913689212425431224938470232546313254n            :MSTORE(squareFp4BN254_a1_x)
        3326450555199805883965490851796414254830144151329718176108864533289444035270n              :MSTORE(squareFp4BN254_a1_y)
        865661210072615391091663782916883487315505694294592934212781713437127182959n              :MSTORE(squareFp4BN254_a2_x)
        5364456672142552956341240304849409513108281743490635067211876654163672173225n             :MSTORE(squareFp4BN254_a2_y)
                        :CALL(squareFp4BN254)
        ${dump(mem.squareFp4BN254_c1_x,mem.squareFp4BN254_c1_y,mem.squareFp4BN254_c2_x,mem.squareFp4BN254_c2_y)}

        20034916004680903865371475524544157810838259782601065778963371780592670397755n            :MSTORE(squareFp4BN254_a1_x)
        18196221800554323016660057972017335112712278872243164622794778048181747904770n              :MSTORE(squareFp4BN254_a1_y)
        11182696274116283149832659131689911508224992839995672842130064887471806829782n              :MSTORE(squareFp4BN254_a2_x)
        13862086431460254638576437312497952755826436162922426416336796129991391475329n             :MSTORE(squareFp4BN254_a2_y)
                        :CALL(squareFp4BN254)
        ${dump(mem.squareFp4BN254_c1_x,mem.squareFp4BN254_c1_y,mem.squareFp4BN254_c2_x,mem.squareFp4BN254_c2_y)}

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "squareFp4BN254.zkasm"
INCLUDE "../FPBN254/addFpBN254.zkasm"
INCLUDE "../FPBN254/subFpBN254.zkasm"
INCLUDE "../FP2BN254/addFp2BN254.zkasm"
INCLUDE "../FP2BN254/subFp2BN254.zkasm"
INCLUDE "../FP2BN254/mulFp2BN254.zkasm"
INCLUDE "../FP2BN254/squareFp2BN254.zkasm"