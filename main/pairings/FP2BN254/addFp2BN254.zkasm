;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; addFp2BN254:
;;             in: (A + B·u), (C + D·u)
;;             out: E = A + C (mod BN254_P)
;;                  C = B + D (mod BN254_P)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; addFpEc:
;         1 => B

;         ; A + C = [D] * 2 ** 256 + [E]

;         $${var _addFpEc_AC = A + C}

;         ${_addFpEc_AC >> 256} => D
;         ${_addFpEc_AC} => E :ARITH

;         ;
;         ; with committed E,D
;         ; FpEc * [k] + [C] = D * 2 ** 256 + E
;         ;

;         ${_addFpEc_AC / const.FPEC} => B        ; times p
;         ${_addFpEc_AC % const.FPEC} => C        ; A + C (256 bits)
;         %FPEC => A

;         E :ARITH,RETURN

; VAR GLOBAL addFp2BN254_B
; VAR GLOBAL addFp2BN254_C
; VAR GLOBAL addFp2BN254_D

; TODO: This is not sound, but correct
addFp2BN254:
        ; B       :MSTORE(addFp2BN254_B)
        ; C       :MSTORE(addFp2BN254_C)
        ; D       :MSTORE(addFp2BN254_D)

        ; ; A·B + C = D·2²⁵⁶ + E
        ; 1 => B
        ; $${var _addFp2BN254_AC = A + C}
        ; ${_addFp2BN254_AC >> 256} => D
        ; ${_addFp2BN254_AC} => E :ARITH

        ${(A+C) % const.BN254_P} => E
        ${(B+D) % const.BN254_P} => C
                                        :RETURN