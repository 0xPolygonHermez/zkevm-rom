;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: The result is in the range [0,BN254_P) because if falls back to FP4/FP2 arithmetic
;;
;; squareCycloFp12BN254:
;;             in:  (a1 + a2·w) ∈ GΦ6(p²), where ai ∈ Fp6
;;             out: (c1 + c2·w) = (a1 + a2·w)² ∈ GΦ6(p²)
;;
;; NOTE: The output is not guaranteed to be in GΦ6(p²), if the input isn't.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL squareCycloFp12BN254_a11_x
VAR GLOBAL squareCycloFp12BN254_a11_y
VAR GLOBAL squareCycloFp12BN254_a12_x
VAR GLOBAL squareCycloFp12BN254_a12_y
VAR GLOBAL squareCycloFp12BN254_a13_x
VAR GLOBAL squareCycloFp12BN254_a13_y
VAR GLOBAL squareCycloFp12BN254_a21_x
VAR GLOBAL squareCycloFp12BN254_a21_y
VAR GLOBAL squareCycloFp12BN254_a22_x
VAR GLOBAL squareCycloFp12BN254_a22_y
VAR GLOBAL squareCycloFp12BN254_a23_x
VAR GLOBAL squareCycloFp12BN254_a23_y
VAR GLOBAL squareCycloFp12BN254_c11_x
VAR GLOBAL squareCycloFp12BN254_c11_y
VAR GLOBAL squareCycloFp12BN254_c12_x
VAR GLOBAL squareCycloFp12BN254_c12_y
VAR GLOBAL squareCycloFp12BN254_c13_x
VAR GLOBAL squareCycloFp12BN254_c13_y
VAR GLOBAL squareCycloFp12BN254_c21_x
VAR GLOBAL squareCycloFp12BN254_c21_y
VAR GLOBAL squareCycloFp12BN254_c22_x
VAR GLOBAL squareCycloFp12BN254_c22_y
VAR GLOBAL squareCycloFp12BN254_c23_x
VAR GLOBAL squareCycloFp12BN254_c23_y

VAR GLOBAL squareCycloFp12BN254_t11_x
VAR GLOBAL squareCycloFp12BN254_t11_y
VAR GLOBAL squareCycloFp12BN254_t22_x
VAR GLOBAL squareCycloFp12BN254_t22_y
VAR GLOBAL squareCycloFp12BN254_t23_x
VAR GLOBAL squareCycloFp12BN254_t23_y
VAR GLOBAL squareCycloFp12BN254_t12_x
VAR GLOBAL squareCycloFp12BN254_t12_y
VAR GLOBAL squareCycloFp12BN254_t13_x
VAR GLOBAL squareCycloFp12BN254_t13_y
VAR GLOBAL squareCycloFp12BN254_aux_x
VAR GLOBAL squareCycloFp12BN254_aux_y
VAR GLOBAL squareCycloFp12BN254_t21_x
VAR GLOBAL squareCycloFp12BN254_t21_y

VAR GLOBAL squareCycloFp12BN254_RR

squareCycloFp12BN254:
        RR              :MSTORE(squareCycloFp12BN254_RR)

        ; 1] [t11,t22] = (a11 + a22·V)²
        $ => A          :MLOAD(squareCycloFp12BN254_a11_x)
        $ => B          :MLOAD(squareCycloFp12BN254_a11_y)
        $ => C          :MLOAD(squareCycloFp12BN254_a22_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a22_y)
        A               :MSTORE(squareFp4BN254_a1_x)
        B               :MSTORE(squareFp4BN254_a1_y)
        C               :MSTORE(squareFp4BN254_a2_x)
        D               :MSTORE(squareFp4BN254_a2_y), CALL(squareFp4BN254)
        $ => A          :MLOAD(squareFp4BN254_c1_x)
        $ => B          :MLOAD(squareFp4BN254_c1_y)
        $ => C          :MLOAD(squareFp4BN254_c2_x)
        $ => D          :MLOAD(squareFp4BN254_c2_y)
        A               :MSTORE(squareCycloFp12BN254_t11_x)
        B               :MSTORE(squareCycloFp12BN254_t11_y)
        C               :MSTORE(squareCycloFp12BN254_t22_x)
        D               :MSTORE(squareCycloFp12BN254_t22_y)

        ; 2] [t23,t12] = (a21 + a13·V)²
        $ => A          :MLOAD(squareCycloFp12BN254_a21_x)
        $ => B          :MLOAD(squareCycloFp12BN254_a21_y)
        $ => C          :MLOAD(squareCycloFp12BN254_a13_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a13_y)
        A               :MSTORE(squareFp4BN254_a1_x)
        B               :MSTORE(squareFp4BN254_a1_y)
        C               :MSTORE(squareFp4BN254_a2_x)
        D               :MSTORE(squareFp4BN254_a2_y), CALL(squareFp4BN254)
        $ => A          :MLOAD(squareFp4BN254_c1_x)
        $ => B          :MLOAD(squareFp4BN254_c1_y)
        $ => C          :MLOAD(squareFp4BN254_c2_x)
        $ => D          :MLOAD(squareFp4BN254_c2_y)
        A               :MSTORE(squareCycloFp12BN254_t23_x)
        B               :MSTORE(squareCycloFp12BN254_t23_y)
        C               :MSTORE(squareCycloFp12BN254_t12_x)
        D               :MSTORE(squareCycloFp12BN254_t12_y)

        ; 3] [t13,aux] = (a12 + a23·V)²
        $ => A          :MLOAD(squareCycloFp12BN254_a12_x)
        $ => B          :MLOAD(squareCycloFp12BN254_a12_y)
        $ => C          :MLOAD(squareCycloFp12BN254_a23_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a23_y)
        A               :MSTORE(squareFp4BN254_a1_x)
        B               :MSTORE(squareFp4BN254_a1_y)
        C               :MSTORE(squareFp4BN254_a2_x)
        D               :MSTORE(squareFp4BN254_a2_y), CALL(squareFp4BN254)
        $ => A          :MLOAD(squareFp4BN254_c1_x)
        $ => B          :MLOAD(squareFp4BN254_c1_y)
        $ => C          :MLOAD(squareFp4BN254_c2_x)
        $ => D          :MLOAD(squareFp4BN254_c2_y)
        A               :MSTORE(squareCycloFp12BN254_t13_x)
        B               :MSTORE(squareCycloFp12BN254_t13_y)
        C               :MSTORE(squareCycloFp12BN254_aux_x)
        D               :MSTORE(squareCycloFp12BN254_aux_y)

        ; 4] t21 = aux·(9+u)
        $ => A          :MLOAD(squareCycloFp12BN254_aux_x)
        $ => B          :MLOAD(squareCycloFp12BN254_aux_y)
        9n => C
        1n => D         :CALL(mulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_t21_x)
        C               :MSTORE(squareCycloFp12BN254_t21_y)

       ; 5] c11 = -2·a11 + 3·t11
        %BN254_P - 2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a11_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a11_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a11_x)
        C               :MSTORE(squareCycloFp12BN254_a11_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t11_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t11_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a11_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a11_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c11_x)
        C               :MSTORE(squareCycloFp12BN254_c11_y)

       ; 6] c12 = -2·a12 + 3·t23
        %BN254_P - 2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a12_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a12_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a12_x)
        C               :MSTORE(squareCycloFp12BN254_a12_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t23_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t23_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a12_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a12_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c12_x)
        C               :MSTORE(squareCycloFp12BN254_c12_y)

       ; 7] c13 = -2·a13 + 3·t13
        %BN254_P - 2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a13_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a13_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a13_x)
        C               :MSTORE(squareCycloFp12BN254_a13_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t13_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t13_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a13_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a13_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c13_x)
        C               :MSTORE(squareCycloFp12BN254_c13_y)

       ; 8] c21 = 2·a21 + 3·t21
        2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a21_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a21_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a21_x)
        C               :MSTORE(squareCycloFp12BN254_a21_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t21_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t21_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a21_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a21_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c21_x)
        C               :MSTORE(squareCycloFp12BN254_c21_y)

       ; 9] c22 = 2·a22 + 3·t22
        2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a22_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a22_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a22_x)
        C               :MSTORE(squareCycloFp12BN254_a22_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t22_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t22_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a22_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a22_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c22_x)
        C               :MSTORE(squareCycloFp12BN254_c22_y)

       ; 9] c23 = 2·a23 + 3·t12
        2n => A
        $ => C          :MLOAD(squareCycloFp12BN254_a23_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a23_y), CALL(escalarMulFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_a23_x)
        C               :MSTORE(squareCycloFp12BN254_a23_y)

        3n => A
        $ => C          :MLOAD(squareCycloFp12BN254_t12_x)
        $ => D          :MLOAD(squareCycloFp12BN254_t12_y), CALL(escalarMulFp2BN254)

        E => A
        C => B
        $ => C          :MLOAD(squareCycloFp12BN254_a23_x)
        $ => D          :MLOAD(squareCycloFp12BN254_a23_y), CALL(addFp2BN254)
        E               :MSTORE(squareCycloFp12BN254_c23_x)
        C               :MSTORE(squareCycloFp12BN254_c23_y)


        $ => RR         :MLOAD(squareCycloFp12BN254_RR)
                        :RETURN