; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

CONSTL %BN254_P = 21888242871839275222246405745257275088696311157297823662689037894645226208583n 

VAR GLOBAL test

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)


        10n             :MSTORE(addFp12BN254_a11_x)
        2n              :MSTORE(addFp12BN254_a11_y)
        5n              :MSTORE(addFp12BN254_a12_x)
        13n             :MSTORE(addFp12BN254_a12_y)
        7n              :MSTORE(addFp12BN254_a13_x)
        5n              :MSTORE(addFp12BN254_a13_y)
        10n             :MSTORE(addFp12BN254_a21_x)
        2n              :MSTORE(addFp12BN254_a21_y)
        5n              :MSTORE(addFp12BN254_a22_x)
        13n             :MSTORE(addFp12BN254_a22_y)
        7n              :MSTORE(addFp12BN254_a23_x)
        5n              :MSTORE(addFp12BN254_a23_y)
        78n             :MSTORE(addFp12BN254_b11_x)
        5n              :MSTORE(addFp12BN254_b11_y)
        3n              :MSTORE(addFp12BN254_b12_x)
        193n             :MSTORE(addFp12BN254_b12_y)
        20n              :MSTORE(addFp12BN254_b13_x)
        2n              :MSTORE(addFp12BN254_b13_y)
        1n             :MSTORE(addFp12BN254_b21_x)
        0n              :MSTORE(addFp12BN254_b21_y)
        0n              :MSTORE(addFp12BN254_b22_x)
        3n             :MSTORE(addFp12BN254_b22_y)
        69n              :MSTORE(addFp12BN254_b23_x)
        27n              :MSTORE(addFp12BN254_b23_y)
                        :CALL(addFp12BN254)
        ${dump(mem.addFp12BN254_c11_x,mem.addFp12BN254_c11_y,mem.addFp12BN254_c12_x,mem.addFp12BN254_c12_y,mem.addFp12BN254_c13_x,mem.addFp12BN254_c13_y)}
        ${dump(mem.addFp12BN254_c21_x,mem.addFp12BN254_c21_y,mem.addFp12BN254_c22_x,mem.addFp12BN254_c22_y,mem.addFp12BN254_c23_x,mem.addFp12BN254_c23_y)}

        10n             :MSTORE(subFp12BN254_a11_x)
        2n              :MSTORE(subFp12BN254_a11_y)
        5n              :MSTORE(subFp12BN254_a12_x)
        13n             :MSTORE(subFp12BN254_a12_y)
        7n              :MSTORE(subFp12BN254_a13_x)
        5n              :MSTORE(subFp12BN254_a13_y)
        10n             :MSTORE(subFp12BN254_a21_x)
        2n              :MSTORE(subFp12BN254_a21_y)
        5n              :MSTORE(subFp12BN254_a22_x)
        13n             :MSTORE(subFp12BN254_a22_y)
        7n              :MSTORE(subFp12BN254_a23_x)
        5n              :MSTORE(subFp12BN254_a23_y)
        78n             :MSTORE(subFp12BN254_b11_x)
        5n              :MSTORE(subFp12BN254_b11_y)
        3n              :MSTORE(subFp12BN254_b12_x)
        193n             :MSTORE(subFp12BN254_b12_y)
        20n              :MSTORE(subFp12BN254_b13_x)
        2n              :MSTORE(subFp12BN254_b13_y)
        1n             :MSTORE(subFp12BN254_b21_x)
        0n              :MSTORE(subFp12BN254_b21_y)
        0n              :MSTORE(subFp12BN254_b22_x)
        3n             :MSTORE(subFp12BN254_b22_y)
        69n              :MSTORE(subFp12BN254_b23_x)
        27n              :MSTORE(subFp12BN254_b23_y)
                        :CALL(subFp12BN254)
        ${dump(mem.subFp12BN254_c11_x,mem.subFp12BN254_c11_y,mem.subFp12BN254_c12_x,mem.subFp12BN254_c12_y,mem.subFp12BN254_c13_x,mem.subFp12BN254_c13_y)}
        ${dump(mem.subFp12BN254_c21_x,mem.subFp12BN254_c21_y,mem.subFp12BN254_c22_x,mem.subFp12BN254_c22_y,mem.subFp12BN254_c23_x,mem.subFp12BN254_c23_y)}

        ; 10n             :MSTORE(mulFp6BN254_a1_x)
        ; 2n              :MSTORE(mulFp6BN254_a1_y)
        ; 5n              :MSTORE(mulFp6BN254_a2_x)
        ; 13n             :MSTORE(mulFp6BN254_a2_y)
        ; 7n              :MSTORE(mulFp6BN254_a3_x)
        ; 5n              :MSTORE(mulFp6BN254_a3_y)
        ; 9n              :MSTORE(mulFp6BN254_b1_x)
        ; 1n              :MSTORE(mulFp6BN254_b1_y)
        ; 1n              :MSTORE(mulFp6BN254_b2_x)
        ; 2n              :MSTORE(mulFp6BN254_b2_y)
        ; 14n             :MSTORE(mulFp6BN254_b3_x)
        ; 2n              :MSTORE(mulFp6BN254_b3_y)
        ;                 :CALL(mulFp6BN254)
        ; ${dump(mem.mulFp6BN254_c1_x,mem.mulFp6BN254_c1_y,mem.mulFp6BN254_c2_x,mem.mulFp6BN254_c2_y,mem.mulFp6BN254_c3_x,mem.mulFp6BN254_c3_y)}

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

; INCLUDE "mulFp6BN254.zkasm"
INCLUDE "addFp12BN254.zkasm"
INCLUDE "subFp12BN254.zkasm"