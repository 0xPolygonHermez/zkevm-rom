;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRE: P1,P2 ∈ E'(Fp2)
;; POST: The resulting coordinates are in the range [0,BN254_P) because if falls back to FP2 arithmetic
;;
;; addPointBN254:
;;             in: P1 = (P1.x1 + P1.x2·u, P1.y1 + P1.y2·u), P2 = (P2.x1 + P2.x2·u, P2.y1 + P2.y2·u) ∈ E'(Fp2)
;;             out: P1 + P2 = (P3.x1 + P3.x2·u, P3.y1 + P3.y2·u) ∈ E'(Fp2)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; addPointBN254 assumes both P1 and P2 belong to E'(Fp2), since it is checked in the pairing.
; However, it must be implemented if addPointBN254 wants to be used independently.

; Since the curve is E'/Fp2: y² = x³ + 3/(9+u), there is no issue in representing the point at infinity as (0, 0).

VAR GLOBAL addPointBN254_P1_x1
VAR GLOBAL addPointBN254_P1_x2
VAR GLOBAL addPointBN254_P1_y1
VAR GLOBAL addPointBN254_P1_y2
VAR GLOBAL addPointBN254_P2_x1
VAR GLOBAL addPointBN254_P2_x2
VAR GLOBAL addPointBN254_P2_y1
VAR GLOBAL addPointBN254_P2_y2
VAR GLOBAL addPointBN254_P3_x1
VAR GLOBAL addPointBN254_P3_x2
VAR GLOBAL addPointBN254_P3_y1
VAR GLOBAL addPointBN254_P3_y2
VAR GLOBAL addPointBN254_lambda_x
VAR GLOBAL addPointBN254_lambda_y
VAR GLOBAL addPointBN254_RR

addPointBN254:
        RR      :MSTORE(addPointBN254_RR)

        ; Is P1 = O?
        0n => B
        $ => A  :MLOAD(addPointBN254_P1_x1)
        $       :EQ, JMPNC(__addPointBN254_P1_continue)
        $ => A  :MLOAD(addPointBN254_P1_x2)
        $       :EQ, JMPNC(__addPointBN254_P1_continue)
        $ => A  :MLOAD(addPointBN254_P1_y1)
        $       :EQ, JMPNC(__addPointBN254_P1_continue)
        $ => A  :MLOAD(addPointBN254_P1_y2)
        $       :EQ, JMPC(addPointBN254_P1_is_zero)
                __addPointBN254_P1_continue:

        ; Is P2 = 0?
        0n => B
        $ => A  :MLOAD(addPointBN254_P2_x1)
        $       :EQ, JMPNC(__addPointBN254_P2_continue)
        $ => A  :MLOAD(addPointBN254_P2_x2)
        $       :EQ, JMPNC(__addPointBN254_P2_continue)
        $ => A  :MLOAD(addPointBN254_P2_y1)
        $       :EQ, JMPNC(__addPointBN254_P2_continue)
        $ => A  :MLOAD(addPointBN254_P2_y2)
        $       :EQ, JMPC(addPointBN254_P2_is_zero)
                __addPointBN254_P2_continue:

        ; P1 and P2 are not 0, let's check whether they are different points, the same point or inverses of each other
        ; Is P1.x == P2.x?
        $ => A  :MLOAD(addPointBN254_P1_x1)
        $ => B  :MLOAD(addPointBN254_P2_x1)
        $       :EQ, JMPNC(addPointBN254_different)
        $ => A  :MLOAD(addPointBN254_P1_x2)
        $ => B  :MLOAD(addPointBN254_P2_x2)
        $       :EQ, JMPNC(addPointBN254_different)

        ; Is P1.y == P2.y?
        $ => A  :MLOAD(addPointBN254_P1_y1)
        $ => B  :MLOAD(addPointBN254_P2_y1)
        $       :EQ, JMPNC(addPointBN254_P1_and_P2_are_inverted)
        $ => A  :MLOAD(addPointBN254_P1_y2)
        $ => B  :MLOAD(addPointBN254_P2_y2)
        $       :EQ, JMPNC(addPointBN254_P1_and_P2_are_inverted)

        ; P1 == P2
                                    :JMP(addPointBN254_same)

addPointBN254_P1_is_zero:
        ; P3 = P2
        $ => A  :MLOAD(addPointBN254_P2_x1)
        $ => B  :MLOAD(addPointBN254_P2_x2)
        $ => C  :MLOAD(addPointBN254_P2_y1)
        $ => D  :MLOAD(addPointBN254_P2_y2)
        A       :MSTORE(addPointBN254_P3_x1)
        B       :MSTORE(addPointBN254_P3_x2)
        C       :MSTORE(addPointBN254_P3_y1)
        D       :MSTORE(addPointBN254_P3_y2)

                :JMP(addPointBN254_end)

addPointBN254_P2_is_zero:
        ; P3 = P1
        $ => A  :MLOAD(addPointBN254_P1_x1)
        $ => B  :MLOAD(addPointBN254_P1_x2)
        $ => C  :MLOAD(addPointBN254_P1_y1)
        $ => D  :MLOAD(addPointBN254_P1_y2)
        A       :MSTORE(addPointBN254_P3_x1)
        B       :MSTORE(addPointBN254_P3_x2)
        C       :MSTORE(addPointBN254_P3_y1)
        D       :MSTORE(addPointBN254_P3_y2)

                :JMP(addPointBN254_end)

addPointBN254_P1_and_P2_are_inverted:
        ; Check -P1.y == P2.y
        %BN254_P => A
        $ => B          :MLOAD(addPointBN254_P1_y1)
        $ => C          :SUB
        $ => B          :MLOAD(addPointBN254_P1_y2)
        $ => D          :SUB

        $ => A          :MLOAD(addPointBN254_P2_y1)
        C               :ASSERT
        $ => A          :MLOAD(addPointBN254_P2_y2)
        D               :ASSERT

        ; P3 = O
        0n      :MSTORE(addPointBN254_P3_x1)
        0n      :MSTORE(addPointBN254_P3_x2)
        0n      :MSTORE(addPointBN254_P3_y1)
        0n      :MSTORE(addPointBN254_P3_y2)

                :JMP(addPointBN254_end)

addPointBN254_same:
        $ => A  :MLOAD(addPointBN254_P1_y1)
        $ => B  :MLOAD(addPointBN254_P1_y2)
        $ => C  :MLOAD(addPointBN254_P1_y1)
        $ => D  :MLOAD(addPointBN254_P1_y2), CALL(addFp2BN254)
        ; E + C·u = 2y

        E => A
        C => B  :CALL(invFp2BN254)
        ; C + D·u = 1 / 2y

        3n => A :CALL(escalarMulFp2BN254)
        ; E + C·u = 3/2y

        $ => A  :MLOAD(addPointBN254_P1_x1)
        $ => B  :MLOAD(addPointBN254_P1_x2)
        C => D
        E => C  :CALL(mulFp2BN254)
        ; E + C·u = 3x/2y

        $ => A  :MLOAD(addPointBN254_P1_x1)
        $ => B  :MLOAD(addPointBN254_P1_x2)
        C => D
        E => C  :CALL(mulFp2BN254)
        ; E + C·u = lambda = 3x²/2y

        E       :MSTORE(addPointBN254_lambda_x)
        C       :MSTORE(addPointBN254_lambda_y)
        ; E + C·u = lambda

        E => A
        C => B  :CALL(squareFp2BN254)
        ; E + C·u = lambda²

        E => A
        C => B
        $ => C  :MLOAD(addPointBN254_P1_x1)
        $ => D  :MLOAD(addPointBN254_P1_x2), CALL(subFp2BN254)
        ; E + C·u = lambda² - x

        E => A
        C => B
        $ => C  :MLOAD(addPointBN254_P1_x1)
        $ => D  :MLOAD(addPointBN254_P1_x2), CALL(subFp2BN254)
        ; E + C·u = lambda² - x - x

                :JMP(addPointBN254_common_calculate)

addPointBN254_different:
        $ => A  :MLOAD(addPointBN254_P2_x1)
        $ => B  :MLOAD(addPointBN254_P2_x2)
        $ => C  :MLOAD(addPointBN254_P1_x1)
        $ => D  :MLOAD(addPointBN254_P1_x2), CALL(subFp2BN254)
        ; E + C·u = P2.x - P1.x

        E => A
        C => B  :CALL(invFp2BN254)
        ; C + D·u = 1 / (P2_x - P1_x)
        C       :MSTORE(addPointBN254_lambda_x)
        D       :MSTORE(addPointBN254_lambda_y)

        $ => A  :MLOAD(addPointBN254_P2_y1)
        $ => B  :MLOAD(addPointBN254_P2_y2)
        $ => C  :MLOAD(addPointBN254_P1_y1)
        $ => D  :MLOAD(addPointBN254_P1_y2), CALL(subFp2BN254)
        ; E + C·u = P2.y - P1.y

        $ => A  :MLOAD(addPointBN254_lambda_x)
        $ => B  :MLOAD(addPointBN254_lambda_y)
        C => D
        E => C  :CALL(mulFp2BN254)
        ; E + C·u = lambda = (P2_y - P1_y) / (P2_x - P1_x)
        E       :MSTORE(addPointBN254_lambda_x)
        C       :MSTORE(addPointBN254_lambda_y)

        E => A
        C => B  :CALL(squareFp2BN254)
        ; E + C·u = lambda²

        E => A
        C => B
        $ => C  :MLOAD(addPointBN254_P1_x1)
        $ => D  :MLOAD(addPointBN254_P1_x2), CALL(subFp2BN254)
        ; E + C·u = lambda² - P1.x

        E => A
        C => B
        $ => C  :MLOAD(addPointBN254_P2_x1)
        $ => D  :MLOAD(addPointBN254_P2_x2), CALL(subFp2BN254)
        ; E + C·u = lambda² - P1.x - P2.x

addPointBN254_common_calculate:
        E           :MSTORE(addPointBN254_P3_x1)
        C           :MSTORE(addPointBN254_P3_x2)
        ; P3.x = lambda² - P1.x - P2.x

        $ => A  :MLOAD(addPointBN254_P1_x1)
        $ => B  :MLOAD(addPointBN254_P1_x2)
        C => D
        E => C  :CALL(subFp2BN254)
        ; E + C·u = P1.x - P3.x

        $ => A  :MLOAD(addPointBN254_lambda_x)
        $ => B  :MLOAD(addPointBN254_lambda_y)
        C => D
        E => C  :CALL(mulFp2BN254)
        ; E + C·u = lambda·(P1.x - P3.x)

        E => A
        C => B
        $ => C  :MLOAD(addPointBN254_P1_y1)
        $ => D  :MLOAD(addPointBN254_P1_y2), CALL(subFp2BN254)
        ; E + C·u = lambda·(P1.x - P3.x) - P1.y

        E           :MSTORE(addPointBN254_P3_y1)
        C           :MSTORE(addPointBN254_P3_y2)

addPointBN254_end:
        $ => RR         :MLOAD(addPointBN254_RR)
                        :RETURN