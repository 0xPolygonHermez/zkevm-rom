;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRE: P ∈ E'(Fp2)
;; POST: The resulting coordinates are in the range [0,BN254_P) because if falls back to addPointBN254
;;
;;
;; escalarMulBN254:
;;             in: k, P = (P.x1 + P.x2·u, P.y1 + P.y2·u) ∈ E'(Fp2), where k ∈ [0,r-1]
;;             out: k·P = (Q.x1 + Q.x2·u, Q.y1 + Q.y2·u) ∈ E'(Fp2)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; escalarMulBN254 assumes P belong to E'(Fp2), since it is checked in the pairing.
; However, it must be implemented if escalarMulBN254 wants to be used independently.

; Since the curve is E'/Fp2: y² = x³ + 3/(9+u), there is no issue in representing the point at infinity as (0, 0).

VAR GLOBAL escalarMulBN254_k
VAR GLOBAL escalarMulBN254_P_x1
VAR GLOBAL escalarMulBN254_P_x2
VAR GLOBAL escalarMulBN254_P_y1
VAR GLOBAL escalarMulBN254_P_y2
VAR GLOBAL escalarMulBN254_Q_x1
VAR GLOBAL escalarMulBN254_Q_x2
VAR GLOBAL escalarMulBN254_Q_y1
VAR GLOBAL escalarMulBN254_Q_y2

VAR GLOBAL escalarMulBN254_RR


escalarMulBN254:
        RR      :MSTORE(escalarMulBN254_RR)

        ; Is P = O?
        0n => B
        $ => A  :MLOAD(escalarMulBN254_P_x1)
        $       :EQ, JMPNC(__escalarMulBN254_P_continue)
        $ => A  :MLOAD(escalarMulBN254_P_x2)
        $       :EQ, JMPNC(__escalarMulBN254_P_continue)
        $ => A  :MLOAD(escalarMulBN254_P_y1)
        $       :EQ, JMPNC(__escalarMulBN254_P_continue)
        $ => A  :MLOAD(escalarMulBN254_P_y2)
        $       :EQ, JMPC(escalarMulBN254_P_is_zero)
                __escalarMulBN254_P_continue:

        ; Is k = 0?
        $ => B      :MLOAD(escalarMulBN254_k), CALL(reduceFrBN254)
        A           :MSTORE(escalarMulBN254_k)
        0n => B
        $           :EQ, JMPC(escalarMulBN254_k_is_zero)

        257 => RCX

        $ => A  :MLOAD(escalarMulBN254_P_x1)
        $ => B  :MLOAD(escalarMulBN254_P_x2)
        $ => C  :MLOAD(escalarMulBN254_P_y1)
        $ => D  :MLOAD(escalarMulBN254_P_y2)
        A       :MSTORE(escalarMulBN254_Q_x1)
        B       :MSTORE(escalarMulBN254_Q_x2)
        C       :MSTORE(escalarMulBN254_Q_y1)
        D       :MSTORE(escalarMulBN254_Q_y2)

                :JMP(escalarMulBN254_find_MSB_k)

escalarMulBN254_P_is_zero:
        ; Q = O
        0n      :MSTORE(escalarMulBN254_Q_x1)
        0n      :MSTORE(escalarMulBN254_Q_x2)
        0n      :MSTORE(escalarMulBN254_Q_y1)
        0n      :MSTORE(escalarMulBN254_Q_y2)

                :JMP(escalarMulBN254_end)

escalarMulBN254_k_is_zero:
        ; Q = O
        0n      :MSTORE(escalarMulBN254_Q_x1)
        0n      :MSTORE(escalarMulBN254_Q_x2)
        0n      :MSTORE(escalarMulBN254_Q_y1)
        0n      :MSTORE(escalarMulBN254_Q_y2)

                :JMP(escalarMulBN254_end)

escalarMulBN254_find_MSB_k:
        RCX - 1 => RCX
        $ => A,B        :MLOAD(escalarMulBN254_k)
        ; E = 2A
        $ => E          :ADD,MSTORE(escalarMulBN254_k), JMPNC(escalarMulBN254_find_MSB_k)


escalarMulBN254_loop:
        RCX - 1 => RCX    :JMPZ(escalarMulBN254_end)

        ; We always double
        $ => A  :MLOAD(escalarMulBN254_Q_x1)
        $ => B  :MLOAD(escalarMulBN254_Q_x2)
        $ => C  :MLOAD(escalarMulBN254_Q_y1)
        $ => D  :MLOAD(escalarMulBN254_Q_y2)
        A       :MSTORE(addPointBN254_P1_x1)
        B       :MSTORE(addPointBN254_P1_x2)
        C       :MSTORE(addPointBN254_P1_y1)
        D       :MSTORE(addPointBN254_P1_y2)
        A       :MSTORE(addPointBN254_P2_x1)
        B       :MSTORE(addPointBN254_P2_x2)
        C       :MSTORE(addPointBN254_P2_y1)
        D       :MSTORE(addPointBN254_P2_y2), CALL(addPointBN254)
        ; Q = Q + Q

        $ => A  :MLOAD(addPointBN254_P3_x1)
        $ => B  :MLOAD(addPointBN254_P3_x2)
        $ => C  :MLOAD(addPointBN254_P3_y1)
        $ => D  :MLOAD(addPointBN254_P3_y2)
        A       :MSTORE(escalarMulBN254_Q_x1)
        B       :MSTORE(escalarMulBN254_Q_x2)
        C       :MSTORE(escalarMulBN254_Q_y1)
        D       :MSTORE(escalarMulBN254_Q_y2)

        ; We check if the MSB b of k is either 1 or 0. If b==1, we should add P to Q.
        ; Then, update the value of k.
        $ => A,B        :MLOAD(escalarMulBN254_k)
        ; E = 2A
        $ => E          :ADD,MSTORE(escalarMulBN254_k), JMPNC(escalarMulBN254_loop)

escalarMulBN254_add:
        ; We add
        $ => A  :MLOAD(escalarMulBN254_Q_x1)
        $ => B  :MLOAD(escalarMulBN254_Q_x2)
        $ => C  :MLOAD(escalarMulBN254_Q_y1)
        $ => D  :MLOAD(escalarMulBN254_Q_y2)
        A       :MSTORE(addPointBN254_P1_x1)
        B       :MSTORE(addPointBN254_P1_x2)
        C       :MSTORE(addPointBN254_P1_y1)
        D       :MSTORE(addPointBN254_P1_y2)

        $ => A  :MLOAD(escalarMulBN254_P_x1)
        $ => B  :MLOAD(escalarMulBN254_P_x2)
        $ => C  :MLOAD(escalarMulBN254_P_y1)
        $ => D  :MLOAD(escalarMulBN254_P_y2)
        A       :MSTORE(addPointBN254_P2_x1)
        B       :MSTORE(addPointBN254_P2_x2)
        C       :MSTORE(addPointBN254_P2_y1)
        D       :MSTORE(addPointBN254_P2_y2), CALL(addPointBN254)
        ; Q = Q + P

        $ => A  :MLOAD(addPointBN254_P3_x1)
        $ => B  :MLOAD(addPointBN254_P3_x2)
        $ => C  :MLOAD(addPointBN254_P3_y1)
        $ => D  :MLOAD(addPointBN254_P3_y2)
        A       :MSTORE(escalarMulBN254_Q_x1)
        B       :MSTORE(escalarMulBN254_Q_x2)
        C       :MSTORE(escalarMulBN254_Q_y1)
        D       :MSTORE(escalarMulBN254_Q_y2), JMP(escalarMulBN254_loop)


escalarMulBN254_end:
        $ => RR :MLOAD(escalarMulBN254_RR)
                :RETURN