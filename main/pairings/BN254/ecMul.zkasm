;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: The resulting coordinates are in the range [0,BN254_P) because if falls back to FP arithmetic
;;
;; ecMul:
;;             in: k, P = (P.x, P.y) ∈ E(Fp), where k ∈ [0,r-1]
;;             out: k·P = (Q.x, Q.y) ∈ E(Fp)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Since the curve is E/Fp: y² = x³ + 3, there is no issue in representing the point at infinity as (0, 0).

VAR GLOBAL ecMul_k
VAR GLOBAL ecMul_P_x
VAR GLOBAL ecMul_P_y
VAR GLOBAL ecMul_Q_x
VAR GLOBAL ecMul_Q_y

VAR GLOBAL ecMul_RR

; ERROR CODES (B)
; 0 - no error
; 1 - P_x is too big
; 2 - P_y is too big
; 3 - P is not in E(Fp)

; RESOURCES (not considering error paths):
; -------------------------------------------
; PATH 1 P == 𝒪:            [steps: 17, bin: 4]
; PATH 2 k == 0 and P != 𝒪: [steps: 80-82, bin: 10-11, arith: 9]
; PATH 3 k != 0 and P != 𝒪:  <--- w.c.
;                [steps: 80-82, bin: 10-11, arith: 9]                                   // setup
;                 + (257 - pos_1st_nz_bit(k)) * [steps: 3, bin: 1]                      // find MSB of k
;                 + max_bin_len(k) * [steps: 304-336, bin: 32-34, arith: 40]            // doubles
;                 + number_of_bits_1(k) * [steps: 277-310, bin: 30-31, arith: 36]       // additions
;                 + [steps: 4]                                                          // last iteration + end
;                total (w.c.): [steps: 162890 bin: 16395, arith: 19161]                 // [82 + 4*3 + 252*336 + 252*310 + 4,
;                                                                                           11 + 4*1 + 252*34  + 252*31,
;                                                                                           9        + 252*40  + 252*36]
; -------------------------------------------

ecMul:
        RR      :MSTORE(ecMul_RR)

        %BN254_P_MINUS_ONE => A
        $ => B      :MLOAD(ecMul_P_x)
        $           :LT, JMPC(ecMul_Px_too_big)
        $ => B      :MLOAD(ecMul_P_y)
        $           :LT, JMPC(ecMul_Py_too_big)
        ; [steps: 6, bin: 2]

        ; Is P = O?
        0n => B
        $ => A  :MLOAD(ecMul_P_x)
        $       :EQ, JMPNC(__ecMul_P_continue)
        $ => A  :MLOAD(ecMul_P_y)
        $       :EQ, JMPC(ecMul_P_is_zero)
                __ecMul_P_continue:
        ; [steps: 11, bin: 4]

        ; 1] Check if P is in E(Fp)
        ; P in E iff (P.y)² == (P.x)³ + 3 (mod p)
        ; 1.1] Compute LHS and RHS
        $ => A    :MLOAD(ecMul_P_x), CALL(squareFpBN254)
        ; B = (P.x)²

        $ => A      :MLOAD(ecMul_P_x), CALL(mulFpBN254)
        ; C = (P.x)³

        %BN254_E_B => A     :CALL(addFpBN254)
        ; C = (P.x)³ + 3
        C           :MSTORE(ecMul_Q_x)

        $ => A    :MLOAD(ecMul_P_y), CALL(squareFpBN254)
        ; B = (Py)²

        ; 1.2] Check if LHS == RHS
        B => A
        $ => B      :MLOAD(ecMul_Q_x)
        $           :EQ, JMPNC(ecMul_P_is_not_in_E)
        ; [steps: 63, bin: 9, arith: 8]

        ; Is k ∈ [1,r-1]?
        $ => B      :MLOAD(ecMul_k), CALL(reduceFrBN254)
        A           :MSTORE(ecMul_k)
        0n => B
        $           :EQ, JMPC(ecMul_k_is_zero)
        ; [steps: 76, bin: 11, arith: 9]

        257 => RCX

        $ => A  :MLOAD(ecMul_P_x)
        $ => C  :MLOAD(ecMul_P_y)
        A       :MSTORE(ecMul_Q_x)
        C       :MSTORE(ecMul_Q_y)

                :JMP(ecMul_find_MSB_k)
        ; [steps: 82, bin: 11, arith: 9]

; Begin of branching
ecMul_P_is_zero:
        ; before (w.c.) -> [steps: 11, bin: 4]

        ; Q = O
        0n      :MSTORE(ecMul_Q_x)
        0n      :MSTORE(ecMul_Q_y)

                :JMP(ecMul_correct)

        ; till the end -> [steps: 17, bin: 4]

ecMul_k_is_zero:
        ; before (w.c.) -> [steps: 76, bin: 11, arith: 9]

        ; Q = O
        0n      :MSTORE(ecMul_Q_x)
        0n      :MSTORE(ecMul_Q_y)

                :JMP(ecMul_correct)

        ; till the end -> [steps: 82, bin: 11, arith: 9]
; End of branching

ecMul_find_MSB_k:
        ; block costs: [steps: 3, bin: 1]
        RCX - 1 => RCX
        $ => A,B        :MLOAD(ecMul_k)
        ; E = 2A
        $ => E          :ADD,MSTORE(ecMul_k), JMPNC(ecMul_find_MSB_k)


ecMul_loop:
        ; block costs:
        ;       no_last: [steps: 304-336, bin: 32-34, arith: 40]
        ;       last:    [steps: 1]

        RCX - 1 => RCX    :JMPZ(ecMul_correct)

        ; We always double
        $ => A  :MLOAD(ecMul_Q_x)
        $ => B  :MLOAD(ecMul_Q_y)
        A       :MSTORE(ecAdd_P1_x)
        B       :MSTORE(ecAdd_P1_y)
        A       :MSTORE(ecAdd_P2_x)
        B       :MSTORE(ecAdd_P2_y), CALL(ecAdd)
        ; Q = Q + Q

        $ => A  :MLOAD(ecAdd_P3_x)
        $ => B  :MLOAD(ecAdd_P3_y)
        A       :MSTORE(ecMul_Q_x)
        B       :MSTORE(ecMul_Q_y)

        ; We check if the MSB b of k is either 1 or 0. If b==1, we should add P to Q.
        ; Then, update the value of k.
        $ => A,B        :MLOAD(ecMul_k)
        ; E = 2A
        $ => E          :ADD, MSTORE(ecMul_k), JMPNC(ecMul_loop)

ecMul_add:
        ; block costs: [steps: 277-310, bin: 29-31, arith: 36]

        ; We add
        $ => A  :MLOAD(ecMul_Q_x)
        $ => B  :MLOAD(ecMul_Q_y)
        $ => C  :MLOAD(ecMul_P_x)
        $ => D  :MLOAD(ecMul_P_y)
        A       :MSTORE(ecAdd_P1_x)
        B       :MSTORE(ecAdd_P1_y)
        C       :MSTORE(ecAdd_P2_x)
        D       :MSTORE(ecAdd_P2_y), CALL(ecAdd)
        ; Q = Q + P

        $ => A  :MLOAD(ecAdd_P3_x)
        $ => B  :MLOAD(ecAdd_P3_y)
        A       :MSTORE(ecMul_Q_x)
        B       :MSTORE(ecMul_Q_y), JMP(ecMul_loop)


; ERRORS
ecMul_Px_too_big:
        1 => B      :JMP(ecMul_error)

ecMul_Py_too_big:
        2 => B      :JMP(ecMul_error)

ecMul_P_is_not_in_E:
        3 => B      :JMP(ecMul_error)

ecMul_correct:
        0 => B      :JMP(ecMul_end)

ecMul_error:
        0 => A

ecMul_end:
        $ => RR         :MLOAD(ecMul_RR)
                        :RETURN