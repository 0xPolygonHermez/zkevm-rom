;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: The resulting coordinates are in the range [0,BN254_P) because if falls back to FP arithmetic
;;
;; ecMul:
;;             in: k, P = (P.x, P.y) ∈ E(Fp), where k ∈ [0,r-1]
;;             out: k·P = (Q.x, Q.y) ∈ E(Fp)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; TODO: GLV method
; TODO: We could use pseudo-binary encoding {-1,0,1} to speed up the computation of k·P

; Since the curve is E/Fp: y² = x³ + 3, there is no issue in representing the point at infinity as (0, 0).

VAR GLOBAL ecMul_k
VAR GLOBAL ecMul_P_x
VAR GLOBAL ecMul_P_y
VAR GLOBAL ecMul_Q_x
VAR GLOBAL ecMul_Q_y

VAR GLOBAL ecMul_acummulator

VAR GLOBAL ecMul_RR

; ERROR CODES (B)
; 0 - no error
; 1 - P_x is too big
; 2 - P_y is too big
; 3 - P is not in E(Fp)

ecMul:
        RR      :MSTORE(ecMul_RR)

        ; Check whether the point coordinates are in the range [0, BN254_P)
        %BN254_P_MINUS_ONE => A
        $ => B      :MLOAD(ecMul_P_x)
        $           :LT, JMPC(ecMul_Px_too_big)
        $ => B      :MLOAD(ecMul_P_y)
        $           :LT, JMPC(ecMul_Py_too_big)

        ; Is P = 𝒪?
        0n => B
        $ => A  :MLOAD(ecMul_P_x)
        $       :EQ, JMPNC(__ecMul_P_continue)
        $ => A  :MLOAD(ecMul_P_y)
        $       :EQ, JMPC(ecMul_P_is_zero)
                __ecMul_P_continue:
        ; P is not 𝒪 from here

        ; 1] Check if P ∈ E(Fp)
        ; P in E iff (P.y)² == (P.x)³ + 3 (mod p)
        ; 1.1] Compute LHS and RHS
        $ => A    :MLOAD(ecMul_P_x), CALL(squareFpBN254)
        ; B = (P.x)²

        $ => A      :MLOAD(ecMul_P_x), CALL(mulFpBN254)
        ; C = (P.x)³

        %BN254_E_B => A     :CALL(addFpBN254)
        ; C = (P.x)³ + 3
        C           :MSTORE(ecMul_Q_x)

        $ => A    :MLOAD(ecMul_P_y), CALL(squareFpBN254)
        ; B = (Py)²

        ; 1.2] Check if LHS == RHS
        B => A
        $ => B      :MLOAD(ecMul_Q_x)
        $           :EQ, JMPNC(ecMul_P_is_not_in_E)
        ; P ∈ E(Fp) from here

        ; Is k ∈ [0,r-1]?
        $ => B      :MLOAD(ecMul_k), CALL(reduceFrBN254)
        A           :MSTORE(ecMul_k)
        0n => B
        $           :EQ, JMPC(ecMul_k_is_zero)
        ; k ∈ [1,r-1] from here

        $${uintToBin(mem.ecMul_k)}                      ; convert k to binary
        $0{receiveLenK()} => RCX,E                      ; receive the length of the binary representation of k

        ; start the acummulator with the MSB of k
        0 => A  :CALL(@bitwiseReconstruction + E)
        A       :MSTORE(ecMul_acummulator)

        $ => A  :MLOAD(ecMul_P_x)
        $ => C  :MLOAD(ecMul_P_y)
        A       :MSTORE(ecMul_Q_x)
        C       :MSTORE(ecMul_Q_y), JMP(ecMul_loop)

; Begin of branching
ecMul_P_is_zero:
        ; Q = 𝒪
        0n      :MSTORE(ecMul_Q_x)
        0n      :MSTORE(ecMul_Q_y), JMP(ecMul_correct)

ecMul_k_is_zero:
        ; Q = 𝒪
        0n      :MSTORE(ecMul_Q_x)
        0n      :MSTORE(ecMul_Q_y), JMP(ecMul_correct)
; End of branching

ecMul_loop:
        RCX - 1 => RCX    :JMPN(ecMul_check)

        ; We always double
        $ => A  :MLOAD(ecMul_Q_x)
        $ => B  :MLOAD(ecMul_Q_y)
        A       :MSTORE(doublePointBN254_P_x)
        B       :MSTORE(doublePointBN254_P_y), CALL(doublePointBN254)
        $ => A  :MLOAD(doublePointBN254_Q_x)
        $ => B  :MLOAD(doublePointBN254_Q_y)
        A       :MSTORE(ecMul_Q_x)
        B       :MSTORE(ecMul_Q_y)
        ; Q = Q + Q

        ; Receive the next MSB b of k. If b == 1, we should add P to Q, otherwise start the next iteration
        $0{receiveNextBitK()}           :JMPZ(ecMul_loop)

ecMul_add:
        ; We add
        $ => A  :MLOAD(ecMul_Q_x)
        $ => B  :MLOAD(ecMul_Q_y)
        $ => C  :MLOAD(ecMul_P_x)
        $ => D  :MLOAD(ecMul_P_y)
        A       :MSTORE(ecAdd_P1_x)
        B       :MSTORE(ecAdd_P1_y)
        C       :MSTORE(ecAdd_P2_x)
        D       :MSTORE(ecAdd_P2_y)
        1       :MSTORE(ecAdd_diff), CALL(ecAdd)
        $ => A  :MLOAD(ecAdd_P3_x)
        $ => B  :MLOAD(ecAdd_P3_y)
        A       :MSTORE(ecMul_Q_x)
        B       :MSTORE(ecMul_Q_y)
        ; Q = Q + P

        $ => A          :MLOAD(ecMul_acummulator)
        RCX => E
                        :CALL(@bitwiseReconstruction + E)
        A               :MSTORE(ecMul_acummulator), JMP(ecMul_loop)

; ERRORS
ecMul_Px_too_big:
        1 => B      :JMP(ecMul_error)

ecMul_Py_too_big:
        2 => B      :JMP(ecMul_error)

ecMul_P_is_not_in_E:
        3 => B      :JMP(ecMul_error)

ecMul_check:
        $ => A      :MLOAD(ecMul_k)
        $ => B      :MLOAD(ecMul_acummulator)
        1           :EQ

ecMul_correct:
        0 => B      :JMP(ecMul_end)

ecMul_error:
        0 => A

ecMul_end:
        $ => RR         :MLOAD(ecMul_RR)
                        :RETURN