;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; invFpBN254:
;;             in: A ∈ Fp
;;             out: B = A⁻¹ (mod BN254_P) ∈ Fp
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL invFpBN254_tmp
VAR GLOBAL invFpBN254_RR

invFpBN254:
        RR              :MSTORE(invFpBN254_RR)

        ; If A >= BN254_P, then normalize so that A ∈ [0,BN254_P)
        %BN254_P => B
        $       :LT, JMPC(invFpBN254_iz_zero)
                :CALL(reduceFpBN254)

invFpBN254_iz_zero:
        ; Check if A = 0
        A   :JMPZ(invFpBN254_A_is_zero)

invFpBN254_normalized:
        ; 1] Compute and check the inverse over Z
        ; A·B + [0] = [D]·2²⁵⁶ + [E]
        0 => C
        ${var _invFpBN254_A = fpBN254inv(A)} => B :MSTORE(invFpBN254_tmp);
        $${var _invFpBN254_AB = A * _invFpBN254_A}
        ${_invFpBN254_AB >> 256} => D
        ${_invFpBN254_AB} => E :ARITH

        ; 2] Check it over Fp, that is, it must be satisfied that:
        ; [BN254_P]·[A·A⁻¹] + [1] = D·2²⁵⁶ + E
        %BN254_P => A
        ${_invFpBN254_AB / const.BN254_P} => B        ; quotient  (256 bits)
        1n => C                                       ; residue (1 bit)

        E :ARITH

        $ => RR         :MLOAD(invFpBN254_RR)
        $ => B          :MLOAD(invFpBN254_tmp), JMP(invFpBN254_end)

invFpBN254_A_is_zero:
        0 => B

invFpBN254_end:
        $ => RR         :MLOAD(invFpBN254_RR)
                        :RETURN