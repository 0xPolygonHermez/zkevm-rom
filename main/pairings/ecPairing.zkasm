;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ecPairing:
;;          input: P1,...,Pn ∈ G1 and Q1,...,Qn ∈ G2, where G1 = E(Fp)[r] = E(Fp), G2 = E'(Fp2)[r] and
;;                 the curves are E/Fp: y² = x³ + 3 and E'/Fp2: y² = x³ + 3/(9+u)
;;          output: 1 if e(P1,Q1)·...·e(Pn,Qn) = 1, 0 otherwise; where e: G1 x G2 -> GT is 
;;                      the optimal Ate pairing over the BN254 curve and GT = mu_r (the r-th roots of unity over (Fp12)^*)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The point at infinity is represented by (0,0).

; TODO: The input should be a multiple of 6
; TODO: edge-case, if there are no inputs, then it simply returns 1

VAR GLOBAL ecPairing_P1_x
VAR GLOBAL ecPairing_P1_y
VAR GLOBAL ecPairing_Q1_x1
VAR GLOBAL ecPairing_Q1_x2
VAR GLOBAL ecPairing_Q1_y1
VAR GLOBAL ecPairing_Q1_y2

VAR GLOBAL ecPairing_P1Q1_f11_x
VAR GLOBAL ecPairing_P1Q1_f11_y
VAR GLOBAL ecPairing_P1Q1_f12_x
VAR GLOBAL ecPairing_P1Q1_f12_y
VAR GLOBAL ecPairing_P1Q1_f13_x
VAR GLOBAL ecPairing_P1Q1_f13_y
VAR GLOBAL ecPairing_P1Q1_f21_x
VAR GLOBAL ecPairing_P1Q1_f21_y
VAR GLOBAL ecPairing_P1Q1_f22_x
VAR GLOBAL ecPairing_P1Q1_f22_y
VAR GLOBAL ecPairing_P1Q1_f23_x
VAR GLOBAL ecPairing_P1Q1_f23_y

VAR GLOBAL ecPairing_mul_f11_x
VAR GLOBAL ecPairing_mul_f11_y
VAR GLOBAL ecPairing_mul_f12_x
VAR GLOBAL ecPairing_mul_f12_y
VAR GLOBAL ecPairing_mul_f13_x
VAR GLOBAL ecPairing_mul_f13_y
VAR GLOBAL ecPairing_mul_f21_x
VAR GLOBAL ecPairing_mul_f21_y
VAR GLOBAL ecPairing_mul_f22_x
VAR GLOBAL ecPairing_mul_f22_y
VAR GLOBAL ecPairing_mul_f23_x
VAR GLOBAL ecPairing_mul_f23_y

VAR GLOBAL ecPairing_result

VAR GLOBAL ecPairing_RR

; ERROR CODES (B)
; 0 - no error
; 1 - Error found in some input

ecPairing:
        RR              :MSTORE(ecPairing_RR)

        ; TODO: handle the case of either Pi or Qi are not in the curve

ecPairing_P1Q1:
        $ => A          :MLOAD(ecPairing_P1_x)
        $ => B          :MLOAD(ecPairing_P1_y)
        A               :MSTORE(halfPairingBN254_P_x)
        B               :MSTORE(halfPairingBN254_P_y)
        $ => A          :MLOAD(ecPairing_Q1_x1)
        $ => B          :MLOAD(ecPairing_Q1_x2)
        $ => C          :MLOAD(ecPairing_Q1_y1)
        $ => D          :MLOAD(ecPairing_Q1_y2)
        A               :MSTORE(halfPairingBN254_Q_x1)
        B               :MSTORE(halfPairingBN254_Q_x2)
        C               :MSTORE(halfPairingBN254_Q_y1)
        D               :MSTORE(halfPairingBN254_Q_y2)
                        :CALL(halfPairingBN254)

        ; Check if the error code (B) of halfPairingBN254 is not 0, meaning there is an error in some of the inputs
        B   :JMPNZ(ecPairing_input_error)

        $ => A          :MLOAD(halfPairingBN254_f11_x)
        $ => B          :MLOAD(halfPairingBN254_f11_y)
        $ => C          :MLOAD(halfPairingBN254_f12_x)
        $ => D          :MLOAD(halfPairingBN254_f12_y)
        A               :MSTORE(ecPairing_P1Q1_f11_x)
        B               :MSTORE(ecPairing_P1Q1_f11_y)
        C               :MSTORE(ecPairing_P1Q1_f12_x)
        D               :MSTORE(ecPairing_P1Q1_f12_y)
        $ => A          :MLOAD(halfPairingBN254_f13_x)
        $ => B          :MLOAD(halfPairingBN254_f13_y)
        $ => C          :MLOAD(halfPairingBN254_f21_x)
        $ => D          :MLOAD(halfPairingBN254_f21_y)
        A               :MSTORE(ecPairing_P1Q1_f13_x)
        B               :MSTORE(ecPairing_P1Q1_f13_y)
        C               :MSTORE(ecPairing_P1Q1_f21_x)
        D               :MSTORE(ecPairing_P1Q1_f21_y)
        $ => A          :MLOAD(halfPairingBN254_f22_x)
        $ => B          :MLOAD(halfPairingBN254_f22_y)
        $ => C          :MLOAD(halfPairingBN254_f23_x)
        $ => D          :MLOAD(halfPairingBN254_f23_y)
        A               :MSTORE(ecPairing_P1Q1_f22_x)
        B               :MSTORE(ecPairing_P1Q1_f22_y)
        C               :MSTORE(ecPairing_P1Q1_f23_x)
        D               :MSTORE(ecPairing_P1Q1_f23_y)

ecPairing_mul:
        $ => A          :MLOAD(ecPairing_P1Q1_f11_x)
        $ => B          :MLOAD(ecPairing_P1Q1_f11_y)
        $ => C          :MLOAD(ecPairing_P1Q1_f12_x)
        $ => D          :MLOAD(ecPairing_P1Q1_f12_y)
        A               :MSTORE(ecPairing_mul_f11_x)
        B               :MSTORE(ecPairing_mul_f11_y)
        C               :MSTORE(ecPairing_mul_f12_x)
        D               :MSTORE(ecPairing_mul_f12_y)
        $ => A          :MLOAD(ecPairing_P1Q1_f13_x)
        $ => B          :MLOAD(ecPairing_P1Q1_f13_y)
        $ => C          :MLOAD(ecPairing_P1Q1_f21_x)
        $ => D          :MLOAD(ecPairing_P1Q1_f21_y)
        A               :MSTORE(ecPairing_mul_f13_x)
        B               :MSTORE(ecPairing_mul_f13_y)
        C               :MSTORE(ecPairing_mul_f21_x)
        D               :MSTORE(ecPairing_mul_f21_y)
        $ => A          :MLOAD(ecPairing_P1Q1_f22_x)
        $ => B          :MLOAD(ecPairing_P1Q1_f22_y)
        $ => C          :MLOAD(ecPairing_P1Q1_f23_x)
        $ => D          :MLOAD(ecPairing_P1Q1_f23_y)
        A               :MSTORE(ecPairing_mul_f22_x)
        B               :MSTORE(ecPairing_mul_f22_y)
        C               :MSTORE(ecPairing_mul_f23_x)
        D               :MSTORE(ecPairing_mul_f23_y)

ecPairing_final_exponentiation:
        $ => A          :MLOAD(ecPairing_mul_f11_x)
        $ => B          :MLOAD(ecPairing_mul_f11_y)
        $ => C          :MLOAD(ecPairing_mul_f12_x)
        $ => D          :MLOAD(ecPairing_mul_f12_y)
        A               :MSTORE(finalExpBN254_f11_x)
        B               :MSTORE(finalExpBN254_f11_y)
        C               :MSTORE(finalExpBN254_f12_x)
        D               :MSTORE(finalExpBN254_f12_y)
        $ => A          :MLOAD(ecPairing_mul_f13_x)
        $ => B          :MLOAD(ecPairing_mul_f13_y)
        $ => C          :MLOAD(ecPairing_mul_f21_x)
        $ => D          :MLOAD(ecPairing_mul_f21_y)
        A               :MSTORE(finalExpBN254_f13_x)
        B               :MSTORE(finalExpBN254_f13_y)
        C               :MSTORE(finalExpBN254_f21_x)
        D               :MSTORE(finalExpBN254_f21_y)
        $ => A          :MLOAD(ecPairing_mul_f22_x)
        $ => B          :MLOAD(ecPairing_mul_f22_y)
        $ => C          :MLOAD(ecPairing_mul_f23_x)
        $ => D          :MLOAD(ecPairing_mul_f23_y)
        A               :MSTORE(finalExpBN254_f22_x)
        B               :MSTORE(finalExpBN254_f22_y)
        C               :MSTORE(finalExpBN254_f23_x)
        D               :MSTORE(finalExpBN254_f23_y)
                        :CALL(finalExpBN254)

        ; Check whether the result is 1 or not
        ${Fp2BN254neq1(mem.finalExpBN254_f11_x) || Fp2BN254neq0(mem.finalExpBN254_f11_y) || Fp2BN254neq0(mem.finalExpBN254_f12_x) || Fp2BN254neq0(mem.finalExpBN254_f12_y || Fp2BN254neq0(mem.finalExpBN254_f13_x) || Fp2BN254neq0(mem.finalExpBN254_f13_y) || Fp2BN254neq0(mem.finalExpBN254_f21_x) || Fp2BN254neq0(mem.finalExpBN254_f21_y) || mem.finalExpBN254_f22_x) || Fp2BN254neq0(mem.finalExpBN254_f22_y) || Fp2BN254neq0(mem.finalExpBN254_f23_x) || Fp2BN254neq0(mem.finalExpBN254_f23_y)}   :JMPZ(ecPairing_equation_is_satisfied)


        0               :MSTORE(ecPairing_result)
        0 => B          :JMP(ecPairing_end)

ecPairing_equation_is_satisfied:
        ; Check that a = 1
        $ => A          :MLOAD(finalExpBN254_f11_x)
        1n => B
        1               :EQ
        0n => B
        $ => A          :MLOAD(finalExpBN254_f11_y)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f12_x)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f12_y)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f13_x)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f13_y)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f21_x)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f21_y)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f22_x)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f22_y)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f23_x)
        1               :EQ
        $ => A          :MLOAD(finalExpBN254_f23_y)
        1               :EQ

        1               :MSTORE(ecPairing_result)

        0 => B          :JMP(ecPairing_end)

; ERRORS
ecPairing_input_error:
; TODO: Should I check whether B != 0?
    1 => B              :JMP(ecPairing_error)

ecPairing_error:
        0 => A

ecPairing_end:
        $ => RR         :MLOAD(ecPairing_RR)
                        :RETURN

INCLUDE "halfPairingBN254.zkasm"
INCLUDE "finalExpBN254.zkasm"