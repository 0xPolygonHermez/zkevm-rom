INCLUDE "map-opcodes.zkasm"
INCLUDE "precompiled/selector.zkasm"
INCLUDE "ecrecover/ecrecover.zkasm"

processTx:
        ; Get sigDataSize (VAR CTX)
        $ => HASHPOS                    :MLOAD(sigDataSize)
        ; We get a new hashId
        $ => E                          :MLOAD(lastTxHashId)
        E+1 => E                        :MSTORE(lastTxHashId)

;;;;;;;;;
;; Signaure Verification
;;;;;;;;;

        ; Check the signature
        $ => A                          :MLOAD(lastHashKIdUsed)
        A + 1                           :MSTORE(lastHashKIdUsed)
        A + 1                           :MSTORE(ecrecover_lastHashIdUsed)
        $ => A                          :HASHKDIGEST(E)
        $ => B                          :MLOAD(txR)
        $ => C                          :MLOAD(txS)
        $ => D                          :MLOAD(txV)
                                        :CALL(ecrecover)
        ; Check result is non-zero
        0 => B
        $                               :EQ,JMPC(invalidTx)
        A                               :MSTORE(txSrcAddr)
        A                               :MSTORE(txSrcOriginAddr)
        ${eventLog(onProcessTx)}
;;;;;;;;;
;; Store init state
;;;;;;;;;

        SR                              :MSTORE(originSR)
        SR                              :MSTORE(initSR)

;;;;;;;;
; Check chainID --> //TODO: chainID is defined as 64 bits which does not fit in the Field. If we consider just 63 bits it could be done directly (A - B), saving the EQ comparison
;;;;;;;;
        $ => A                          :MLOAD(txChainId)                                       ; A: chainId tx
        %ZKEVM_CHAINID => B                                                               ; B: defaultChainId, A: chainId tx
        $                               :EQ,JMPC(endCheckChainId)                               ; If A == B --> endCheckChainId
                                        :JMP(invalidTx)                                         ; If A != B --> invalidTx
endCheckChainId:

; //TODO: move touchedAddress after intrinsic checks
;;;;;;;;
; Touched Addresses
;;;;;;;;
        $ => A                          :MLOAD(txSrcOriginAddr)
        ${resetTouchedAddress()}
        ${resetStorageSlots()}
        ${touchedAddress(A)}

;;;;;;;;
; Check and update Nonce --> //TODO: same as chainID
;;;;;;;;

        $ => A, E                       :MLOAD(txSrcOriginAddr)                                 ; Address of the origin to A and E
        %SMT_KEY_NONCE => B
        0 => C                                                                                  ; 3rd parameter does not apply to nonce
        $ => A                          :SLOAD                                                  ; Load the nonce to A and C from storage
        $ => B                          :MLOAD(txNonce)
        $ => C                          :EQ
        C - 1                           :JMPN(invalidTx)                                        ; Compare "nonce storage" (A) and "nonce tx" (B). If A != B --> invalidTx
        B                               :ASSERT                                                 ; sanity check
        A+1 => D                                                                                ; Set to A the current address
        E => A
        %SMT_KEY_NONCE => B
        0 => C
        $ => SR                         :SSTORE                                                 ; Store the nonce plus one

;;;;;;;;
; Intrinsic gas and upfront cost checks
;;;;;;;;

        $ => B                          :MLOAD(txGasLimit)                   ; Multiplies the txGasLimit (gas limit) amd the txGasPrice
        ; Check batch gas limit is not exceeded by transaction
        %BATCH_GAS_LIMIT => A
        $                               :LT,JMPC(invalidTx)


        ; CHECK INTRINSIC GAS
        ; gas Limit >= 21k + calldata cost + deployment cost
        ; Store intrinsic gas at E (21k)
        21000 => E
        $ => A                          :MLOAD(isCreateContract)
        -A                              :JMPN(addDeploymentGasCost)
                                        :JMP(getCalldataGasCost)
addDeploymentGasCost:
        ; Add 32k if tx is a create
        E + 32000 => E

getCalldataGasCost:
        $ => A                          :MLOAD(txCalldataLen)
        0 => B
        $                               :EQ,JMPC(endCalldataIntrinsicGas)

addGas:
        $ => HASHPOS                    :MLOAD(dataStarts)
        0 => C
                                        :JMP(loopBytes)
loopBytes:
        ; Mul operation with Arith
        A - C - 1                       :JMPN(endCalldataIntrinsicGas)
        E => B
        HASHPOS => D
        1 => D
        $ => E                          :MLOAD(batchHashDataId)
        $ => D                          :HASHK(E)
        B => E
        C + 1 => C
        D - 1                           :JMPN(add4Gas)
                                        :JMP(add16Gas)

add4Gas:
        E + 4 => E
                                        :JMP(loopBytes)

add16Gas:
        E + 16 => E
                                        :JMP(loopBytes)
endCalldataIntrinsicGas:
        ; Compare gas limit >= intrinsic gas
        $ => A                          :MLOAD(txGasLimit)
        E => B
        $                               :LT, JMPC(invalidTx)
        ; Store calculated gas for later usage
        E                               :MSTORE(gasCalldata)

        ;CHECK UPFRONT COST
        ; Get gas Price(B) * gas limit(A)
        $ => B                          :MLOAD(txGasPrice)
        ; Mul operation with Arith
        A                               :MSTORE(arithA)
        B                               :MSTORE(arithB)
                                        :CALL(mulARITH)
        ; gas Price * gas limit in D
        $ => D                          :MLOAD(arithRes1)
        ; Get caller balance
        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                                                        ; balance key smt
        ; Caller Balance in C
        $ => C                          :SLOAD
        $ => B                          :MLOAD(txValue)
        D                               :MSTORE(arithA)
        B                               :MSTORE(arithB)
                                        :CALL(addARITH)
        ; gas price * gas limit + value in B
        $ => B                          :MLOAD(arithRes1)
        ; Caller balance in A
        C => A
        ; Check Balance >= gas price * gas limit + value -> upfront cost
        $                               :LT,JMPC(invalidTx)


        ; Substract gas Price * gas limit (D) from caller balance (A)
        C                               :MSTORE(arithA)
        D                               :MSTORE(arithB)
                                        :CALL(subARITH)
        ; Substracted balance result in D
        $ => D                          :MLOAD(arithRes1)
        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C
        $ => SR                         :SSTORE

        ; TODO: create, do not have value
        SR                              :MSTORE(initSR)

        ; Substract intrinsic gas
        $ => GAS                        :MLOAD(txGasLimit)
        $ => A                          :MLOAD(gasCalldata)
        GAS - A => GAS

txType:
;;;;;;;;;;
;;;;; Tx type
;;;;;;;;;;

        $ => A                          :MLOAD(isCreateContract)
        0 - A                           :JMPN(getContractAddress)
        $ => A                          :MLOAD(txDestAddr)
        ${touchedAddress(A)}
        ; Check if is zero address, zero address is not precompiled
        0 => B
        $                               :EQ, JMPC(callContract)
        10 => B
        $                               :LT,JMPC(selectorPrecompiled) ; precompiled smart contracts
                                        :JMP(callContract)

getContractAddress:
        ; A new hash with position 0 is started
        0 => HASHPOS
        ; We get a new hashId
        $ => E                          :MLOAD(lastHashKIdUsed)
        E+1 => E                        :MSTORE(lastHashKIdUsed)
        $ => A                          :MLOAD(isCreate2)
        0 - A                           :JMPN(create2)
        $ => A                          :MLOAD(txSrcAddr)
        $ => B                          :MLOAD(txNonce)
        B - 0x80                        :JMPN(nonce1byte)
        $ => C                          :MLOAD(lengthNonce)
        1 => D
        0xc0 + 22 + C                   :HASHK(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHK(E)
        20 => D
        A                               :HASHK(E)
        1 => D
        0x80 + C                        :HASHK(E)
        C => D
        B                               :HASHK(E)
                                        :JMP(endContractAddress)

nonce1byte:
        1 => D
        0xc0 + 22                       :HASHK(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHK(E)
        20 => D
        A                               :HASHK(E)
        1 => D
        B - 1                           :JMPN(nonceIs0)
        B                               :HASHK(E)
                                        :JMP(endContractAddress)

nonceIs0:
        0x80                            :HASHK(E)

endContractAddress:
        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)
        12 => D
                                        :CALL(SHLarith)
                                        :CALL(SHRarith)
        A                               :MSTORE(createContractAddress)
        A                               :MSTORE(txDestAddr)
        A                               :MSTORE(storageAddr)
        ; TODO: Check nonce != 0 OR already_bytecode ==> same behaviour as fail constructor
        ; TODO: check CREATE or deployment with constructor reverted
                                        :JMP(deploy)

create2:
        $ => C                          :MLOAD(txCalldataLen)
        ${(C+31)/32} => A
        ; Div operation with Arith
        ${C+31}                         :MSTORE(arithA)
        32                              :MSTORE(arithB)
                                        :CALL(divARITH)
        $ => A                          :MLOAD(arithRes1)

        GAS - 6*A => GAS                :JMPN(outOfGas)
        $ => CTX                        :MLOAD(originCTX)
        $ => B                          :MLOAD(argsOffsetCall)

loopCreate2:
        C - 1                           :JMPN(create2end)
        C - 32                          :JMPN(endloopCreate2)
        B => E
                                        :CALL(MLOAD32)
        E => B
        32 => D
        $ => E                          :MLOAD(lastHashKIdUsed)
        A                               :HASHK(E)
        C - 32 => C
                                        :JMP(loopCreate2)

endloopCreate2:
        B => E
                                        :CALL(MLOADX)
        32 - C => D
                                        :CALL(SHRarith)
        C => D
        $ => E                          :MLOAD(lastHashKIdUsed)
        A                               :HASHK(E)

create2end:
        $ => CTX                        :MLOAD(currentCTX)
        HASHPOS                         :HASHKLEN(E)
        $ => C                          :HASHKDIGEST(E)
        ; A new hash with position 0 is started
        0 => HASHPOS
        $ => E                          :MLOAD(lastHashKIdUsed)
        E+1 => E                        :MSTORE(lastHashKIdUsed)
        ;keccak256( 0xff ++ address ++ salt ++ keccak256(init_code))[12:]
        1 => D
        0xff                            :HASHK(E)
        20 => D
        $ => A                          :MLOAD(txSrcAddr)
        A                               :HASHK(E)
        $ => B                          :MLOAD(salt)
        32 => D
        B                               :HASHK(E)
        32 => D
        C                               :HASHK(E)
        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)
        12 => D
                                        :CALL(SHLarith)
                                        :CALL(SHRarith)
        A                               :MSTORE(createContractAddress)
        A                               :MSTORE(txDestAddr)
        A                               :MSTORE(storageAddr)

deploy:
        ${touchedAddress(A)}
        A => E
                                       :CALL(isEmptyAccount)
        E - 1                          :JMPN(handleError)
        ; set contract nonce to 1
        0 => C
        1 => D
        %SMT_KEY_NONCE => B
        $ => SR                         :SSTORE
        ; Move balances if value > 0 just before creating contract (deploy)
        $ => B                          :MLOAD(txValue)
        0 => A
        zkPC+2 => RR
        $                               :LT, JMPC(moveBalances)
        0 => PC
        0 => SP
                                        :JMP(readCode)

readDeployBytecode:
        1 => A
        $ => B                          :MLOAD(isCreate)
        $                               :EQ,JMPC(readDeployBytecodeCreate)
        $ => B                          :MLOAD(txCalldataLen)
        B - PC - 1                      :JMPN(defaultOpCode) 
        $ => HASHPOS                    :MLOAD(dataStarts)
        HASHPOS + PC => HASHPOS
        $ => E                          :MLOAD(batchHashDataId)
        1 => D
        $ => RR                         :HASHK(E)
        ${eventLog(onOpcode(RR))}
        PC + 1 => PC
                                        :JMP(@mapping_opcodes + RR)
readDeployBytecodeCreate:
        $ => CTX                        :MLOAD(originCTX)
        $ => E                          :MLOAD(argsLengthCall)
        E - PC - 1                      :JMPN(readDeployBytecodeCreateDefault) 
        
        $ => E                          :MLOAD(argsOffsetCall)
        E + PC => E
        1 => C
                                        :CALL(MLOADX)
        $ => CTX                        :MLOAD(currentCTX)
        31 => D
                                        :CALL(SHRarith)
        A => RR
        ${eventLog(onOpcode(RR))}
        PC + 1 => PC
                                        :JMP(@mapping_opcodes + RR)

readDeployBytecodeCreateDefault:
        $ => CTX                        :MLOAD(currentCTX)
                                        :JMP(defaultOpCode)

callContract:
        ; Move balances if value > 0 just before executing the contract CALL
        $ => B                          :MLOAD(txValue)
        0 => A
        zkPC+2 => RR
        $                               :LT, JMPC(moveBalances)
        0 => PC
        0 => SP

        $ => A                          :MLOAD(txDestAddr)
        ; get contract length
        %SMT_KEY_SC_LENGTH => B
        0 => C
        $ => B                          :SLOAD
        B                               :MSTORE(bytecodeLength)
        0 => A
        $                               :EQ, JMPC(defaultOpCode) ;no bytecode

        $ => A                          :MLOAD(txDestAddr)
        ; get hash contract
        %SMT_KEY_SC_CODE => B
        $ => A                          :SLOAD
        A                               :MSTORE(hashContractTxDestAddr)
        0 => HASHPOS
        1 => D
        $ => B                          :MLOAD(bytecodeLength)

        ; get a new hashPId
        $ => E                          :MLOAD(nextHashPId)
        E                               :MSTORE(contractHashId)
        E+1                             :MSTORE(nextHashPId)

checkHashBytecodeLoop:
        B - 1 - HASHPOS                         :JMPN(checkHashBytecodeEnd) ; finish reading bytecode
        ${getBytecode(A, HASHPOS, 1)}           :HASHP(E)                   ; hash contract bytecode
                                                :JMP(checkHashBytecodeLoop)

checkHashBytecodeEnd:
        HASHPOS                         :HASHPLEN(E)
        $ => E                          :HASHPDIGEST(E)
        ; check hash computed matches hash in the smt leaf
        $ => A                          :MLOAD(hashContractTxDestAddr)
        E                               :ASSERT
                                        :JMP(readCode)

readByteCode:
        $ => E                          :MLOAD(contractHashId) ; hash index
        $ => A                          :MLOAD(txDestAddr)
        ; get contract length
        $ => B                          :MLOAD(bytecodeLength)
        B - PC - 1                      :JMPN(defaultOpCode) ; no bytecode treated as 0x00
        PC => HASHPOS
        1 => D
        $ => RR                         :HASHP(E)
        ${eventLog(onOpcode(RR))}
        PC + 1 => PC
                                        :JMP(@mapping_opcodes + RR)

readCode:
        $ => A                          :MLOAD(isCreateContract)
        0 - A                           :JMPN(readDeployBytecode)
                                        :JMP(readByteCode)

; only when first context ends on deploy
endDeploy:
        ; save offset memory and length to compute contract hash
        E                               :MSTORE(memOffsetLinearPoseidon)
        C                               :MSTORE(memSizeLinearPoseidon)
        ; set bytecode length
        $ => A                          :MLOAD(createContractAddress)
        %SMT_KEY_SC_LENGTH => B
        C => D  ; "endDeploy" is called from opRETURNDeploy which has: C --> length, E --> offset
        0 => C
        $ => SR         :SSTORE
        ; TODO: if txValue != 0 --> move balance to contractAddress. Probably missing moveBalances CALL.
        A                               :MSTORE(txDestAddr)
                                        :CALL(hashPoseidonLinearFromMemory)
        $ => A                          :MLOAD(createContractAddress)
        0 => C
        %SMT_KEY_SC_CODE => B
        $ => SR                         :SSTORE


handleGas:

;;;;;;;;
; Refund GAS
;;;;;;;;
        0 => A
        $ => B                          :MLOAD(gasRefund)
        B - 1                           :JMPN(refundGas)
        $ => A                          :MLOAD(txGasLimit)
        A - GAS => A
        ; Div operation with Arith
        A               :MSTORE(arithA)
        2               :MSTORE(arithB)
                        :CALL(divARITH)
        $ => A          :MLOAD(arithRes1)
        A - B                           :JMPN(refundGas)
        B => A

refundGas:
        GAS + A => GAS
        GAS => A
        $ => B                          :MLOAD(txGasPrice)
        ;Mul operation with Arith
        A               :MSTORE(arithA)
        B               :MSTORE(arithB)
                        :CALL(mulARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                                                                                ; balance key smt
        $ => A                          :SLOAD                                                  ; Original Balance in A

        ; Add operation with Arith
        A               :MSTORE(arithA)
        D               :MSTORE(arithB)
                        :CALL(addARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE

;;;;;;;;
; Send remaining gas to sequencer
;;;;;;;;
sendGasSeq:
        $ => A                          :MLOAD(txGasLimit)                                           ; Multiplies the txGasLimit amd the txGasPrice
        A - GAS => A                                                                            ; A = txGasLimit -GAS

        $ => B                          :MLOAD(txGasPrice)                                               ; value to pay the sequencer in D
        ; Mul operation with Arith
        A               :MSTORE(arithA)
        B               :MSTORE(arithB)
                        :CALL(mulARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A          :MLOAD(sequencerAddr)
        0 => B,C                                                                ; Balance key smt
        $ => A          :SLOAD                                                  ; Original Balance in A
        ; Add operation with Arith
        A               :MSTORE(arithA)
        D               :MSTORE(arithB)
                        :CALL(addARITH)
        $ => D          :MLOAD(arithRes1)
        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE
                                        :JMP(processTxEnd)


invalidTx:
        $ => SR                         :MLOAD(originSR)
                                        :JMP(processTxEnd)

defaultOpCode:
        ${eventLog(onOpcode(0))}
                                        :JMP(opSTOP) 