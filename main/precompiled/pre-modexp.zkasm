/**
 * @link [https://www.evm.codes/precompiled#0x05?fork=berlin]
 * @zk-counters
 *  - dynamic steps:
 *  - dynamic arith:
 *  - dynamic binary:
 * @process-precompiled
 *  - stack input: [x1, y1, x2, y2]
 *  - stack output: [x, y]
 * @note We work with unbounded and unsigned integers represented in (little-endian) chunks of 256 bits.
 * @note After a few discussions, we decided to set the maximum input length of the base, modulus and exponent to 32.
 *       See [https://github.com/0xPolygonHermez/zkevm-rom-internal/issues/43] for more details.
 */
INCLUDE "../modexp/constants.zkasm"

INCLUDE "../modexp/modexp.zkasm"
INCLUDE "../modexp/modexp_utils.zkasm"

INCLUDE "../modexp/array_lib/array_add_AGTB.zkasm"
INCLUDE "../modexp/array_lib/array_add_short.zkasm"
INCLUDE "../modexp/array_lib/array_mul_long.zkasm"
INCLUDE "../modexp/array_lib/array_mul_short.zkasm"
INCLUDE "../modexp/array_lib/array_square.zkasm"
INCLUDE "../modexp/array_lib/array_div_short.zkasm"
INCLUDE "../modexp/array_lib/array_div_long.zkasm"

VAR GLOBAL multiplication_complexity

VAR GLOBAL modexp_Bsize
VAR GLOBAL modexp_Esize
VAR GLOBAL modexp_Msize
VAR GLOBAL modexp_Mend
VAR GLOBAL modexp_offset
VAR GLOBAL modexp_returnIndex
VAR GLOBAL modexp_returnFirstIndex
VAR GLOBAL modexp_returnIndexRem
VAR GLOBAL expLenBits

funcModexp:

    %MAX_CNT_BINARY - CNT_BINARY - 20   :JMPN(outOfCountersBinary)
    %MAX_CNT_ARITH - CNT_ARITH - 2      :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 400         :JMPN(outOfCountersStep)

    ; Move balances if value > 0 just before executing the contract CALL
    $ => B                              :MLOAD(txValue)
    0 => A
    zkPC + 2 => RR
    $                                   :LT, JMPC(moveBalances)

    ; read data stored in calldata
    ; Bsize [32 bytes], Esize [32 bytes], Msize [32 bytes]
    ; Bsize [32 bytes]
    32                                  :MSTORE(readXFromCalldataLength)
    0 => E                              :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A                              :MLOAD(readXFromCalldataResult)
    A                                   :MSTORE(modexp_Bsize) ;Bsize = base size
    ; Esize [32 bytes]
    E + 32 => E                         :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A                              :MLOAD(readXFromCalldataResult)
    A                                   :MSTORE(modexp_Esize) ;Esize = exp size
    ; Msize [32 bytes]
    E + 32 => E                         :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A                              :MLOAD(readXFromCalldataResult)
    A                                   :MSTORE(modexp_Msize) ;Msize = mod size
    ; store offset modexp num values
    E + 32 => E
    E                                   :MSTORE(modexp_offset)
    ; get exp offset = 96 bytes (Bsize | Esize | Msize) + Bsize
    $ => A                              :MLOAD(modexp_Bsize)
    96 => B
    $ => A                              :ADD
    $ => B                              :MLOAD(txCalldataLen)
    ; expLenBits = bit length of first 32 bytes of exp
    0                                   :MSTORE(expLenBits)
    ; if 96 + Bsize (exp offset) < txCalldataLen --> setExpBits, else --> expLenBits = 0
    $                                   :LT, JMPC(setExpBits, setMaxLen)

setExpBits:
    ; E exp offset
    A => E
    $ => A,C                            :MLOAD(modexp_Esize)
    33 => B
    ; A, C = Esize
    ; if Esize <= 32 --> setExpBitsContinue
    $ => B                              :LT, JMPC(setExpBitsContinue)
    32 => C

setExpBitsContinue:
    ; read a length of bytes (C) from exp offset (E)
    C                                   :MSTORE(readXFromCalldataLength)
    E                                   :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A                              :MLOAD(readXFromCalldataResult)
    ; A = first 32 bytes of exp
    32 - C => D                         :CALL(SHRarith)
    A => B                              :CALL(getLenBits); A bits length first 32 bytes
    ; A = bit length of first 32 bytes of exp
    A                                   :JMPZ(setMaxLen)
    A - 1                               :MSTORE(expLenBits)

setMaxLen:
    ; set B with max length (max(Blen, Mlen))
    $ => B                              :MLOAD(modexp_Msize)
    $ => A                              :MLOAD(modexp_Bsize)
    $                                   :LT, JMPC(calculateGas)
    A => B

; B: max_length = max(Blen, Mlen)
calculateGas:

    %MAX_CNT_BINARY - CNT_BINARY - 10   :JMPN(outOfCountersBinary)
    %MAX_CNT_ARITH - CNT_ARITH - 2      :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 120         :JMPN(outOfCountersStep)

    B                                   :MSTORE(arithA)
    7                                   :MSTORE(arithB), CALL(addARITH)
    ; check arith overflow
    $                                   :MLOAD(addArithOverflow), JMPNZ(outOfGas)
    $ => B                              :MLOAD(arithRes1)
    B                                   :MSTORE(arithA)
    8                                   :MSTORE(arithB), CALL(divARITH)
    ; B: words = (max_length + 7) / 8
    $ => B                              :MLOAD(arithRes1)
    %MAX_GAS_WORD_MODEXP => A
    $                                   :LT, JMPC(outOfGas)
    ; A: multiplication_complexity = words**2
    B                                   :MSTORE(arithA)
    B                                   :MSTORE(arithB), CALL(mulARITH)
    $ => A                              :MLOAD(arithRes1)
    A                                   :MSTORE(multiplication_complexity), JMPZ(dynamicGas)

    $ => A                              :MLOAD(modexp_Esize)
    33 => B
    ; if Esize <= 32 --> modexp_expLT32
    $ => B                              :LT, JMPC(modexp_expLT32)
    ;elif Esize > 32: iteration_count = (8 * (Esize - 32)) + ((exponent & (2**256 - 1)).bit_length() - 1)
    A                                   :MSTORE(arithA)
    32                                  :MSTORE(arithB), CALL(subARITH)
    $ => A                              :MLOAD(arithRes1)
    A                                   :MSTORE(arithA)
    8                                   :MSTORE(arithB), CALL(mulARITH)
    ; check arith overflow
    $                                   :MLOAD(mulArithOverflowFlag), JMPNZ(outOfGas)
    ; A = 8 * (Esize - 32)
    $ => A                              :MLOAD(arithRes1)
    $ => B                              :MLOAD(expLenBits)
    ; iteration_count = (8 * (Esize - 32)) + ((exponent & (2**256 - 1)).bit_length() - 1)
    A                                   :MSTORE(arithA)
    B                                   :MSTORE(arithB), CALL(addARITH)
    ; check arith overflow
    $                                   :MLOAD(addArithOverflow), JMPNZ(outOfGas)
    $ => E                              :MLOAD(arithRes1), JMP(finalGas)
    ; E = iteration_count

modexp_expLT32:
    $ => E                              :MLOAD(expLenBits)

finalGas:
    E => B
    %MAX_GAS_IT_MODEXP => A
    $                                   :LT, JMPC(outOfGas)
    1 => A
    $                                   :LT, JMPC(dynamicGas)
    1 => E

dynamicGas:

    %MAX_CNT_BINARY - CNT_BINARY - 9   :JMPN(outOfCountersBinary)
    %MAX_CNT_ARITH - CNT_ARITH - 3     :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 55         :JMPN(outOfCountersStep)

    ; E = calculate_iteration_count = max(iteration_count, 1)
    $ => A                              :MLOAD(multiplication_complexity)
    A                                   :MSTORE(arithA)
    E                                   :MSTORE(arithB), CALL(mulARITH)
    ; check arith overflow
    $                                   :MLOAD(mulArithOverflowFlag), JMPNZ(outOfGas)
    ; A = multiplication_complexity * iteration_count
    $ => A                              :MLOAD(arithRes1)
    A                                   :MSTORE(arithA)
    3                                   :MSTORE(arithB), CALL(divARITH)
    ; A = multiplication_complexity * iteration_count / 3
    $ => A                              :MLOAD(arithRes1)
    %TX_GAS_LIMIT => B
    $                                   :LT, JMPNC(outOfGas)
    200 => B
    $                                   :LT, JMPC(lastChecks)
    A => B

lastChecks:
    B                                   :MSTORE(preGAS)
    ; B = max(200, multiplication_complexity * iteration_count / 3)
    GAS - B => GAS                      :JMPN(outOfGas)
    ; check first modulo size and base size to match ethereum specification
    0 => A
    $ => B                              :MLOAD(modexp_Msize)
    $                                   :EQ, JMPC(save0outMod0)  ; if Msize = 0 --> save0outMod0
    ; Msize > 0 from here
    $ => B                              :MLOAD(modexp_Bsize)
    $                                   :EQ, JMPC(save0out)      ; if Bsize = 0 --> save0out
    ; Bsize > 0 from here

    ; Check maximum length allowed in the zkEVM reagrding the modExp
    ; If parameters (length > %MAX_SIZE_MODEXP) --> zkEVM does a revert returning all the gas consumed
    %MAX_SIZE_MODEXP => A
    $ => B                              :MLOAD(modexp_Bsize)
    $                                   :LT, JMPC(preFailModExpLength) ; if Bsize > MAX_SIZE_MODEXP --> preFailModExpLength
    $ => B                              :MLOAD(modexp_Esize)
    $                                   :LT, JMPC(preFailModExpLength) ; if Esize > MAX_SIZE_MODEXP --> preFailModExpLength
    $ => B                              :MLOAD(modexp_Msize)
    $                                   :LT, JMPC(preFailModExpLength) ; if Msize > MAX_SIZE_MODEXP --> preFailModExpLength
    ; get base value
    $ => E                              :MLOAD(modexp_offset) ; This is used in modexp_getBase, modexp_getExp and modexp_getMod
    $ => C                              :MLOAD(modexp_Bsize)
                                        :CALL(modexp_getBase)
    ; get exp value
    $ => C                              :MLOAD(modexp_Esize)
                                        :CALL(modexp_getExp)
    ; get mod value
    $ => C                              :MLOAD(modexp_Msize)
                                        :CALL(modexp_getMod)
    1 => B
    ; if mod == 0 --> return 0
    $ => A                              :MLOAD(modexp_Mlen), JMPZ(save0out)
    ; if Mlen != 1 --> checkExpLen
    $                                   :EQ, JMPNC(checkExpLen)
    ; if Mlen == 1 && mod == 1 --> return 0
    $ => A                              :MLOAD(modexp_M)
    $                                   :EQ, JMPC(save0out)

checkExpLen:
    ; if exp == 0 --> return 1
    $ => A                              :MLOAD(modexp_Elen), JMPZ(save1out)

checkBaseLen:
    ; if base == 0 --> return 0
    $ => A                              :MLOAD(modexp_Blen), JMPZ(save0out)
    ; if Blen != 1 --> callMODEXP
    $                                   :EQ, JMPNC(callMODEXP)
    ; if Blen == 1 && base == 1 --> return 1
    $ => A                              :MLOAD(modexp_B)
    $                                   :EQ, JMPC(save1out)

callMODEXP:
                                        :CALL(modexp)
                                        :JMP(finalMODEXP)

save1out:
    1                                   :MSTORE(modexp_out), JMP(finalMODEXP)

save0out:
    $ => B                              :MLOAD(modexp_Msize)
    %MAX_SIZE_MODEXP => A
    $                                   :LT,JMPC(preFailModExpLength)
    0                                   :MSTORE(modexp_out), JMP(finalMODEXP)

save0outMod0:
    0                                   :MSTORE(modexp_out), JMP(preEndMODEXP)

finalMODEXP:
    %MAX_CNT_STEPS - STEP - 100         :JMPN(outOfCountersStep)

    ; write data into memory
    0 => B
    $ => C                              :MLOAD(modexp_Msize)
    C                                   :MSTORE(arithA)
    32                                  :MSTORE(arithB), CALL(divARITH)
    $ => E                              :MLOAD(arithRes1)
    E                                   :MSTORE(modexp_returnFirstIndex)
    $ => A                              :MLOAD(arithRes2)
    A                                   :MSTORE(modexp_returnIndexRem), JMPZ(memoryLoop)
    ; if Msize % 32 > 0, copy last bytes, else --> memoryLoop
    A => C
    $ => A                              :MLOAD(modexp_out+E)
    32 - C => D                         :CALL(SHLarith)
    A                                   :MSTORE(bytesToStore)
    B => E
                                        :CALL(MSTOREX) ; in: [bytesToStore, E: offset, C: length] out: [E: new offset]
    E => B
    $ => A                              :MLOAD(modexp_Msize)
    A - C => C                          :JMPZ(modexpReturn)
    $ => E                              :MLOAD(modexp_returnFirstIndex)

memoryLoop:

    %MAX_CNT_BINARY - CNT_BINARY - 2    :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 50          :JMPN(outOfCountersStep)

    E - 1 => E                          :MSTORE(modexp_returnIndex)
    $ => A                              :MLOAD(modexp_out+E)
    A                                   :MSTORE(bytesToStore)
    B => E
                                        :CALL(MSTORE32) ; in: [bytesToStore, E: offset] out: [E: new offset]
    E => B
    $ => E                              :MLOAD(modexp_returnIndex)
    C - 32 => C                         :JMPNZ(memoryLoop)

modexpReturn:
    %MAX_CNT_STEPS - STEP - 100         :JMPN(outOfCountersStep)

    ; prepare return data
    0                                   :MSTORE(retDataOffset)
    $ => C                              :MLOAD(modexp_Msize)
    C                                   :MSTORE(retDataLength)
    $ => B                              :MLOAD(retCallOffset)
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    ; set retDataCTX
    $ => E                              :MLOAD(currentCTX)
    A => CTX
    E                                   :MSTORE(retDataCTX)

    $ => E                              :MLOAD(modexp_returnFirstIndex)
    $ => A                              :MLOAD(modexp_returnIndexRem), JMPZ(returnLoop)
    A => C
    $ => A                              :MLOAD(modexp_out+E)
    32 - C => D                         :CALL(SHLarith)
    A                                   :MSTORE(bytesToStore)
    B => E
                                        :CALL(MSTOREX) ; in: [bytesToStore, E: offset, C: length] out: [E: new offset]
    E => B
    $ => A                              :MLOAD(modexp_Msize)
    A - C => C                          :JMPZ(endMODEXP)
    $ => E                              :MLOAD(modexp_returnFirstIndex)

returnLoop:
    %MAX_CNT_BINARY - CNT_BINARY - 2    :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 50          :JMPN(outOfCountersStep)

    E - 1 => E                          :MSTORE(modexp_returnIndex)
    $ => A                              :MLOAD(modexp_out+E)
    A                                   :MSTORE(bytesToStore)
    B => E
                                        :CALL(MSTORE32) ; in: [bytesToStore, E: offset] out: [E: new offset]
    E => B
    $ => E                              :MLOAD(modexp_returnIndex)
    C - 32 => C                         :JMPZ(endMODEXP, returnLoop)

preEndMODEXP:
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    A => CTX

endMODEXP:
    CTX                                 :MSTORE(currentCTX), JMP(preEnd)