funcECRECOVER:
    ; Move balances if value > 0 just before executing the contract CALL
    $ => B                          :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $                               :LT, JMPC(moveBalances)

    GAS - %ECRECOVER_GAS => GAS                   :JMPN(outOfGas) ; gas static = 3000
    ; read data stored in SP + %CALLDATA_OFFSET
    ; hash [32 bytes], v [32 bytes], r [32 bytes], s [32 bytes]
    %CALLDATA_OFFSET => SP
    $ => A                              :MLOAD(SP++) ; hash
    $ => D                              :MLOAD(SP++) ; v
    $ => B                              :MLOAD(SP++) ; r
    $ => C                              :MLOAD(SP) ; s
                                        :CALL(ecrecover_precompiled) ; in: [A: hash, B: r, C: s, D: v], out: [A: result_ecrecover]
    B                                   :JMPNZ(endECRECOVER)
    ; prepare return data
    $ => E                              :MLOAD(retCallOffset)
    ; $ => C                            :MLOAD(retCallLength) ; always 32
    $ => C                              :MLOAD(originCTX)
    C - 1                               :JMPN(handleGas)
    C => CTX
    A                                   :MSTORE(bytesToStore)
                                        :CALL(MSTORE32)
                                        :JMP(preEnd)

endECRECOVER:
    $ => A                              :MLOAD(originCTX)
    A - 1                               :JMPN(handleGas)
    A => CTX
                                        :JMP(preEnd)