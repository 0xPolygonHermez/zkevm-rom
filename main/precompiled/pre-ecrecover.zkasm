funcECRECOVER:
    ; Move balances if value > 0 just before executing the contract CALL
    $ => B                          :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $                               :LT, JMPC(moveBalances)

    GAS - 3000 => GAS                   :JMPN(outOfGas) ; gas static = 3000
    ; read data stored in SP + 1024
    ; hash [32 bytes], v [32 bytes], r [32 bytes], s [32 bytes]
    1024 => SP
    $ => E                              :MLOAD(SP++) ; hash
    $ => A                              :MLOAD(SP++) ; v
    ; check v range [27, 28]
    27 => B
    $                                   :LT, JMPC(endECRECOVER)
    A => B
    28 => A
    $                                   :LT, JMPC(endECRECOVER)
    B => D
    E => A
    $ => B                              :MLOAD(SP++) ; r
    ; check r range [0, secp256k1n]
    ;0 - ${comp_gt(B, 115792089237316195423570985008687907852837564279074904382605163141518161494337)} :JMPN(endECRECOVER)
    $ => C                              :MLOAD(SP) ; s
    ; check s range [0, secp256k1n/2 + 1]
    ;0 - ${comp_gt(C, 57896044618658097711785492504343953926418782139537452191302581570759080747169)}  :JMPN(endECRECOVER)
    ; compute ecrecover
                                        :CALL(ecrecover)
    0 => B
    $ => B                              :EQ
    0 - B                               :JMPN(endECRECOVER)
    ; prepare return data
    $ => E                              :MLOAD(retCallOffset)
    ; $ => C                            :MLOAD(retCallLength) ; always 32
    $ => C                              :MLOAD(originCTX)
    C - 1                               :JMPN(handleGas)
    C => CTX
    A                                   :MSTORE(bytesToStore)
                                        :CALL(MSTORE32)
                                        :JMP(preEnd)

endECRECOVER:
    $ => A                              :MLOAD(originCTX)
    A - 1                               :JMPN(handleGas)
    A => CTX
                                        :JMP(preEnd)