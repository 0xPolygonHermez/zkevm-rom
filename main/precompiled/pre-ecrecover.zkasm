funcECRECOVER:
    ; Move balances if value > 0 just before executing the contract CALL
    $ => B                          :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $                               :LT, JMPC(moveBalances)

    GAS - %ECRECOVER_GAS => GAS     :JMPN(outOfGas) ; gas static = 3000

    ; read data stored in SP + %CALLDATA_OFFSET
    ; hash [32 bytes], v [32 bytes], r [32 bytes], s [32 bytes]
    %CALLDATA_OFFSET => SP
    $ => A                              :MLOAD(SP++) ; hash
    $ => D                              :MLOAD(SP++) ; v
    $ => B                              :MLOAD(SP++) ; r
    $ => C                              :MLOAD(SP) ,CALL(ecrecover_precompiled) ; in: [A: hash, B: r, C: s, D: v], out: [A: result_ecrecover, B: result_code]
    B                                   :JMPNZ(endECRECOVERFail)

    ; write ecrecover data into memory
    0 => E
    A                                   :MSTORE(bytesToStore), CALL(MSTORE32); in: [bytesToStore, E: offset] out: [E: new offset]

    ; prepare return data
    0                                   :MSTORE(retDataOffset)
    32                                  :MSTORE(retDataLength)
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    ; set retDataCTX
    $ => B                              :MLOAD(currentCTX)
    A => CTX
    B                                   :MSTORE(retDataCTX)
    B => CTX

    ; write result ecrecover into previous context memory
    $ => C                              :MLOAD(retCallLength), JMPZ(preEndECRECOVER)
    $ => E                              :MLOAD(retCallOffset)

    ; ecrecover result is in bytesToStore
    C - 32                              :JMPN(continueEcrecover)
    32 => C

continueEcrecover:
    $ => CTX                            :MLOAD(originCTX), CALL(MSTOREX)  ; in: [bytesToStore, E: offset, C: length] out: [E: new offset]
                                        :JMP(endECRECOVER)

endECRECOVERFail:
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    A => CTX
    0                                   :MSTORE(retDataCTX)
    CTX                                 :MSTORE(currentCTX), JMP(preEnd)

preEndECRECOVER:
    $ => CTX                            :MLOAD(originCTX)

endECRECOVER:
    CTX                                 :MSTORE(currentCTX), JMP(preEnd)