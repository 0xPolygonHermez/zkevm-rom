/**
 * @link [https://www.evm.codes/precompiled#0x08?fork=shanghai]
 * @zk-counters
 *  - dynamic steps: 600000
 *  - dynamic airth: 50000
 *  - dynamic binary: 1000
 * @process-precompiled
 *  - stack input: [x1, y1, x2, y2, ..., xk, yk]
 *  - stack output: [success]
 */

funcEcPairing:

    ; %MAX_CNT_BINARY - CNT_BINARY - 1000     :JMPN(outOfCountersBinary)
    ; %MAX_CNT_ARITH - CNT_ARITH - 50000      :JMPN(outOfCountersArith)
    ; %MAX_CNT_STEPS - STEP - 600000          :JMPN(outOfCountersStep)

    ; Move balances if value > 0 just before executing the contract CALL
    $ => B                              :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $                                   :LT, JMPC(moveBalances)

    GAS - %ECPAIRING_GAS => GAS         :JMPN(outOfGas) ; gas static = 45000

    $ => B                              :MLOAD(argsLengthCall)
    B                                   :MSTORE(arithA)
    192                                 :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => A                              :MLOAD(arithRes2),JMPNZ(endECPAIRINGFail)
    $ => A                              :MLOAD(arithRes1)
    A                                   :MSTORE(ecPairing_ninputs)
    GAS - 34000*A => GAS                :JMPN(outOfGas) ; gas = 34000 * inputsLength
    $ => A                              :MLOAD(argsOffsetCall)

    ; read data stored in SP + %CALLDATA_OFFSET
    %CALLDATA_OFFSET + A                :MSTORE(ecPairing_SP),CALL(ecPairing)

    B                                   :JMPNZ(endECPAIRINGFail)
    $ => C                              :MLOAD(ecPairing_result)

    ; write ecAdd data into memory
    0 => E
    C                                   :MSTORE(bytesToStore), CALL(MSTORE32); in: [bytesToStore, E: offset] out: [E: new offset]

    ; prepare return data
    0                                   :MSTORE(retDataOffset)
    32                                  :MSTORE(retDataLength)
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    ; set retDataCTX
    $ => B                              :MLOAD(currentCTX)
    A => CTX
    B                                   :MSTORE(retDataCTX)
    B => CTX

    ; write result ecpairing into previous context memory
    $ => C                              :MLOAD(retCallLength), JMPZ(preEndECPAIRING)
    $ => E                              :MLOAD(retCallOffset)

    ; ecpairing result is in bytesToStore
    C - 32                              :JMPN(continueECPAIRING)
    32 => C

continueECPAIRING:
    $ => CTX                            :MLOAD(originCTX), CALL(MSTOREX)  ; in: [bytesToStore, E: offset, C: length] out: [E: new offset]
                                        :JMP(endECPAIRING)

endECPAIRINGFail:
    $ => A                              :MLOAD(originCTX), JMPZ(handleGas)
    A => CTX
    0                                   :MSTORE(retDataCTX)
    CTX                                 :MSTORE(currentCTX), JMP(preEndFail)

preEndECPAIRING:
    $ => CTX                            :MLOAD(originCTX)

endECPAIRING:
    CTX                                 :MSTORE(currentCTX), JMP(preEnd)