ECADD:
    $ => CTX                :MLOAD(originCTX)
    $ => C                  :MLOAD(argsLengthCall)
    ;ASSERT C == 32*4 bytes
    ${comp_eq(C, 128)} - 1  :JMPC(ECADDend)
    $ => C                  :MLOAD(retLength)
    ;ASSERT C == 32*2 bytes
    ${comp_eq(C, 64)} - 1   :JMPC(ECADDend)
    $ => E                  :MLOAD(argsOffsetCall)
                            :CALL(MLOAD32)
    A => D
                            :CALL(MLOAD32)
    A => C
                            :CALL(MLOAD32)
    A => B
                            :CALL(MLOAD32)
    $ => E                  :MLOAD(retOffset)
    ${precompiled_ecAdd_add(D,C,B,A)}
    ${precompiled_ecAdd_result0()} => A
    A                       :MSTORE(bytesToStore)
                            :CALL(MSTORE32)
    ${precompiled_ecAdd_result1()} => A
    A                       :MSTORE(bytesToStore)
                            :CALL(MSTORE32)
    GAS - 150 => GAS
                            :JMP(preEnd)

ECADDend:
                            :JMP(preEndFail)