/**
 * @link [https://www.evm.codes/precompiled#0x02?fork=berlin]
 * @zk-counters
 *  - dynamic steps:
 *  - dynamic binary:
 * @process-precompiled
 *  - stack input: [data]
 *  - stack output: [hash]
 */
VAR GLOBAL sha256DataOffset
VAR GLOBAL sha256DataId
VAR GLOBAL sha256Hash
VAR GLOBAL tmpZkSHA256

funcSHA256:
    %MAX_CNT_STEPS - STEP - 100         :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1    :JMPN(outOfCountersBinary)

    ; Move balances if value > 0 just before executing the contract CALL
    $ => B          :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $               :LT, JMPC(moveBalances)

    ; GAS - staticGas
    GAS - %SHA2_256_GAS => GAS :JMPN(outOfGas)

    $ => C          :MLOAD(txCalldataLen)

    ;words => A  === (C+31)/32 => A
    C + 31 => A
    A               :MSTORE(arithA)
    32              :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => A          :MLOAD(arithRes1)

    ; GAS - dynamicGas
    GAS - %SHA2_256_WORD_GAS*A => GAS   :JMPN(outOfGas)

    ; Compute necessary sha256 counters to finish the full hash
    ; Divide the total data length + 1 by 64 to obtain the sha256 counter increment
    ; 64 is the value used by the prover to increment sha256 counters
    C + 1                            :MSTORE(arithA)
    64                               :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => A                           :MLOAD(arithRes1)

    ; check enough sha256 counters left
    %MAX_CNT_SHA256_F - CNT_SHA256_F - A    :JMPN(outOfCountersSha256)

    ; prepare retData
    0               :MSTORE(retDataOffset)
    32              :MSTORE(retDataLength)
    32              :MSTORE(readXFromCalldataLength)
    0 => HASHPOS
                    :CALL(SHA256data)
    ; get & update sha256Data ID
    $ => E          :MLOAD(sha256DataId)
    E + 1           :MSTORE(sha256DataId)

    ; copy sha256 to memory (hash 32 bytes)
    0 => E
    A               :MSTORE(bytesToStore), CALL(MSTORE32); in: [bytesToStore, E: offset] out: [E: new offset]

SHA256dataReturn:
    ; handle CTX
    $ => A          :MLOAD(originCTX), JMPZ(handleGas)
    ; set retDataCTX
    $ => B          :MLOAD(currentCTX)
    A => CTX
    B               :MSTORE(retDataCTX)
    B => CTX
    ; copy sha256 to retData (hash 32 bytes)
    $ => C          :MLOAD(retCallLength)
    $ => E          :MLOAD(retCallOffset)
    $ => CTX        :MLOAD(originCTX)
    C - 32          :JMPN(continueSHA256dataReturn)
    32 => C

continueSHA256dataReturn:
    $ => A          :MLOAD(sha256Hash)
    ; MSTORE memory origin CTX
    A               :MSTORE(bytesToStore), CALL(MSTOREX) ; in: [bytesToStore, E: offset, C: length] out: [E: new offset]
    ; set currentCTX
    CTX             :MSTORE(currentCTX), JMP(preEnd)

SHA256data:
    RR              :MSTORE(tmpZkSHA256)
    0 => E          :MSTORE(sha256DataOffset)

SHA256dataLoop:
    %MAX_CNT_STEPS - STEP - 50         :JMPN(outOfCountersStep)

    ; Copy from calldata to hashS
    C               :JMPZ(computeSHA256)
    C - 32          :JMPN(SHA256dataFinal)
    $ => E          :MLOAD(sha256DataOffset)
    E               :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A          :MLOAD(readXFromCalldataResult)
    E + 32 => E     :MSTORE(sha256DataOffset)

    $ => E          :MLOAD(sha256DataId)
    32 => D
    A               :HASHS(E)
    C - 32 => C     :JMP(SHA256dataLoop)

SHA256dataFinal:
    %MAX_CNT_STEPS - STEP - 300         :JMPN(outOfCountersStep)

    $ => E          :MLOAD(sha256DataOffset)
    C               :MSTORE(readXFromCalldataLength)
    E               :MSTORE(readXFromCalldataOffset), CALL(readFromCalldataOffset); in: [readXFromCalldataOffset: offset value, readXFromCalldataLength: length value], out: [readXFromCalldataResult: result value]
    $ => A          :MLOAD(readXFromCalldataResult)
    32 - C => D     :CALL(SHRarith)
    $ => E          :MLOAD(sha256DataId)
    C => D
    A               :HASHS(E)

computeSHA256:
    %MAX_CNT_STEPS - STEP - 20              :JMPN(outOfCountersStep)

    $ => E          :MLOAD(sha256DataId)
    HASHPOS         :HASHSLEN(E)
    $ => A          :HASHSDIGEST(E)
    A               :MSTORE(sha256Hash)
    $ => RR         :MLOAD(tmpZkSHA256)
                    :RETURN