VAR CTX Bsize
VAR CTX Esize
VAR CTX Msize
VAR CTX exp
VAR CTX mod
;TODO: incorrect inputs (argslength < 32 + 32 + 32 + lenB + lenE + lenM)
;TODO: size > 32
MODEXP:
    $ => C          :MLOAD(argsLengthCall)
    $ => CTX        :MLOAD(originCTX)
    $ => E          :MLOAD(argsOffsetCall)
                    :CALL(MLOAD32)
    A               :MSTORE(Bsize)
                    :CALL(MLOAD32)
    A               :MSTORE(Esize)
                    :CALL(MLOAD32)
    A               :MSTORE(Msize)
    $ => C          :MLOAD(Bsize)
                    :CALL(MLOADX)
    ;${log(A)}
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    A => B
    $ => C          :MLOAD(Esize)
                    :CALL(MLOADX)
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    A               :MSTORE(exp)
    ;${log(A)}
    A => D
    $ => C          :MLOAD(Msize)
                    :CALL(MLOADX)
    A               :MSTORE(mod)
    ;${log(A)}
    D => E
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    E => D
    B => E
    0 => B
    $               :EQ,JMPC(MODEXPreturn0)
    E => B
    1 => E

MODEXPloop:
    D - 1 => D      :JMPN(MODEXPloopEnd)
    E               :MSTORE(arithA)
    B               :MSTORE(arithB)
                    :CALL(mulARITH)
    $ => E          :MLOAD(arithRes1)
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => E          :MLOAD(arithRes2)
                    :JMP(MODEXPloop)

MODEXPloopEnd:
    E => A
                    :JMP(MODEXPfinal)

;    $${var _numAux = 1}
;
;MODEXPloop:
;    D - 1 => D      :JMPN(MODEXPloopEnd)
;    ${_numAux = (_numAux * B) % A}
;                    :JMP(MODEXPloop)
;
;MODEXPloopEnd:
;    ${_numAux} => A
;                    :JMP(MODEXPfinal)

MODEXPreturn0:
    0 => A

MODEXPfinal:
    C => D
    $ => CTX        :MLOAD(currentCTX)
    $ => E          :MLOAD(retCallOffset)
    $ => C          :MLOAD(retCallLength)
    $ => CTX        :MLOAD(originCTX)

    ;ASSERT C == D
    ;Result of the computation, with the same number of bytes as M
    32 - D => D
                    :CALL(SHLarith)
    A               :MSTORE(bytesToStore)
    C - 32          :JMPN(MODEXPstoreX)
                    :CALL(MSTORE32)
                    :JMP(MODEXPgas)

MODEXPstoreX:
                    :CALL(MSTOREX)

MODEXPgas:
    $ => A              :MLOAD(Bsize)
    $ => B              :MLOAD(Msize)
    $ => D              :LT
    D - 1               :JMPN(MODEXPgas2)
    B => A

MODEXPgas2:
    0 => D ;iteration_count
    ${(A+7)/8} => A ;words
    ${exp(A,2)} => A ;multiplication_complexity
    A                   :MSTORE(tmpVarA)
    $ => C              :MLOAD(Esize)
    $ => B              :MLOAD(exp)
    C - 32              :JMPN(MODEXPgas3)
    ;TODO +32 bytes
                        :JMP(MODEXPgas4)

MODEXPgas3:
    0 => A
    $                   :EQ,JMPC(MODEXPgas4)
    8*C - 1 => D ;iteration_count

MODEXPgas4:
    1 => B
    D => A
    $ => A              :LT
    A - 1               :JMPN(MODEXPgasEnd)
    1 => D ;iteration_count

MODEXPgasEnd:
    $ => A              :MLOAD(tmpVarA)
    ${A*D/3} => A ;multiplication_complexity * iteration_count / 3 TODO: This is UNSAFE!!
    200 => B
    $ => A              :LT
    A - 1               :JMPN(MODEXPend)
    200 => B

MODEXPend:
    GAS - B => GAS      :JMPN(outOfGas)
                        :JMP(preEnd)