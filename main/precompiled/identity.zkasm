IDENTITY:
    ; Move balances if value > 0 just before executing the contract CALL
    $ => B          :MLOAD(txValue)
    0 => A
    zkPC+2 => RR
    $               :LT, JMPC(moveBalances)

    GAS - %IDENTITY_GAS => GAS :JMPN(outOfGas)
    $ => C          :MLOAD(argsLengthCall)
    ;(C+31)/32 => A
    C + 31 => A
    A               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => A          :MLOAD(arithRes1)

    GAS - %IDENTITY_WORD_GAS*A => GAS   :JMPN(outOfGas)
    CTX             :MSTORE(currentCTX)
    CTX => A
    $ => CTX        :MLOAD(originCTX)
    CTX - 1         :JMPN(handleGas)
    A               :MSTORE(retDataCTX)
    A => CTX
    0 => B
    0 => E
    0 => A
    B               :MSTORE(retDataOffset)
    C               :MSTORE(retDataLength)

IDENTITYinit:
    %MAX_CNT_BINARY - CNT_BINARY - 10   :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 100         :JMPN(outOfCountersStep)
    ; Copy from calldata to memory
    C - 1           :JMPN(IDENTITYreturn)
    C - 32          :JMPN(IDENTITYfinal)
    %CALLDATA_OFFSET + A => SP
    $ => B          :MLOAD(SP)
    B               :MSTORE(bytesToStore), CALL(MSTORE32)
    A + 1 => A
    C - 32 => C     :JMP(IDENTITYinit)
IDENTITYfinal:
    %CALLDATA_OFFSET + A => SP
    $ => A          :MLOAD(SP)
    32 - C => D     :CALL(SHRarith)
                    :CALL(SHLarith)
    A               :MSTORE(bytesToStore), CALL(MSTOREX)
IDENTITYreturn:
    ; Copy from memory current CTX to memory origin CTX
    0 => E
    $ => B          :MLOAD(retCallLength)

    ; Get lower between retCallLength and
    $ => A          :MLOAD(retDataLength)
    $               :LT, JMPC(IDENTITYreturn2)
    B => C
    $ => B          :MLOAD(retCallOffset), JMP(IDENTITYreturnLoop)

IDENTITYreturn2:
    A => C
    $ => B          :MLOAD(retCallOffset)

IDENTITYreturnLoop:
    %MAX_CNT_BINARY - CNT_BINARY - 10   :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 510 :JMPN(outOfCountersPoseidon)
    C - 1           :JMPN(IDENTITYend)
    C - 32          :JMPN(IDENTITYreturnFinal)
                    :CALL(MLOAD32)
    E => D
    $ => CTX        :MLOAD(originCTX)
    B => E
    A               :MSTORE(bytesToStore)
                    :CALL(MSTORE32)
    E => B
    D => E
    C - 32 => C
    $ => CTX        :MLOAD(currentCTX), JMP(IDENTITYreturnLoop)
IDENTITYreturnFinal:
                    :CALL(MLOADX)
    $ => CTX        :MLOAD(originCTX)
    B => E
    A               :MSTORE(bytesToStore), CALL(MSTOREX)
    $ => CTX        :MLOAD(currentCTX)

IDENTITYend:
    $ => CTX        :MLOAD(originCTX)
    CTX             :MSTORE(currentCTX), JMP(preEnd)
