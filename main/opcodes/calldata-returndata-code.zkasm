
; // TODO: Check when a contract is deployed with CREATE
opCALLDATALOAD:

    %MAX_CNT_ARITH - CNT_ARITH - 64 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 66 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 1 => SP    :JMPN(stackUnderflow)
    $ => E          :MLOAD(SP)
    ; Div operation with Arith
    E               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes1)
    $ => A          :MLOAD(arithRes2)

    0 - A           :JMPN(opCALLDATALOAD2)
    SP => C
    1024 + B => SP
    $ => B          :MLOAD(SP)
    C => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-3 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opCALLDATALOAD2:
    SP => C
    A => D
    1024 + B => SP
    $ => A          :MLOAD(SP++)
                    :CALL(SHLarith)
    A => B
    32 - D => D
    $ => A          :MLOAD(SP)
                    :CALL(SHRarith)
    C => SP
    B + A           :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
                    :JMP(readCode)

opCALLDATASIZE:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    $ => A          :MLOAD(isCreateContract)
    0 - A           :JMPN(opCALLDATASIZEdep)
    $ => B          :MLOAD(txCalldataLen)
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-2 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opCALLDATASIZEdep:
    0               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-2 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)


; // TODO: if ins deployment only write 0
opCALLDATACOPY:

    %MAX_CNT_ARITH - CNT_ARITH - 192 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 192 :JMPN(outOfCountersBinary)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 1 :JMPN(outOfCountersMemalign)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 3          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => E          :MLOAD(SP--) ;destOffset - offset memory
    $ => B          :MLOAD(SP--) ;offset calldata
    $ => C          :MLOAD(SP)   ;length calldata
    E               :MSTORE(lastMemOffset)
    C               :MSTORE(lastMemLength)
    GAS - 3 => GAS  :JMPN(outOfGas)
    GAS - ${3*((C+31)/32)} => GAS    :JMPN(outOfGas) ; Arith
                    :CALL(saveMem)
    SP              :MSTORE(SPw)
    $ => A          :MLOAD(txCalldataLen)
    $               :LT,JMPC(opCALLDATACOPY0)
    A + C => A
    $               :LT,JMPC(opCALLDATACOPYX0)
                    :JMP(opCALLDATACOPYinit)

opCALLDATACOPYX0:
    $ => C          :MLOAD(txCalldataLen)

opCALLDATACOPYinit:

    %MAX_CNT_ARITH - CNT_ARITH - 192 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 192 :JMPN(outOfCountersBinary)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 1 :JMPN(outOfCountersMemalign)
    %MAX_CNT_STEPS - STEP - 400 :JMPN(outOfCountersStep)

    C - 1           :JMPN(opCALLDATACOPYcheckLen)
    C - 32          :JMPN(opCALLDATACOPYfinal)
    B               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH)
    $ => D          :MLOAD(arithRes2)
    $ => A          :MLOAD(arithRes1)
    A               :MSTORE(arithA)
    1024            :MSTORE(arithB)
                    :CALL(addARITH)
    $ => A          :MLOAD(arithRes1)
    A => SP
    $ => A          :MLOAD(SP)
                    :CALL(SHLarith)
    A => C
    $ => A          :MLOAD(arithRes1)
    A + 1 => SP
    32 - D => D
    $ => A          :MLOAD(SP)
                    :CALL(SHRarith)
    A + C           :MSTORE(bytesToStore)
                    :CALL(MSTORE32)
    $ => SP         :MLOAD(SPw)
    $ => C          :MLOAD(SP)   ;length
    C - 32 => C
    C               :MSTORE(SP)
    B + 32 => B
                    :JMP(opCALLDATACOPYinit)

opCALLDATACOPYfinal:
    B               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH)
    $ => D          :MLOAD(arithRes2)
    $ => B          :MLOAD(arithRes1)
    1024            :MSTORE(arithA)
    B               :MSTORE(arithB)
                    :CALL(addARITH)
    $ => B          :MLOAD(arithRes1)
    B => SP
    $ => A          :MLOAD(SP)
                    :CALL(SHLarith)
    $ => SP         :MLOAD(SPw)
    $ => C          :MLOAD(SP)   ;length
    B + 1 => SP
    C - 32 + D => D
    D               :JMPN(opCALLDATACOPYxor)
    A => B
    $ => A          :MLOAD(SP)
    32 - D => D
                    :CALL(SHRarith)
    32 - C => D
                    :CALL(SHLarith)
    B + A => A
    A               :MSTORE(bytesToStore)
                    :CALL(MSTOREX)
                    :JMP(opCALLDATACOPYcheckLen)

opCALLDATACOPY0:
    32 - C          :JMPN(opCALLDATACOPY320)
    0               :MSTORE(bytesToStore)
                    :CALL(MSTOREX)
                    :JMP(opCALLDATACOPYend)

opCALLDATACOPY320:
    0               :MSTORE(bytesToStore)
                    :CALL(MSTORE32)
    C - 32 => C
                    :JMP(opCALLDATACOPY0)

opCALLDATACOPYxor:
    32 - C => D
                    ;SHR/SHL could be optimized
                    :CALL(SHRarith)
                    :CALL(SHLarith)
    A               :MSTORE(bytesToStore)
                    :CALL(MSTOREX)

opCALLDATACOPYcheckLen:
    $ => C          :MLOAD(lastMemLength)
    $ => A          :MLOAD(txCalldataLen)
    C - A => C      :JMPN(opCALLDATACOPYend)
                    :JMP(opCALLDATACOPY0)


opCALLDATACOPYend:
    $ => SP         :MLOAD(SPw)
                    :JMP(readCode)

opCODESIZE:

    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 252 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    $ => A          :MLOAD(isCreateContract)
    0 - A           :JMPN(opCODESIZEdep)
    $ => A          :MLOAD(txDestAddr)
    %SMT_KEY_SC_LENGTH => B
    0 => C
    $ => A          :SLOAD
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-2 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opCODESIZEdep: ;//TODO: create/create2, constructor parameters, initBytcode vs deployed Bytecode
    $ => B          :MLOAD(txCalldataLen)
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-2 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

VAR GLOBAL memOffset
VAR GLOBAL remainingBytes
VAR GLOBAL previousValue
VAR GLOBAL codecopyHashId
VAR GLOBAL codecopyBytecodeLength
VAR GLOBAL memInteger
opCODECOPY:

    SP - 3          :JMPN(stackUnderflow)
    $ => A          :MLOAD(isCreateContract)
    0 - A           :JMPN(opCALLDATACOPY) ; //TODO: delegateCall ? use of storageAddr? same in process_tx ?
    SP - 1 => SP
    $ => C          :MLOAD(SP--) ;destOffset, memory offset
    $ => D          :MLOAD(SP--) ;offset, bytecode offset
    $ => E          :MLOAD(SP)   ;bytes to copy
    C               :MSTORE(lastMemOffset)
    E               :MSTORE(lastMemLength)

    ;Check counters
    %MAX_CNT_BINARY - CNT_BINARY - 32          :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    GAS - 3 => GAS  :JMPN(outOfGas)
    GAS - ${3*((E+31)/32)} => GAS    :JMPN(outOfGas)
                    :CALL(saveMem)
    ; Check if offset is above data len
    D => A
    $ => B          :MLOAD(bytecodeLength)
    $               :LT, JMPC(opCODECOPY2)
    B => A
opCODECOPY2:
    ; init vars for copy the code
    A => HASHPOS
    $ => D          :MLOAD(contractHashId)
    D               :MSTORE(codecopyHashId) ; set hashId to get bytes from
    B               :MSTORE(codecopyBytecodeLength) ; set contract bytecode length
    C               :MSTORE(memOffset)
    E               :MSTORE(remainingBytes)

opCODECOPYinit:
    %MAX_CNT_BINARY - CNT_BINARY - 32          :JMPN(outOfCountersBinary)
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 510 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 200                :JMPN(outOfCountersStep)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN  - 2    :JMPN(outOfCountersMemalign)

    $ => B          :MLOAD(remainingBytes)
    B - 1           :JMPN(readCode)
    $ => A          :MLOAD(memOffset)
                    :CALL(offsetUtil) ; E (integer) / C (remaining)
    E               :MSTORE(memInteger)
    $ => A          :MLOAD(MEM:E) ; read M0 previous value
    A               :MSTORE(previousValue)
                    :CALL(opCODECOPYLoadBytes)
    $ => A          :MLOAD(previousValue)
    ${memAlignWR8_W0(A,B,C)} => D  ; no trust calculate W0
    B               :MEM_ALIGN_WR8 ; only use LSB of B, rest of bytes could be non zero
    $ => E          :MLOAD(memInteger)
    D               :MSTORE(MEM:E) ; write W0
    ; update vars loop
    $ => B          :MLOAD(remainingBytes)
    B - 1 => B  ; decrease 1 byte from length
    B               :MSTORE(remainingBytes)
    $ => A          :MLOAD(memOffset)
    A + 1 => A  ; increment offset to write the next byte
    A               :MSTORE(memOffset)
                    :JMP(opCODECOPYinit)


; @info Load 0 if read bytecode position is above bytecode length
opCODECOPYLoadBytes:
    0 => A
    $ => B          :MLOAD(codecopyBytecodeLength)
    $               :EQ, JMPC(readZero)
    HASHPOS => A
    $               :LT, JMPC(readValueBytecode)
readZero:
    0 => B
                    :RETURN
readValueBytecode:
    1 => D
    $ => E          :MLOAD(codecopyHashId)
    $ => B          :HASHP(E)   ; read value to write in memory
                    :RETURN


opEXTCODESIZE:

    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 255 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 1 => SP    :JMPN(stackUnderflow)
    $ => A          :MLOAD(SP)
                    :CALL(maskAddress) ; Mask address to 20 bytes
                    :CALL(isColdAddress)
    %SMT_KEY_SC_LENGTH => B
    0 => C
    $ => A          :SLOAD
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-100-D*2500 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

; read hash smt
; put 32 by 32 bytes in the hashP
; assert bytes with hash smt

; read byte from hashP and copy into memory
; over length => set 0's
VAR GLOBAL tmpContractHashId
VAR GLOBAL tmpContractLength
opEXTCODECOPY:

    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 510 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_PADDING_PG - CNT_PADDING_PG - 11 :JMPN(outOfCountersPadding)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 4          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--) ;addr
                    :CALL(maskAddress) ; Mask address to 20 bytes
                    :CALL(isColdAddress)
    GAS-100-D*2500 => GAS            :JMPN(outOfGas)
                    :CALL(opEXTCODECOPYCheckHash)
    $ => C          :MLOAD(SP--) ;destOffset, memory offset
    $ => D          :MLOAD(SP--) ;offset to read from bytecode
    $ => E          :MLOAD(SP)   ;bytes to read from bytecode
    C               :MSTORE(lastMemOffset)
    E               :MSTORE(lastMemLength)

    ;Check counters should be before than do all the operations! TODO
    %MAX_CNT_BINARY - CNT_BINARY - 32          :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 200                :JMPN(outOfCountersStep)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN  - 2    :JMPN(outOfCountersMemalign)


    GAS - ${3*((E+31)/32)} => GAS    :JMPN(outOfGas)
                    :CALL(saveMem)
    ; Check if offset is above data len
    D => A
    $ => B          :MLOAD(tmpContractLength)
    $               :LT, JMPC(opEXTCODECOPY2)
    B => A

opEXTCODECOPY2:
    ; init vars for copy the code
    A => HASHPOS
    $ => D          :MLOAD(tmpContractHashId)
    D               :MSTORE(codecopyHashId) ; set hashId to get bytes from
    B               :MSTORE(codecopyBytecodeLength) ; set contract bytecode length
    C               :MSTORE(memOffset)
    E               :MSTORE(remainingBytes)
                    :JMP(opCODECOPYinit)

opEXTCODECOPYCheckHash:
    ; get contract length
    %SMT_KEY_SC_LENGTH => B
    0 => C
    $ => D                          :SLOAD
    D                               :MSTORE(tmpContractLength)
    ; If len is 0 nothing to check
    A => E
    0 => A
    D => B
    $                               :EQ, JMPC(opEXTCODECOPYCheckHashEnd)
    ; check poseidon counters
    ; 56 is the value used by the prover to increment poseidon counters depending on the hash length
    B               :MSTORE(arithA)
    56              :MSTORE(arithB)
                    :CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => B          :MLOAD(arithRes1)
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 1 => A
    $               :LT, JMPC(outOfCountersPoseidon)

    E => A
    ; get hash contract
    %SMT_KEY_SC_CODE => B
    0 => C
    $ => A          :SLOAD
    ; get a new hashPId
    $ => E                          :MLOAD(nextHashPId)
    E                               :MSTORE(tmpContractHashId)
    E + 1                           :MSTORE(nextHashPId)

    ; set vars prior to loop
    D => B
    0 => HASHPOS
                                    :JMP(opEXTCODECOPYCheckHashLoop)

; @info bytes are inserted byte by byte
; TODO: it could be improved by computing how many 32 bytes slots are needed
opEXTCODECOPYCheckHashLoop:

        %MAX_CNT_STEPS - STEP - 20 :JMPN(outOfCountersStep)

        B - 1                                   :JMPN(opEXTCODECOPYCheckHashLoopEnd) ; finish reading bytecode
        1 => D
        ${getBytecode(A, HASHPOS, 1)}           :HASHP(E)                   ; add bytes to hash contract bytecode
        B - 1 => B
                                                :JMP(opEXTCODECOPYCheckHashLoop)

opEXTCODECOPYCheckHashLoopEnd:
        HASHPOS                         :HASHPLEN(E)
        $ => E                          :HASHPDIGEST(E)
        ; check hash computed matches hash in the smt leaf
        E                               :ASSERT
opEXTCODECOPYCheckHashEnd:
                                        :RETURN

opEXTCODECOPYinit:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    C - 1           :JMPN(readCode)
    C - 32          :JMPN(opEXTCODECOPYfinal)
    ${getBytecode(A,B,32)} => D
    D               :MSTORE(bytesToStore)
                    :CALL(MSTORE32)
    C - 32 => C
    B + 32 => B
                    :JMP(opEXTCODECOPYinit)

opEXTCODECOPYfinal:
    ${getBytecode(A,B,C)} => A
    32 - C  => D
                    :CALL(SHLarith)
    A               :MSTORE(bytesToStore)
                    :CALL(MSTOREX)
                    :JMP(readCode)

opRETURNDATASIZE:

    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    ; Load ret data length from last ctx
    ; If no retDataCTX(0), retDataLength = 0
    GAS - 2 => GAS  :JMPN(outOfGas)
    $ => B          :MLOAD(retDataCTX)
    0 => A
    $               :EQ, JMPC(endOpRETURNDATASIZE)
    B => CTX
    $ => A          :MLOAD(retDataLength)
    ; Restore current context
    $ => CTX        :MLOAD(currentCTX)

endOpRETURNDATASIZE:
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opRETURNDATACOPY:
    SP - 3          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => D          :MLOAD(SP--)            ;destOffset
    $ => E          :MLOAD(SP--)            ;offset - offset in return data
    $ => C          :MLOAD(SP)              ;length - length return data
    D               :MSTORE(lastMemOffset)
    C               :MSTORE(lastMemLength)

    ;Check counters
    %MAX_CNT_ARITH - CNT_ARITH - 32            :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 32          :JMPN(outOfCountersBinary)
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 510 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 600                :JMPN(outOfCountersStep)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN  - 2    :JMPN(outOfCountersMemalign)

                    :CALL(saveMem)
    ; if retDataCTX is 0, end opcode execution
    $ => B          :MLOAD(retDataCTX)
    0 => A
    $               :EQ, JMPC(opRETURNDATACOPYEmpty)
    ; Load ret data length from last ctx
    B => CTX
    E => B
    $ => A          :MLOAD(retDataLength)
    $ => E          :MLOAD(retDataOffset)
    $ => CTX        :MLOAD(currentCTX)

    E + B => E ; E ret data offset (memory pointer) of last context, B offset in return data  that want to retrive


    ; if retDataSize <= retdataOffset + dataLen -> OOG
    ;A retDataSize
    B + C => B ; total offset (retdataOffset + dataLen)
    $               :LT, JMPC(outOfGas)

    E => B ; memory pointer where start to copy memory

    ;${3*((C+31)/32)}
    C+31 => A
    ;(C+31)/32
    A               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH)
    $ => A          :MLOAD(arithRes1)
    ; Mul operation with Arith
    ; 3*((C+31)/32)
    3               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(mulARITH)
    $ => A          :MLOAD(arithRes1)
    GAS - A => GAS  :JMPN(outOfGas)

opRETURNDATACOPYinit:
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    C - 1           :JMPN(readCode)
    C - 32          :JMPN(opRETURNDATACOPYfinal)
    B => E
    ; Load memory from last context used
    $ => CTX        :MLOAD(retDataCTX)
                    :CALL(MLOAD32)
    ; Save memory to the current context
    $ => CTX        :MLOAD(currentCTX)
    E => B
    D => E
    A               :MSTORE(bytesToStore)
                    :CALL(MSTORE32)
    E => D
    C - 32 => C
                    :JMP(opRETURNDATACOPYinit)

opRETURNDATACOPYfinal:
    B => E
    ; Load memory from last context used
    $ => CTX        :MLOAD(retDataCTX)
                    :CALL(MLOADX)
    ; Save memory to the current context
    $ => CTX        :MLOAD(currentCTX)
    E => B ; offset retDataCTX
    D => E ; offset current CTX
    A               :MSTORE(bytesToStore)
                    :CALL(MSTOREX)
                    :JMP(readCode)

opRETURNDATACOPYEmpty:
    E + C => B ; offset return data + len return data must be 0
    $               :EQ, JMPC(readCode)
                    :JMP(outOfGas)

opEXTCODEHASH:

    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 255 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 1 => SP    :JMPN(stackUnderflow)
    $ => A          :MLOAD(SP)
                    :CALL(maskAddress) ; Mask address to 20 bytes
                    :CALL(isColdAddress)
    GAS-100-D*2500 => GAS    :JMPN(outOfGas)
    %SMT_KEY_SC_CODE => B
    0 => C
    $ => A          :SLOAD
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)