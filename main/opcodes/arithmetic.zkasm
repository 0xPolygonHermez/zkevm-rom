
/**
 * @link [Link EVM behaviour --> evm.codes?]
 * @zk-counters
 *  - 1 binary
 *  - 120 steps
 * @process-opcode
 *  - stack input: [a, b]
 *  - stack output: [a + b]
 */
opADD:
    ; checks zk-counters
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 2          :JMPN(stackUnderflow)

    ; check out-of-gas
    GAS-3 => GAS    :JMPN(outOfGas)

    ; read two items from the stack
    SP - 1 => SP
    $ => A          :MLOAD(SP--) ; [a => A]
    $ => B          :MLOAD(SP) ; [b => B]

    ; call binary:add state machine and push to the stack
    $               :ADD, MSTORE(SP++)

    ; continue read bytecode
                    :JMP(readCode)

opMUL:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--)
    $ => B          :MLOAD(SP)
    ; Mul operation with Arith
    A               :MSTORE(arithA)
    B               :MSTORE(arithB)
                    :CALL(mulARITH)
    $ => E          :MLOAD(arithRes1)
    E               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opSUB:

    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--)
    $ => B          :MLOAD(SP)
    $ => E          :SUB
    E               :MSTORE(SP++)
    GAS-3 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opDIV:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 2 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => E          :MLOAD(SP--)
    $ => A          :MLOAD(SP)
    ; Div operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes1)
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opSDIV:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 8 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--)
                    :CALL(abs)
    A => E
    B => C
    $ => A          :MLOAD(SP)
                    :CALL(abs)
    A               :MSTORE(tmpVarA)
    C => A
    $ => A          :XOR
    1 => B
    $ => B          :XOR
    $ => A          :MLOAD(tmpVarA)
    B - 1           :JMPN(opSDIVNeg) ;0 negative, 1 positive
    ; Div operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes1)
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opSDIVNeg:

    ; Div operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes1)

    0 => A
    $ => A          :SUB
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opMOD:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 2 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => E          :MLOAD(SP--)
    $ => A          :MLOAD(SP)
    ; Mod operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => C          :MLOAD(arithRes2)
    C               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opSMOD:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 8 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--)
                    :CALL(abs)
    A => E
    B => C
    $ => A          :MLOAD(SP)
                    :CALL(abs)
    A               :MSTORE(tmpVarA)
    C => A
    1 => B
    $ => B          :XOR
    $ => A          :MLOAD(tmpVarA)
    B - 1           :JMPN(opSMODNeg)  ; 0 negative, 1 positive
    ; Div operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => C          :MLOAD(arithRes2)
    C               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opSMODNeg:

    ; Div operation with Arith
    E               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes2)
    0 => A
    $ => A          :SUB
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)

opADDMOD:

    %MAX_CNT_ARITH - CNT_ARITH - 1 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 4 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 80 :JMPN(outOfCountersStep)

    GAS-8 => GAS    :JMPN(outOfGas)

    SP - 3          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A          :MLOAD(SP--)
    $ => B          :MLOAD(SP--)
    ; Add operation with Arith
    $${var _addMod = A + B}

    1 => D
    $ => A          :ADD, JMPC(AddModJumpCarry) ; or arith
    0 => D

AddModJumpCarry:
    A => E          ; Store sumResult on E

    $ => A          :MLOAD(SP) ; load modulus
    2 => B
    $               :LT, JMPC(zeroOneAddMod)

    ${_addMod / A} => B        ; k: Max should be (2^256 -1) * 2 / 2 --> smaller than 2^256
    ${_addMod % A} => C        ; addModResult

    ; k * N + addModResult = D*2^256 + sumResult
    ; B * A + C = D*2^256 + E

    ; Check addModResult is less than modulus
    E               :ARITH

    A => B          ; modulus
    C => A          ; addModResult
    $ => A          :LT
    1               :ASSERT
    C               :MSTORE(SP++)
                    :JMP(readCode)

zeroOneAddMod:
    0               :MSTORE(SP++)
                    :JMP(readCode)

opMULMOD:
    GAS-8 => GAS    :JMPN(outOfGas)
    SP - 3          :JMPN(stackUnderflow)
    SP - 1 => SP

    $ => A          :MLOAD(SP--)
    $ => B          :MLOAD(SP--)
    $ => C          :MLOAD(SP) ; Modulus N
    zkPC+1 => RR    :JMP(utilMULMOD)

    C               :MSTORE(SP++)
                    :JMP(readCode)

opEXP:

    %MAX_CNT_BINARY - CNT_BINARY - 5 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2              :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => A              :MLOAD(SP--)
    $ => B              :MLOAD(SP)
    B => D
    zkPC+1 => RR        :JMP(expAD)
    A                   :MSTORE(SP++)
    1024 - SP           :JMPN(stackOverflow)
                        :CALL(getLenBytes)
    GAS-10-50*A => GAS  :JMPN(outOfGas)
                        :JMP(readCode)

opSIGNEXTEND: ; following this impl https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/vm/src/evm/opcodes/functions.ts#L193

    %MAX_CNT_ARITH - CNT_ARITH - 6 :JMPN(outOfCountersArith)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => B          :MLOAD(SP--) ; sign byte --> sign bit = 8 * A + 7
    $ => D          :MLOAD(SP)   ; number to convert
    30 => A
    $               :LT, JMPC(opSIGNEXTENDEnd); if signByte is 31 or more, means basically let the number as it is
    B * 8  + 7 => D ; B is less than 31, no need for binary
    D*2 => RR
    zkPC+2                  :MSTORE(tmpSHXZkPC)
                            :JMP(@exp_num + RR)  ; signBit TODO table for shifting + multipliyng
    B => A
    $ => D          :MLOAD(SP)   ; number to convert

    ;Store mask
    1 => B
    $ => C          :SUB ; mask

    D => B               ; number to convert
    $ => B          :AND ; check sign bit
    0 => A
    $               :EQ, JMPC(opSIGNEXTENDPositive) ; If 0 means the sign bit was 0 --> positive
    C => A ; mask
    %MAX_UINT_256 => B
    $ => B          :XOR ; not mask
    D => A
    $ => D          :OR
                    :JMP(opSIGNEXTENDEnd)

opSIGNEXTENDPositive:
    C => B
    D => A
    $ => D          :AND

opSIGNEXTENDEnd:
    D               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
    GAS-5 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)