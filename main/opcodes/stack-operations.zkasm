/**
 * @link [https://www.evm.codes/#60?fork=berlin]
 * @zk-counters
 *  - dynamic binary: 4 * pushed bytes
 *  - dynamic steps: 120 * pushed bytes
 * @process-opcode
 *  - stack input: none
 *  - stack output: pushed value
 */
opPUSH1:
    ; number of bytes to push to D
    1 => D
    ; check is a deploy
    $ => B                          :MLOAD(isCreateContract)
    ; if is a deploy, get bytes from memory
    0 - B                           :JMPN(opAuxPUSHB)
    ; else, get bytes from stack
                                    :JMP(opAuxPUSHA)

opPUSH2:
    2 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH3:
    3 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH4:
    4 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH5:
    5 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH6:
    6 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH7:
    7 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH8:
    8 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH9:
    9 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH10:
    10 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH11:
    11 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH12:
    12 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH13:
    13 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH14:
    14 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH15:
    15 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH16:
    16 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH17:
    17 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH18:
    18 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH19:
    19 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH20:
    20 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH21:
    21 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH22:
    22 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH23:
    23 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH24:
    24 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH25:
    25 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH26:
    26 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH27:
    27 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH28:
    28 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH29:
    29 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH30:
    30 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH31:
    31 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)

opPUSH32:
    32 => D
    $ => B                          :MLOAD(isCreateContract)
    0 - B                           :JMPN(opAuxPUSHB)
                                    :JMP(opAuxPUSHA)


opAuxPUSHA:
    ; checks zk-counters
    %MAX_CNT_BINARY - CNT_BINARY - 6 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)
    
    ; check out-of-gas
    GAS - 3 => GAS      :JMPN(outOfGas)
    ; read bytes from calldata
                        :CALL(readPush); in: [D: bytes to read] out: [E: value read]
    ; store stack output                        
    E                   :MSTORE(SP++)
    ; check stack overflow
    1024 - SP           :JMPN(stackOverflow)
    ; rectify PC
    PC + D => PC
                        :JMP(readCode)

opAuxPUSHB:
    ; checks zk-counters
    %MAX_CNT_BINARY - CNT_BINARY - 6 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 600 :JMPN(outOfCountersStep)
    ; check is a create/create2
    $ => A                          :MLOAD(isCreate)
    0 - A                           :JMPN(opAuxPUSHBcreate)
    ; set bytes length to read to C
    D - 1 => C
    0 => A

opAuxPUSHBloop:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 4 :JMPN(outOfCountersBinary)
    %MAX_CNT_ARITH - CNT_ARITH - 4 :JMPN(outOfCountersArith)

    1 => D
    ; get position where data starts in the tx
    $ => HASHPOS                    :MLOAD(dataStarts)
    ; add PC to data starts to  point the bytes to read for the push
    HASHPOS + PC => HASHPOS
    PC + 1 => PC
    ; get memory pointer for hashing
    $ => E                          :MLOAD(batchHashDataId)
    $ => B                          :HASHK(E)
    ; accumulate hash value
    A + B => A
    ; decrease length for loop
    C - 1 => C                      :JMPN(opAuxPUSHBend)
                                    :CALL(SHLarith); in: [A: value, D: #bytes to left shift] out: [A: shifted result]
                                    :JMP(opAuxPUSHBloop)

opAuxPUSHBend:
    ; check out-of-gas
    GAS - 3 => GAS                  :JMPN(outOfGas)
    ; store stack output (value)
    A                               :MSTORE(SP++)
    ; check stack overflow
    1024 - SP                       :JMPN(stackOverflow)
                                    :JMP(readCode)

opAuxPUSHBcreate:
    ; PUSH in a create, we need to get bytes from memory (not calldata)
    ; checks zk-counters
    %MAX_CNT_ARITH - CNT_ARITH - 224 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 225 :JMPN(outOfCountersBinary)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 2 :JMPN(outOfCountersMemalign)

    ; get pushed bytes from previous context memory
    0 => B
    $ => CTX                        :MLOAD(originCTX)
    ; get offset call position
    $ => E                          :MLOAD(argsOffsetCall)
    ; increase current program counter (PC) to offset for getting pushed bytes to read
    E + PC => E
    ; set length to read to C for MOLADX call
    D => C
                                    :CALL(MLOADX);in: [E: offset, C: length] out: [A: value, E: new offset]
    ; increase to PC the length of the read bytes
    PC + C => PC
    ; put in the lowest significant bytes, align value to right
    32 - C => D
                                    :CALL(SHRarith)
    ; return to current context
    $ => CTX                        :MLOAD(currentCTX)
                                    :JMP(opAuxPUSHBend)

/**
 * @link [https://www.evm.codes/#80?fork=berlin]
 * @zk-counters
 *  - 120 steps
 * @process-opcode
 *  - stack input: value
 *  - stack output: duplicated value, original value
 */
opDUP1:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 1 => SP    :JMPN(stackUnderflow)

    ; check out-of-gas
    GAS - 3 => GAS  :JMPN(outOfGas)

    $ => A          :MLOAD(SP++); value => A
    ; check stack overflow
    1024 - SP       :JMPN(stackOverflow)
    ; store duplicated value
    A               :MSTORE(SP++)
    ; check stack overflow
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP2:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 2 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 2 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP3:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 3 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 3 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP4:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 4 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 4 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP5:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 5 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 5 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP6:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 6 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 6 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP7:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 7 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 7 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP8:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 8 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 8 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP9:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 9 => SP    :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 9 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP10:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 10 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 10 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP11:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 11 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 11 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP12:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 12 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 12 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP13:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 13 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 13 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP14:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 14 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 14 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP15:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 15 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 15 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opDUP16:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 16 => SP   :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    $ => A          :MLOAD(SP)
    SP + 16 => SP
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)
/**
 * @link [https://www.evm.codes/#90?fork=berlin]
 * @zk-counters
 *  - 120 steps
 * @process-opcode
 *  - stack input: value to swap a, value to swap b
 *  - stack output: swapped value a, swapped value b
 */
opSWAP1:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 2          :JMPN(stackUnderflow)

    ; check out-of-gas
    GAS - 3 => GAS  :JMPN(outOfGas)

    SP - 1 => SP
    $ => A          :MLOAD(SP--); value to swap a => A
    $ => B          :MLOAD(SP); value to swap b => B
    ; store swapped value a
    A               :MSTORE(SP++)
    ; check stack overflow
    1024 - SP       :JMPN(stackOverflow)
    ; store swapped value b
    B               :MSTORE(SP++)
    ; check stack overflow
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP2:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 3          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 2 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 2 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP3:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 4          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 3 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 3 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP4:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 5          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 4 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 4 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP5:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 6          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 5 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 5 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP6:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 7          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 6 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 6 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP7:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 8          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 7 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 7 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP8:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 9          :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 8 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 8 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP9:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 10         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 9 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 9 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP10:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 11         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 10 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 10 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP11:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 12         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 11 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 11 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP12:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 13         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 12 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 12 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP13:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 14         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 13 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 13 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP14:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 15         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 14 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 14 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP15:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 16         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 15 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 15 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

opSWAP16:

    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    SP - 17         :JMPN(stackUnderflow)
    GAS - 3 => GAS  :JMPN(outOfGas)
    SP - 1 => SP
    $ => A          :MLOAD(SP)
    SP - 16 => SP
    $ => B          :MLOAD(SP)
    A               :MSTORE(SP)
    SP + 16 => SP
    B               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)

/**
 * @link [https://www.evm.codes/#50?fork=berlin]
 * @zk-counters
 *  - 120 steps
 * @process-opcode
 *  - stack input: stack item
 *  - stack output: none
 */
opPOP:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 120 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 1 => SP    :JMPN(stackUnderflow)
    ; check out-of-gas
    GAS-2 => GAS    :JMPN(outOfGas)
                    :JMP(readCode)
