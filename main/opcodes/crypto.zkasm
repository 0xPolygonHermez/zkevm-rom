/**
 * @link [https://www.evm.codes/#20?fork=berlin]
 * @zk-counters
 *  - dynamic steps: 400 + 100 * length
 *  - dynamic keccaks: f(length)
 * @process-opcode
 *  - stack input: [offset, size]
 *  - stack output: [hash]
 */
opSHA3:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 400 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 2          :JMPN(stackUnderflow)

    ; check out-of-gas
    GAS - %KECCAK_GAS => GAS :JMPN(outOfGas)
    SP - 1 => SP
    $ => E          :MLOAD(SP--); [offset => E]
    $ => C          :MLOAD(SP) ; [size => C]

    ; store lastMemOffset for memory expansion gas cost
    E               :MSTORE(lastMemOffset)
    ; store lastMemLength for memory expansion gas cost
    ; compute memory expansion gas cost
    C               :MSTORE(lastMemLength), CALL(saveMem); in: [lastMemOffset, lastMemLength]
    ; check out-of-gas, dynamic
    ;${6*((C+31)/32)}
    C+31 => A
    ;(C+31)/32
    A               :MSTORE(arithA)
    32              :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => A          :MLOAD(arithRes1)
    ; Mul operation with Arith
    ; 6*((C+31)/32)
    6               :MSTORE(arithA)
    A               :MSTORE(arithB), CALL(mulARITH); in: [arithA, arithB] out: [arithRes1: arithA*arithB]
    $ => A          :MLOAD(arithRes1)
    GAS - A => GAS  :JMPN(outOfGas)  ; dynamic_gas = 6 * minimum_word_size + memory_expansion_cost

    ; check keccak counters
    C + 1           :MSTORE(arithA)
    136             :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => B          :MLOAD(arithRes1)
    $ => A          :MLOAD(cntKeccakPreProcess)
    ; checks keccak counters
    %MAX_CNT_KECCAK_F - CNT_KECCAK_F - A - 1 - B :JMPN(outOfCountersKeccak)

    ; new hash id
    $ => B           :MLOAD(lastHashKIdUsed)
    B + 1 => B       :MSTORE(lastHashKIdUsed)
    ; set bytes to hash at D
    32 => D
    ; A new hash with position 0 is started
    0 => HASHPOS

opSHA3Loop:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    C               :JMPZ(opSHA3End)
    C - 32          :JMPN(opSHA3Final)
    ; load next 32 bytes from memory
                    :CALL(MLOAD32); in: [E: offset] out: [A: value, E: new offset]
    ; save new offset at B
    E => B
    ; get current hash pointer
    $ => E          :MLOAD(lastHashKIdUsed)
    ; append A to hash pointer E
    A               :HASHK(E)
    ; restore new offset at E
    B => E
    C - 32 => C     :JMP(opSHA3Loop)

opSHA3Final:
    ; load next C bytes from memory
                    :CALL(MLOADX); in: [E: offset, C: length] out: [A: value, E: new offset]
    ; set #bytes to right shift
    32 - C => D     :CALL(SHRarith); in: [A: value, D: #bytes to right shift] out: [A: shifted result]
    ; get current hash pointer
    $ => E          :MLOAD(lastHashKIdUsed)
    ; set remaining bytes length to hash at D
    C => D
    ; append A to hash pointer E
    A               :HASHK(E)

opSHA3End:
    ; get current hash pointer
    $ => E          :MLOAD(lastHashKIdUsed)
    ; append A to hash pointer E
    HASHPOS         :HASHKLEN(E)
    ; compute hash
    $ => A          :HASHKDIGEST(E)
    ; store hash
    A               :MSTORE(SP++), JMP(readCode); [hash(A) => SP]
