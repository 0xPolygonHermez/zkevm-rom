
opSHA3:

    %MAX_CNT_ARITH - CNT_ARITH - 192 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 193 :JMPN(outOfCountersBinary)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 2 :JMPN(outOfCountersMemalign)
    $ => A           :MLOAD(cntKeccakPreProcess)
    %MAX_CNT_KECCAK_F - CNT_KECCAK_F - A - 2 :JMPN(outOfCountersKeccak)
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 10 :JMPN(outOfCountersPoseidon)
    %MAX_CNT_STEPS - STEP - 200 :JMPN(outOfCountersStep)

    SP - 2          :JMPN(stackUnderflow)
    SP - 1 => SP
    $ => E          :MLOAD(SP--) ; offset
    $ => C          :MLOAD(SP) ; length
    E               :MSTORE(lastMemOffset)
    C               :MSTORE(lastMemLength)
    ; gas
    GAS - 30 => GAS :JMPN(outOfGas); gas static = 30
                    :CALL(saveMem)
    ; Div operation with Arith
    ;${6*((C+31)/32)}
    C+31 => A
    ;(C+31)/32
    A               :MSTORE(arithA)
    32              :MSTORE(arithB)
                    :CALL(divARITH)
    $ => A          :MLOAD(arithRes1)
    ; Mul operation with Arith
    ; 6*((C+31)/32)
    6               :MSTORE(arithA)
    A               :MSTORE(arithB)
                    :CALL(mulARITH)
    $ => A          :MLOAD(arithRes1)
    GAS - A => GAS  :JMPN(outOfGas)  ; dynamic_gas = dynamic_gas = 6 * minimum_word_size + memory_expansion_cost
    ; new hash id
    $ => B           :MLOAD(lastHashKIdUsed)
    B + 1 => B       :MSTORE(lastHashKIdUsed)
    32 => D
    ; A new hash with position 0 is started
    0 => HASHPOS

opSHA3Loop:

    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    C - 1           :JMPN(opSHA3End)
    C - 32          :JMPN(opSHA3Final)
                    :CALL(MLOAD32)
    E => B
    $ => E          :MLOAD(lastHashKIdUsed)
    A               :HASHK(E)
    B => E
    C - 32 => C
                    :JMP(opSHA3Loop)
opSHA3Final:
                    :CALL(MLOADX)
    32 - C => D
                    :CALL(SHRarith)
    $ => E          :MLOAD(lastHashKIdUsed)
    C => D
    A               :HASHK(E)

opSHA3End:
    $ => E          :MLOAD(lastHashKIdUsed)
    HASHPOS         :HASHKLEN(E)

    ; Check keccak counters
    HASHPOS         :MSTORE(arithA)
    136             :MSTORE(arithB)
                    :CALL(divARITH)
    $ => B          :MLOAD(arithRes1)
    $ => A          :MLOAD(cntKeccakPreProcess)
    %MAX_CNT_KECCAK_F - CNT_KECCAK_F - A => A
    $               :LT, JMPC(outOfCountersKeccak)

    $ => A          :HASHKDIGEST(E)
    A               :MSTORE(SP++)
    1024 - SP       :JMPN(stackOverflow)
                    :JMP(readCode)
