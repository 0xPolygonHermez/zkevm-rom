/**
 * @link [https://www.evm.codes/#a0?fork=berlin]
 * @zk-counters
 *  - 100 steps
 *  - 1 binary
 * @process-opcode
 *  - stack input: [offset, size, topic]
 *  - stack output: none
 */
 VAR GLOBAL opLogAux
 VAR GLOBAL logNextHashPIdAux
opLOG0:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    ; check stack underflow
    SP - 2              :JMPN(stackUnderflow)

    ; check out-of-gas
    ; gas_cost = %LOG_GAS + %LOG_GAS * num_topics + 8 * data_size + mem_expansion_cost
    GAS - %LOG_GAS => GAS    :JMPN(outOfGas)

    ; check is static
    $ => A              :MLOAD(isStaticCall), JMPNZ(invalidStaticTx)

    SP - 1 => SP
    $ => E              :MLOAD(SP--) ; [offset => E]
    $ => C              :MLOAD(SP)   ; [size => C]
    ; store lastMemOffset for memory expansion gas cost
    E                   :MSTORE(lastMemOffset)
    ; store lastMemLength for memory expansion gas cost
    C                   :MSTORE(lastMemLength), CALL(saveMem); in: [lastMemOffset, lastMemLength]
    ; store number of topics
    0                   :MSTORE(numTopics)
    ; calculate data size gas cost => lastMemLength * 8
    %LOG_DATA_GAS       :MSTORE(arithA)
    C                   :MSTORE(arithB), CALL(mulARITH); in: [arithA, arithB] out: [arithRes1: arithA*arithB]
    $ => B              :MLOAD(arithRes1)
    GAS => A
    ; check out-of-gas
    $                   :LT,JMPC(outOfGas)
    GAS - B => GAS      :JMP(initLogLoop)
opLOG1:

    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    SP - 3              :JMPN(stackUnderflow)
    GAS - %LOG_GAS - %LOG_TOPIC_GAS => GAS    :JMPN(outOfGas)
    $ => A              :MLOAD(isStaticCall), JMPNZ(invalidStaticTx)
    SP - 1 => SP
    $ => E              :MLOAD(SP--)
    $ => C              :MLOAD(SP)
    E                   :MSTORE(lastMemOffset)
    C                   :MSTORE(lastMemLength), CALL(saveMem)
    1                   :MSTORE(numTopics)
    %LOG_DATA_GAS       :MSTORE(arithA)
    C                   :MSTORE(arithB), CALL(mulARITH)
    $ => B              :MLOAD(arithRes1)
    GAS => A
    ; check out-of-gas
    $                   :LT,JMPC(outOfGas)
    GAS - B => GAS      :JMP(initLogLoop)

opLOG2:

    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    SP - 4              :JMPN(stackUnderflow)
    GAS - %LOG_GAS - %LOG_TOPIC_GAS*2 => GAS    :JMPN(outOfGas)
    $ => A              :MLOAD(isStaticCall), JMPNZ(invalidStaticTx)
    SP - 1 => SP
    $ => E              :MLOAD(SP--)
    $ => C              :MLOAD(SP)
    E                   :MSTORE(lastMemOffset)
    C                   :MSTORE(lastMemLength), CALL(saveMem)
    2                   :MSTORE(numTopics)
    %LOG_DATA_GAS       :MSTORE(arithA)
    C                   :MSTORE(arithB), CALL(mulARITH)
    $ => B              :MLOAD(arithRes1)
    GAS => A
    ; check out-of-gas
    $                   :LT,JMPC(outOfGas)
    GAS - B => GAS      :JMP(initLogLoop)

opLOG3:

    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    SP - 5              :JMPN(stackUnderflow)
    GAS - %LOG_GAS - %LOG_TOPIC_GAS*3 => GAS    :JMPN(outOfGas)
    $ => A              :MLOAD(isStaticCall), JMPNZ(invalidStaticTx)
    SP - 1 => SP
    $ => E              :MLOAD(SP--)
    $ => C              :MLOAD(SP)
    E                   :MSTORE(lastMemOffset)
    C                   :MSTORE(lastMemLength), CALL(saveMem)
    3                   :MSTORE(numTopics)
    %LOG_DATA_GAS       :MSTORE(arithA)
    C                   :MSTORE(arithB), CALL(mulARITH)
    $ => B              :MLOAD(arithRes1)
    GAS => A
    ; check out-of-gas
    $                   :LT,JMPC(outOfGas)
    GAS - B => GAS      :JMP(initLogLoop)

opLOG4:

    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    SP - 6              :JMPN(stackUnderflow)
    GAS - %LOG_GAS - %LOG_TOPIC_GAS*4 => GAS    :JMPN(outOfGas)
    $ => A              :MLOAD(isStaticCall), JMPNZ(invalidStaticTx)
    SP - 1 => SP
    $ => E              :MLOAD(SP--)
    $ => C              :MLOAD(SP)
    E                   :MSTORE(lastMemOffset)
    C                   :MSTORE(lastMemLength), CALL(saveMem)
    4                   :MSTORE(numTopics)
    %LOG_DATA_GAS       :MSTORE(arithA)
    C                   :MSTORE(arithB), CALL(mulARITH)
    $ => B              :MLOAD(arithRes1)
    GAS => A
    ; check out-of-gas
    $                   :LT,JMPC(outOfGas)
    GAS - B => GAS      :JMP(initLogLoop)

initLogLoop:
    ; check poseidon counters
    ; 56 is the value used by the prover to increment poseidon counters depending on the hash length
    C                                                       :MSTORE(arithA)
    56                                                      :MSTORE(arithB), CALL(divARITH); in: [arithA, arithB] out: [arithRes1: arithA/arithB, arithRes2: arithA%arithB]
    $ => B                                                  :MLOAD(arithRes1)
    ; We count B and also the number of topics, as max is 4 topics of 32 bytes each 32*4/56 = 2.2 -> 3
    %MAX_CNT_POSEIDON_G - CNT_POSEIDON_G - 4 - B            :JMPN(outOfCountersPoseidon)
    %MAX_CNT_PADDING_PG - CNT_PADDING_PG - 4 - B      :JMPN(outOfCountersPadding)
    0 => HASHPOS
    32 => D
    $ => B                                                  :MLOAD(currentLogIndex)
    $ => A          :MLOAD(nextHashPId)
    ; Update nextHashPId
    A + 1           :MSTORE(nextHashPId)
    ; store nextHashPId to aux variable
    A               :MSTORE(logNextHashPIdAux)

logLoop:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    C               :JMPZ(opSaveTopicsInit)
    ; load next 32 bytes
    C - 32          :JMPN(opLogFinal)
                    :CALL(MLOAD32); in: [E: offset] out: [A: value]
    E               :MSTORE(opLogAux)
    $ => E          :MLOAD(logNextHashPIdAux)
    A               :HASHP(E)
    $ => E          :MLOAD(opLogAux)
    $${storeLog(B, 0, A)} ; storeLog(indexLog, isTopic, bytesToStore)
    C - 32 => C     :JMP(logLoop)

opLogFinal:
    ; load last C bytes
                    :CALL(MLOADX); in: [E: offset, C: length] out: [A: value, E: new offset]
    $${storeLog(B, 0, A)}; storeLog(indexLog, isTopic, bytesToStore)
    32 - C => D     :CALL(SHRarith); in: [A: value, D: #bytes to right shift] out: [A: shifted result]
    C => D
    $ => E          :MLOAD(logNextHashPIdAux)
    A               :HASHP(E)
                    :JMP(opSaveTopicsInit) ; instruction added to allow executing $$ function

opSaveTopicsInit:
    ; save topics
    $ => A          :MLOAD(numTopics)
    $ => E          :MLOAD(logNextHashPIdAux)
    32 => D

opSaveTopicsLoop:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    A                           :JMPZ(finishSaveTopics)
    ; check stack underflow
    SP - 1 => SP
    ; check out-of-gas
    $ => C                      :MLOAD(SP)   ; [topic => C]
    C                           :HASHP(E)
    $${storeLog(B, 1, C)}     ; storeLog(indexLog, isTopic, bytesToStore)
    A - 1 =>  A                 :JMP(opSaveTopicsLoop)

finishSaveTopics:
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    ; Compute hash of the log
    HASHPOS                     :HASHPLEN(E)
    $ => D                      :HASHPDIGEST(E), CALL(fillBlockInfoTreeWithLog); in: [D: linearPoseidon(log_data + log_topics)]
                                :JMP(readCode)