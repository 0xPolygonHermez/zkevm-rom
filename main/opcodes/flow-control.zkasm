
/**
 * @link [https://www.evm.codes/#56?fork=berlin]
 * @zk-counters
 *  - 32 binary
 *  - 120 steps
 * @process-opcode
 *  - stack input: [counter]
 *  - stack output: none
 */
opJUMP:
    ; checks zk-counters
    %MAX_CNT_BINARY - CNT_BINARY - 2 :JMPN(outOfCountersBinary)
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    ; check stack underflow
    SP - 1 => SP                    :JMPN(stackUnderflow)

    ; check out-of-gas
    GAS - %GAS_MID_STEP => GAS                  :JMPN(outOfGas)

    ; Check PC is a JUMPDEST
    $ => B                         :MLOAD(SP), JMP(checkJumpDest); [counter => PC]
/**
 * @link [https://www.evm.codes/#57?fork=berlin]
 * @zk-counters
 *  - 32 binary
 *  - 120 steps
 * @process-opcode
 *  - stack input: [counter, value]
 *  - stack output: none
 */
opJUMPI:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    %MAX_CNT_BINARY - CNT_BINARY - 1 :JMPN(outOfCountersBinary)
    ; check out-of-gas
    GAS - %GAS_SLOW_STEP => GAS                 :JMPN(outOfGas)

    SP - 2 => SP                    :JMPN(stackUnderflow)
    $ => B                          :MLOAD(SP); [value => B]
    0 => A
    $                               :EQ, JMPC(readCode)
    SP + 1 => SP
    ; Check PC is a JUMPDEST
    $ => B                         :MLOAD(SP--), JMP(checkJumpDest); [counter => PC]

checkJumpDest:
    ; if it is a deploy we have to check the data from the calldata (not the bytecode)
    $ => A                          :MLOAD(isCreateContract)
    -A                              :JMPN(checkJumpDestDeployment)
    $ => A                          :MLOAD(bytecodeLength)
    $                               :LT,JMPC(invalidJump)
    B => PC
    B => HASHPOS
    ; get hashP address pointer where contract bytecode is stored
    $ => E                          :MLOAD(contractHashId)
    $ => A                          :HASHP1(E)
    ; check if is a jumpDest (0x5B)
    0x5B => B
    $                               :EQ, JMPC(readCode, invalidJump)
checkJumpDestDeployment:
    ; check jumpDest from calldata
    $ => A                          :MLOAD(isCreate)
    -A                              :JMPN(checkJumpDestDeploymentCreate)
    ; get position where data starts in the tx
    $ => HASHPOS                    :MLOAD(dataStarts)
    ; add PC to data starts to point the bytes to read for the push
    B => PC
    HASHPOS + PC => HASHPOS
    ; get memory pointer for hashing
    $ => E                          :MLOAD(batchHashDataId)
    ; set number of bytes to hashK at D
    $ => A                          :HASHK1(E)
    ; check if is a jumpDest (0x5B)
    0x5B => B
    $                               :EQ, JMPC(readCode, invalidJump)

checkJumpDestDeploymentCreate:
    ; checks zk-counters
    %MAX_CNT_ARITH - CNT_ARITH - 224 :JMPN(outOfCountersArith)
    %MAX_CNT_BINARY - CNT_BINARY - 225 :JMPN(outOfCountersBinary)
    %MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 2 :JMPN(outOfCountersMemalign)
    ; get bytes from previous context memory
    $ => CTX                        :MLOAD(originCTX)
    ; get offset call position
    $ => E                          :MLOAD(argsOffsetCall)
    ; increase current program counter (PC) to offset for getting pushed bytes to read
    B => PC
    E + PC => E
    ; set bytes to read from memory at C
    1 => C                          :CALL(MLOADX); in: [E: offset, C: length] out: [A: value, E: new offset]
    $ => CTX                        :MLOAD(currentCTX)
    31 => D                         :CALL(SHRarith); in: [A: value, D: #bytes to right shift] out: [A: shifted result]
    ; check if is a jumpDest (0x5B)
    0x5B => B
    $                               :EQ, JMPC(readCode, invalidJump)

/**
 * @link [https://www.evm.codes/#58?fork=berlin]
 * @zk-counters
 *  - dynamic steps: 120 * pushed bytes
 * @process-opcode
 *  - stack input: none
 *  - stack output: [PC]
 */
opPC:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    ; check out-of-gas
    GAS - %GAS_QUICK_STEP => GAS      :JMPN(outOfGas)
    ; store current PC
    PC - 1              :MSTORE(SP++); [PC => SP]
    ; check stack overflow
    %CALLDATA_OFFSET - SP           :JMPN(stackOverflow, readCode)


/**
 * @link [https://www.evm.codes/#5B?fork=berlin]
 * @zk-counters
 *  - dynamic steps: 120 * pushed bytes
 * @process-opcode
 *  - stack input: none
 *  - stack output: none
 */
opJUMPDEST:
    ; checks zk-counters
    %MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)

    ; check out-of-gas
    GAS - %JUMP_DEST_GAS => GAS  :JMPN(outOfGas, readCode)
