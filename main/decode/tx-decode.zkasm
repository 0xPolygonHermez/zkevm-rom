INCLUDE "decode-utils.zkasm"
INCLUDE "decode-legacy.zkasm"
INCLUDE "decode-change-l2-block.zkasm"
decodeBatchData:
        ; check one keccak is available to begin processing the RLP
        $ => D                                          :MLOAD(cntKeccakPreProcess)
        %MAX_CNT_KECCAK_F - CNT_KECCAK_F - 1 - D        :JMPN(outOfCountersKeccak)

        ; A new hash with position 0 is started
        0 => HASHPOS, C

        ; Decode historicGER / 32 bytes
        32 => D                         :CALL(addBatchHashData)
        A                               :MSTORE(historicGER)
        ; Decode timestampLimit / 8 bytes
        8  => D                         :CALL(addBatchHashData)
        A                               :MSTORE(timestampLimit)
        ; Decode sequencerAddress / 20 bytes
        20 => D                         :CALL(addBatchHashData)
        A                               :MSTORE(sequencerAddr)
        ; Decode zkGASLimit / 8 bytes
        8 => D                          :CALL(addBatchHashData)
        A                               :MSTORE(zkGASLimit)
        ; Decode numBlob / 8 bytes
        8 => D                          :CALL(addBatchHashData)
        A                               :MSTORE(numBlob)

decodeTxByTypeLoop:
        ; Assign a different context for each transaction
        $ => A          :MLOAD(lastCtxUsed)
        A+1 => CTX      :MSTORE(lastCtxUsed)
        ; Decode tx type / 1 bytes
        1 => D                          :CALL(addBatchHashData)
        A                               :MSTORE(txType)
        A - %TX_TYPE_LEGACY             :JMPZ(decodeLegacyTx)
        A - %TX_TYPE_CHANGE_L2_BLOCK    :JMPZ(decodeChangeL2BlockTx)

finishDecodeTx:
        ; Increase number of transaction to process
        $ => A                          :MLOAD(pendingTxs)
        A + 1                           :MSTORE(pendingTxs)
        ; Check bytes parsed
        $ => B                          :MLOAD(batchDataLength)
        C => A
        A - B                           :JMPN(decodeTxByTypeLoop, finishDecode)

finishDecode:
        ; Set flag isDecoding to 0
        0               :MSTORE(isDecoding)
                        :JMP(txLoop)
;;;;;;;;;
;; Handler error decoding txs
;;;;;;;;;
invalidTxDecode:
; Append all missing 'batchData' to 'batchDataHash' bytes
        $ => B                          :MLOAD(batchDataLength)
        $ => C                          :MLOAD(batchHashPos)
        $${p = C}
        $ => HASHPOS                    :MLOAD(batchHashPos)
        $ => E                          :MLOAD(batchHashDataId)

appendTxs:
        B - C - 32                      :JMPN(finalAppendTxs)
        32 => D
        ${getTxs(p,D)} => A
        $${p = p + D}
        A                               :HASHP(E)
        C + D => C                      :JMP(appendTxs)

finalAppendTxs:
        B - C => D
        D - 1                           :JMPN(endAppendTxs)
        ${getTxs(p,D)} => A
        $${p = p + D}
        A                               :HASHK(E)
        C + D => C

endAppendTxs:
        HASHPOS                         :MSTORE(batchHashPos),JMP(processTxsEnd)
