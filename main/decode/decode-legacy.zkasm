decodeLegacyTx:

    ; Decode nonce / 8 bytes
    8 => D                          :CALL(addBatchHashData)
    A                               :MSTORE(txNonce)
    ; Decode gasPrice / 8 bytes
    32 => D                          :CALL(addBatchHashData)
    A                               :MSTORE(txGasPriceDecoded)
    ; Decode gasLimit / 8 bytes
    8 => D                          :CALL(addBatchHashData)
    A                               :MSTORE(txGasLimit)
    ; Decode isDeploy / 1 byte
    1 => D                          :CALL(addBatchHashData)
    A - 1                           :JMPNZ(isNotDeployment), MSTORE(isDeployment)
    1                               :MSTORE(isCreateContract)
isNotDeployment:
    ; Decode to / 20 bytes
    20 => D                         :CALL(addBatchHashData)
    A                               :MSTORE(txDestAddr)
    A                               :MSTORE(storageAddr)
    ; Decode value / 32 bytes
    32 => D                         :CALL(addBatchHashData)
    A                               :MSTORE(txValue)
    ; Decode data
    ; Data length / 3 bytes
    3 => D                          :CALL(addBatchHashData)
    ; Data / A bytes
    A => D, B                          :MSTORE(txCalldataLen)
    %CALLDATA_OFFSET => SP
    32 => D

readData:
    B - D                           :JMPN(readDataFinal), MSTORE(txDataRead)
    A                               :MSTORE(SP++), CALL(addBatchHashByteByByte)
    $ => B                          :MLOAD(txDataRead), JMP(readData)
readDataFinal:
    B - 1                           :JMPN(endData)
    32 - D => D                     :CALL(SHLarith)
    A                               :MSTORE(SP)
    32 - D => D                     :CALL(addBatchHashByteByByte)
endData:
    ; Decode effectivePercentage / 1 byte
    1 => D                          :CALL(addBatchHashData)
    A                               :MSTORE(effectivePercentage)

    ; Decode from / 20 bytes
    20 => D                         :CALL(addBatchHashData)
    A                               :MSTORE(txSrcAddr)
    A                               :MSTORE(txSrcOriginAddr)
                                    :JMP(finishDecodeTx)