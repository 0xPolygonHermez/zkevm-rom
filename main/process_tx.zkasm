INCLUDE "map-opcodes.zkasm"
INCLUDE "precompiled/selector.zkasm"

processTx:
        ; Get sigDataSize (VAR CTX)
        $ => HASHPOS                    :MLOAD(sigDataSize)
        ; We get a new hashId
        $ => E                          :MLOAD(lastTxHashId)
        E+1 => E                        :MSTORE(lastTxHashId)

;;;;;;;;;
;; Signaure Verification
;;;;;;;;;

        ; Check the signature
        $ => A                          :HASHKDIGEST(E)
        $ => B                          :MLOAD(txR)
        $ => C                          :MLOAD(txS)
        $ => D                          :MLOAD(txV)
        $ => A                          :ECRECOVER
        ; Check result is non-zero
        0 => B
        $                               :EQ,JMPC(invalidTx)
        A                               :MSTORE(txSrcAddr)
        A                               :MSTORE(txSrcOriginAddr)

;;;;;;;;;
;; Store init state
;;;;;;;;;

        SR                              :MSTORE(originSR) 
        SR                              :MSTORE(initSR)

;;;;;;;;
; Check chainID --> //TODO: chainID is defined as 64 bits which does not fit in the Field. If we consider just 63 bits it could be done directly (A - B), saving the EQ comaprison
;;;;;;;;
        $ => A                          :MLOAD(txChainId)                                       ; A: chainId tx
        $ => B                          :MLOAD(chainId)                                         ; B: chainId
        $                               :EQ,JMPC(endCheckChainId)                               ; If A == B --> endCheckChainId
        ; If A != B --> check defaultChainId
check_defaultChainId:
        %DEFAULT_SEQ_CHAINID => B       ; B: defaultChainId, A: chainId tx
        $                               :EQ,JMPC(endCheckChainId)                               ; If A == B --> endCheckChainId
                                        :JMP(invalidTx)                                    ; If A == B --> endCheckChainId

endCheckChainId:

; //TODO: move touchedAddress after intrinsic checks
;;;;;;;;
; Touched Addresses
;;;;;;;;
        $ => A                          :MLOAD(txSrcOriginAddr)
        ${touchedAddress(A,CTX)}


; TODO Check intrinsic gas first and invalidate transactoin if gas limit does not cover it

;;;;;;;;
; Check and update Nonce --> //TODO: same as chainID
;;;;;;;;

        $ => A, E                       :MLOAD(txSrcOriginAddr)                                 ; Address of the origin to A and E
        %SMT_KEY_NONCE => B
        0 => C                                                                                  ; 3rd parameter does not apply to nonce
        $ => A                          :SLOAD                                                  ; Load the nonce to A and C from storage
        $ => B                          :MLOAD(txNonce)
        $ => C                          :EQ
        C - 1                           :JMPN(invalidTx)                                        ; Compare "nonce storage" (A) and "nonce tx" (B). If A != B --> invalidTx
        B                               :ASSERT                                                 ; sanity check
        A+1 => D                                                                                ; Set to A the current address
        E => A
        %SMT_KEY_NONCE => B
        0 => C
        $ => SR                         :SSTORE                                                 ; Store the nonce plus one

;;;;;;;;
; Buy Gas
;;;;;;;;

        $ => A                          :MLOAD(txGas)                   ; Multiplies the txGas amd the txGasPrice
        $ => B                          :MLOAD(txGasPrice)
        ; Mul operation with Arith
        A                               :MSTORE(arithA)
        B                               :MSTORE(arithB)
                                        :CALL(mulARITH)
        $ => D                          :MLOAD(arithRes1)               ; gas*gasPrice in D

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                                                        ; balance key smt
        $ => A                          :SLOAD                          ; Original Balance in A
        D => B
        ; Balance - intrinsic_gas
        $                               :LT,JMPC(invalidTx)
        $ => D                          :SUB                            ; balance - instrinsic_gas in D
        D => A
        $ => B                          :MLOAD(txValue)
        ; Balance - intrinsic_gas - value 
        $                               :LT,JMPC(invalidTx)             ; If A is a negative value --> invalidTx
        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                        ; bakance key smt
        $ => SR                         :SSTORE

        ; TODO: create, do not have value
;;;;;;;;;
;; Store init state
;;;;;;;;;

        SR                              :MSTORE(initSR) 

;;;;;;;;
; Set the gas
;;;;;;;;
        ; TODO check tx has at least 21000 of gas
        $ => GAS                        :MLOAD(txGas)
        GAS - 21000 => GAS              :JMPN(invalidTx)

;;;;;;;;
; Gas calldata
;;;;;;;;
        $ => A                          :MLOAD(txCalldataLen)
        0 => B
        $                               :EQ,JMPC(txType)
        0 => D
        -1 => C

addGas:
        C + 1 => C
        0 => D
        1024 + C => SP
                                        :JMP(loopBytes)
loopBytes:
        ; Mul operation with Arith
        C                               :MSTORE(arithA)
        32                              :MSTORE(arithB)
                                        :CALL(mulARITH)
        $ => B                          :MLOAD(arithRes1)

        A - B - D - 1                   :JMPN(txType)
        32 - D - 1                      :JMPN(addGas)
        $ => B                          :MLOAD(SP) ; TODO: mask to get byte per byte
        ${getByte(B,D)} => B
        D + 1 => D
        B - 1                           :JMPN(add4Gas)
                                        :JMP(add16Gas)

add4Gas:
        GAS - 4 => GAS                  :JMPN(invalidTx)
                                        :JMP(loopBytes)

add16Gas:
        GAS - 16 => GAS                 :JMPN(invalidTx)
                                        :JMP(loopBytes)
;;;;;;;;;
;; Store init state after substracting intrinsic gas
;;;;;;;;;

        SR                              :MSTORE(initSR)

txType:
;;;;;;;;;;
;;;;; Tx type
;;;;;;;;;;
        $ => A                          :MLOAD(isCreateContract)
        0 - A                           :JMPN(getContractAddress)
        $ => A                          :MLOAD(txDestAddr)
        ${touchedAddress(A,CTX)}
        ; // TODO: check "0x000..000" when coming from a CALL
        10 => B
        $                               :LT,JMPC(selectorPrecompiled) ; precompiled smart contracts
        ; Check if destination address has bytecode to process the tx as a transaction or a call
        %SMT_KEY_SC_CODE => B
        0 => C
        $ => B                          :SLOAD
        0 => A
        $                               :EQ,JMPC(moveBalances)
                                        :JMP(callContract)

getContractAddress:
        ; A new hash with position 0 is started
        0 => HASHPOS
        ; We get a new hashId
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        $ => A                          :MLOAD(isCreate2)
        0 - A                           :JMPN(create2)
        $ => A                          :MLOAD(txSrcAddr)
        $ => B                          :MLOAD(txNonce)
        B - 0x80                        :JMPN(nonce1byte)
        $ => C                          :MLOAD(lengthNonce)
        1 => D
        0xc0 + 22 + C                   :HASHK(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHK(E)
        20 => D
        A                               :HASHK(E)
        1 => D
        0x80 + C                        :HASHK(E)
        C => D
        B                               :HASHK(E)
                                        :JMP(endContractAddress)

nonce1byte:
        1 => D
        0xc0 + 22                       :HASHK(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHK(E)
        20 => D
        A                               :HASHK(E)
        1 => D
        B - 1                           :JMPN(nonceIs0)
        B                               :HASHK(E)
                                        :JMP(endContractAddress)

nonceIs0:
        0x80                            :HASHK(E)

endContractAddress:
        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)
        12 => D
                                        :CALL(SHLarith)
                                        :CALL(SHRarith)
        A                               :MSTORE(createContractAddress)
        ; TODO: Check nonce != 0 OR already_bytecode ==> same behaviour as fail constructor
        ; TODO: check CREATE or deployment with constructor reverted
                                        :JMP(deploy)

create2:
        $ => C                          :MLOAD(txCalldataLen)
        ${(C+31)/32} => A
        ; Div operation with Arith
        ${C+31}         :MSTORE(arithA)
        32              :MSTORE(arithB)
                        :CALL(divARITH)
        $ => A          :MLOAD(arithRes1)

        GAS - 6*A => GAS                :JMPN(outOfGas)
        1024 => SP
                                        :JMP(loopCreate2)

loopCreate2:
        C - 1                           :JMPN(create2end)
        C - 32                          :JMPN(endloopCreate2)
        $ => A                          :MLOAD(SP++)
        32 => D
        A                               :HASHK(E)
        C - 32 => C
                                        :JMP(loopCreate2)

endloopCreate2:
        $ => A                          :MLOAD(SP)
        32 - C => D
                                        :CALL(SHRarith)
        C => D
        A                               :HASHK(E)

create2end:
        HASHPOS                         :HASHKLEN(E)
        $ => C                          :HASHKDIGEST(E)
        ; A new hash with position 0 is started
        0 => HASHPOS
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        ;keccak256( 0xff ++ address ++ salt ++ keccak256(init_code))[12:]
        1 => D
        0xff                            :HASHK(E)
        20 => D
        $ => A                          :MLOAD(txSrcAddr)
        A                               :HASHK(E)
        $ => B                          :MLOAD(salt)
        32 => D
        B                               :HASHK(E)
        32 => D
        C                               :HASHK(E)
        HASHPOS                         :HASHKLEN(E)
        $ => A                          :HASHKDIGEST(E)
        12 => D
                                        :CALL(SHLarith)
                                        :CALL(SHRarith)
        A                               :MSTORE(createContractAddress)

deploy:
        1024                            :MSTORE(SPr)
        0                               :MSTORE(SPw)
        0 => PC
        0 => SP
        GAS - 32000 => GAS              :JMPN(invalidDeploy)
                                        :JMP(readCode)

invalidDeploy:
        $ => A                          :MLOAD(isCreate)
        0 => B
        $                               :EQ,JMPC(invalidTx)
                                        :JMP(outOfGas)

readDeployBytecode:
        SP                              :MSTORE(SPw)
        $ => SP                         :MLOAD(SPr)
        ; Div operation with Arith
        PC               :MSTORE(arithA)
        32               :MSTORE(arithB)
                        :CALL(divARITH)
        $ => A          :MLOAD(arithRes1)
        $ => C          :MLOAD(arithRes2)

        SP + A => SP

        $ => B                          :MLOAD(txCalldataLen)
        B - PC                          :JMPN(endDeploy)
        $ => A                          :MLOAD(SP)
        $ => SP                         :MLOAD(SPw)
        ${getByte(A,C)} => B
        B => RR
        PC + 1 => PC
                                        :JMP(@mapping_opcodes + RR)

callContract:
        0 => PC
        0 => SP
                                        :JMP(readCode)

readByteCode:
        $ => A                          :MLOAD(txDestAddr)
        %SMT_KEY_SC_CODE => B
        0 => C
        $ => A                          :SLOAD
        ${getBytecodeLength(A)} => B
        B - PC                          :JMPN(endByteCode) ; // TODO: should be removed
        ${getBytecode(A,PC)} => B
        B => RR
        PC + 1 => PC
                                        :JMP(@mapping_opcodes + RR)

readCode:
        $ => A                          :MLOAD(isCreateContract)
        0 - A                           :JMPN(readDeployBytecode)
                                        :JMP(readByteCode)

endCode:
        $ => A                          :MLOAD(isCreateContract)
        0 - A                           :JMPN(endDeploy)
                                        :JMP(endByteCode)

endDeploy:
        ; TODO:: increase nonce before reading the contructor opcodes
        ; Update contract nonce
        $ => A                          :MLOAD(createContractAddress)
        %SMT_KEY_NONCE => B                                                                                  ; Constant for nonce
        0 => C
        1 => D
        $ => SR                         :SSTORE
        ;if txValue != 0 --> move balance to contractAddress
        A                               :MSTORE(txDestAddr)
        ; TODO: same as nonce, should be done before
        ; TODO zkasm should calculate the deployed bytecode
        ${getHashBytecode(A)} => D ; TODO: chain poseidon to compute hashBytecode. Jordi checks
        %SMT_KEY_SC_CODE => B
        0 => C
        $ => SR                         :SSTORE

endByteCode:

moveBalances:

;;;;;;;;
; evmCALL (Move Balances) ; TODO: move balances before processing
;;;;;;;;

        ; Decrement original balance
        $ => A                          :MLOAD(txSrcAddr)
        0 => B,C                                                                                ; balance key smt
        $ => A                          :SLOAD                                                  ; Original Balance in E
        $ => B                          :MLOAD(txValue)                                         ; A = E - C
        $                               :LT,JMPC(invalidTx)
        $ => D                          :SUB                                                    ; originalBalance -value in D
        $ => A                          :MLOAD(txSrcAddr)
        0 => B                                                                                  ; balance key smt
        $ => SR                         :SSTORE

        ; Increment destination balance
        $ => A                          :MLOAD(txDestAddr)
        0 => B                                                                                  ; balance key smt
        $ => C                          :SLOAD                                                  ; Original Balance in E
        $ => A                          :MLOAD(txValue)                                         ; E = A + C
        ; Add operation with Arith
        A                               :MSTORE(arithA)
        C                               :MSTORE(arithB)
                                        :CALL(addARITH)
        $ => D                          :MLOAD(arithRes1)

        $ => A                          :MLOAD(txDestAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE



;;;;;;;;
; Refund GAS
;;;;;;;;

        0 => A
        $ => B                          :MLOAD(gasRefund)
        B - 1                           :JMPN(refundGas)
        $ => A                          :MLOAD(txGas)
        A - GAS => A
        ; Div operation with Arith
        A               :MSTORE(arithA)
        2               :MSTORE(arithB)
                        :CALL(divARITH)
        $ => A          :MLOAD(arithRes1)
        A - B                           :JMPN(refundGas)
        B => A

refundGas:
        GAS + A => GAS
        GAS => A
        $ => B                          :MLOAD(txGasPrice)
        ;Mul operation with Arith
        A               :MSTORE(arithA)
        B               :MSTORE(arithB)
                        :CALL(mulARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                                                                                ; balance key smt
        $ => A                          :SLOAD                                                  ; Original Balance in A

        ; Add operation with Arith
        A               :MSTORE(arithA)
        D               :MSTORE(arithB)
                        :CALL(addARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE

;;;;;;;;
; Send remaining gas to sequencer
;;;;;;;;
sendGasSeq:
        $ => A                          :MLOAD(txGas)                                           ; Multiplies the txGas amd the txGasPrice
        A - GAS => A                                                                            ; A = txGas -GAS

        $ => B                          :MLOAD(txGasPrice)                                               ; value to pay the sequencer in D
        ; Mul operation with Arith
        A               :MSTORE(arithA)
        B               :MSTORE(arithB)
                        :CALL(mulARITH)
        $ => D          :MLOAD(arithRes1)

        $ => A          :MLOAD(sequencerAddr)
        0 => B,C                                                                ; Balance key smt
        $ => A          :SLOAD                                                  ; Original Balance in A
        ; Add operation with Arith
        A               :MSTORE(arithA)
        D               :MSTORE(arithB)
                        :CALL(addARITH)
        $ => D          :MLOAD(arithRes1)
        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE
                                        :JMP(processTxEnd)


invalidTx:
        $ => SR                         :MLOAD(originSR)
                                        :JMP(processTxEnd)
