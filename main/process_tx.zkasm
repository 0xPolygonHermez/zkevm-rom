INCLUDE "precompiled/selector.zkasm"

processTx:

        ; We get a new hashId
        $ => E                          :MLOAD(lastTxHashId)
        E+1 => E                        :MSTORE(lastTxHashId)
        0 => C

;;;;;;;;;
;; Signaure Verification
;;;;;;;;;

        ; Check the signature
        $ => A                          :HASHR(E)
        $ => B                          :MLOAD(txR)
        $ => C                          :MLOAD(txS)
        $ => D                          :MLOAD(txV)
        $ => A                          :ECRECOVER
        A                               :MSTORE(txSrcAddr)
        A                               :MSTORE(txSrcOriginAddr)
        ; TODO: bad signature ==> jump next txs
;;;;;;;;;
;; Store init state
;;;;;;;;;

        SR                              :MSTORE(initSR)

; TODO: Intrinsic checks ==> jump to next transaction, maintain SR
;;;;;;;;
; Check chainID --> //TODO: chainID is defined as 64 bits which does not fit in the Field. If we consider just 63 bits it could be done directly (A - B), saving the EQ comaprison
;;;;;;;;
        $ => A                          :MLOAD(txChainId)                                       ; A: chainId tx
        $ => B                          :MLOAD(chainId)                                         ; B: chainId

        ${comp_eq(A, B)} - 1            :JMPC(check_defaultChainId)                             ; If A != B --> check defaultChainId
                                        :JMP(endCheckChainId)                                   ; If A == B --> endCheckChainId
check_defaultChainId:
        $ => B                          :MLOAD(defaultChainId)                                  ; B: defaultChainId, A: chainId tx
        ${comp_eq(A, B)} - 1            :JMPC(invalidTx)                                        ; If A != B --> invalid transaction

                                        :JMP(endCheckChainId)                                   ; If A == B --> endCheckChainId

endCheckChainId:

; //TODO: move touchedAddress after intrinsic checks
;;;;;;;;
; Touched Addresses
;;;;;;;;
        $ => A                          :MLOAD(txSrcOriginAddr)
        ${touchedAddress(A,CTX)}

;;;;;;;;
; Check and update Nonce --> //TODO: same as chainID
;;;;;;;;

        $ => A, E                       :MLOAD(txSrcOriginAddr)                                 ; Address of the origin to a and D
        1 => B                                                                                  ; Constant for nonce
        0 => C                                                                                  ; 3rd parameter does not apply to nonce
        $ => A                          :SLOAD                                                  ; Load the nonce to A and C from storage
        $ => B                          :MLOAD(txNonce)
        ${comp_eq(A, B)} - 1            :JMPC(invalidTx)                                        ; Compare "nonce storage" (A) and "nonce tx" (B). If A != B --> invalidTx
        B                               :ASSERT                                                 ; sanity check
        A+1 => D                                                                                ; Set to A the current address
        E => A
        1 => B                                                                                  ; Constant for nonce
        0 => C
        $ => SR                         :SSTORE                                                 ; Store the nonce plus one

;;;;;;;;
; Buy Gas
;;;;;;;;

        $ => A                          :MLOAD(txGas)                                           ; Multiplies the txGas amd the txGasPrice
        $ => B                          :MLOAD(txGasPrice)
        0 => C
        0 => D                                                                                  ; Forces no overflow
        ${A*B} => D                     :ARITH                                                                                  ; gas*gasPrice in D

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C
        $ => E                          :SLOAD                                                  ; Original Balance in E
        D => C                                                                                  ; A = E - C
        ${E-C} => A
        31 => D
        $ => B                          :SHR                                                   ; //TODO: Could be replaces by: ${bitwise_and(A, 2**255)} + [ ${comp_eq(A, 0x80)} or (0x7F - B)]
        0x7F - B                        :JMPC(invalidTx)                                       ; If A is a negative value --> invalidTx
        1 => B
        0 => D
        E                                :ARITH                                                 ; originalBalance -gas*gasPrice in A

        A => D                                                                                  ; originalBalance -gas*gasPrice in D

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C
        $ => SR                         :SSTORE

        ; TODO: check intrinsic --> value + gas
        ; TODO: substract gas ==> initSR
        ; TODO: create, do not have value
;;;;;;;;;
;; Store init state
;;;;;;;;;

        SR                              :MSTORE(initSR)


;;;;;;;;
; Set the gas
;;;;;;;;
        ; // TODO: move at the beggining
        $ => GAS                        :MLOAD(txGas)
        GAS - 21000 => GAS

;;;;;;;;
; Gas calldata
;;;;;;;;
        $ => A                          :MLOAD(txNData) ; //TODO: renaming. Bytes calldata
        A - 1                           :JMPC(txType)
        0 => D
        -1 => C

addGas:
        C + 1 => C
        0 => D
        1024 + C => SP
                                        :JMP(loopBytes)
loopBytes:
        A - ${C*32} - D - 1             :JMPC(txType)
        ; TODO: ARITH
        32 - D - 1                      :JMPC(addGas)
        $ => B                          :MLOAD(SP) ; TODO: mask to get byte per byte
        ${getByte(B,D)} => B
        D + 1 => D
        B - 1                           :JMPC(add4Gas)
                                        :JMP(add16Gas)

add4Gas:
        GAS - 4 => GAS
                                        :JMP(loopBytes)

add16Gas:
        GAS - 16 => GAS
                                        :JMP(loopBytes)
txType:
;;;;;;;;;;
;;;;; Tx type
;;;;;;;;;;
        $ => A                          :MLOAD(txIsCreateContract)
        0 - A                           :JMPC(getContractAddress)
        $ => A                          :MLOAD(txDestAddr)
        ${touchedAddress(A,CTX)}
        ; // TODO: check "0x000..000" when coming from a CALL
        ${comp_lt(A, 10)} => B
        0 - B                           :JMPC(selectorPrecompiled) ; precompiled smart contracts
        2 => B
        0 => C
        $ => A                          :SLOAD
        0 => D

checkTxType:
        32 - D                          :JMPC(moveBalances)
        ${getByte(A,D)} => B    ; // TODO: comparison with 0
        0 - B                           :JMPC(callContract)
        D + 1 => D
                                        :JMP(checkTxType)

getContractAddress:
        ; We get a new hashId
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        $ => A                          :MLOAD(create2) ; TODO: renamig isCreate2
        0 - A                           :JMPC(create2)
        $ => A                          :MLOAD(txSrcAddr)
        $ => B                          :MLOAD(txNonce)
        B - 0x80                        :JMPC(nonce1byte)
        $ => C                          :MLOAD(lengthNonce)
        1 => D
        0xc0 + 22 + C                   :HASHW(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHW(E)
        20 => D
        A                               :HASHW(E)
        1 => D
        0x80 + C                        :HASHW(E)
        C => D
        B                               :HASHW(E)
                                        :JMP(endContractAddress)

nonce1byte:
        1 => D
        0xc0 + 22                       :HASHW(E) ; 1 byte length address, 20 bytes address, 1 bytes length nonce = 22 bytes
        0x94                            :HASHW(E)
        20 => D
        A                               :HASHW(E)
        1 => D
        B - 1                           :JMPC(nonce0)
        B                               :HASHW(E)
                                        :JMP(endContractAddress)

nonce0:
        0x80                            :HASHW(E)

endContractAddress:
                                        :HASHE(E)
        $ => A                          :HASHR(E)
        12 => D
        $ => A                          :SHL ; // TODO: Could be replaced by a bitwise and: ${bitwise_and(A, 2**160 - 1)
        $ => A                          :SHR
        A                               :MSTORE(createContractAddress)
        ; TODO: Check nonce != 0 OR already_bytecode ==> same behaviour as fail constructor
        ; TODO: check CREATE or deployment with constructor reverted
                                        :JMP(deploy)

create2:
        $ => C                          :MLOAD(txNData)
        ${(C+31)/32} => A ; // TODO: ARITH
        GAS - 6*A => GAS
        1024 => SP
                                        :JMP(loopCreate2)

loopCreate2:
        C - 1                           :JMPC(create2end)
        C - 32                          :JMPC(endloopCreate2)
        $ => A                          :MLOAD(SP++)
        32 => D
        A                               :HASHW(E)
        C - 32 => C
                                        :JMP(loopCreate2)

endloopCreate2:
        $ => A                          :MLOAD(SP)
        32 - C => D
        $ => A                          :SHR ; //TODO: mask, division
        C => D
        A                               :HASHW(E)

create2end:
                                        :HASHE(E)
        $ => C                          :HASHR(E)
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        ;keccak256( 0xff ++ address ++ salt ++ keccak256(init_code))[12:]
        1 => D
        0xff                            :HASHW(E)
        20 => D
        $ => A                          :MLOAD(txSrcAddr)
        A                               :HASHW(E)
        $ => B                          :MLOAD(salt)
        32 => D
        B                               :HASHW(E)
        32 => D
        C                               :HASHW(E)
                                        :HASHE(E)
        $ => A                          :HASHR(E)
        12 => D
        $ => A                          :SHL ; // TODO: Could be replaced by a bitwise and: ${bitwise_and(A, 2**160 - 1)
        $ => A                          :SHR
        A                               :MSTORE(createContractAddress)

deploy:
        1024                            :MSTORE(SPr)
        0                               :MSTORE(SPw)
        0 => PC
        0 => SP
        GAS - 32000 => GAS
                                        :JMP(readCode)

readDeployBytecode:
        SP                              :MSTORE(SPw)
        $ => SP                         :MLOAD(SPr)
        SP + ${PC/32} => SP
        ${PC%32} => C
        ; // TODO: ARITH
        $ => B                          :MLOAD(txNData)
        B - PC                          :JMPC(endDeploy)
        $ => A                          :MLOAD(SP)
        $ => SP                         :MLOAD(SPw)
        ${getByte(A,C)} => B
        ${addrOp(B)} => RR
        PC + 1 => PC
                                        :JMP(RR)

callContract:
        0 => PC
        0 => SP
                                        :JMP(readCode)

readByteCode:
        $ => A                          :MLOAD(txDestAddr)
        2 => B
        0 => C
        $ => A                          :SLOAD
        ${getBytecodeLength(A)} => B
        B - PC                          :JMPC(endByteCode) ; // TODO: should be removed
        ${getBytecode(A,PC)} => B
        ${addrOp(B)} => RR
        PC + 1 => PC
                                        :JMP(RR)
        ; // TODO: check PC opcode in YUL
readCode:
        $ => A                          :MLOAD(txIsCreateContract)
        0 - A                           :JMPC(readDeployBytecode)
                                        :JMP(readByteCode)

endCode:
        $ => A                          :MLOAD(txIsCreateContract)
        0 - A                           :JMPC(endDeploy)
                                        :JMP(endByteCode)

endDeploy:
        ; TODO:: increase nonce before reading the contructor opcodes
        ; Update contract nonce
        $ => A                          :MLOAD(createContractAddress)
        1 => B                                                                                  ; Constant for nonce
        0 => C
        1 => D
        $ => SR                         :SSTORE
        ;if txValue != 0 --> move balance to contractAddress
        A                               :MSTORE(txDestAddr)
        ; TODO: same as nonce, should be done before
        ${getHashBytecode(A)} => D ; TODO: chain poseidon to compute hashBytecode. Jordi checks
        2 => B
        0 => C
        $ => SR                         :SSTORE

endByteCode:

moveBalances:

;;;;;;;;
; evmCALL (Move Balances) ; TODO: move balances before processing
;;;;;;;;

        ; Decrement original balance
        $ => A                          :MLOAD(txSrcAddr)
        0 => B,C
        $ => E                          :SLOAD                                                  ; Original Balance in E
        $ => C                          :MLOAD(txValue)                                         ; A = E - C
        ${E-C} => A
        31 => D
        $ => B                          :SHR
        0x7F - B                        :JMPC(invalidTx)                                        ; If A is a negative value --> invalidTx
        1 => B
        0 => D
        E                               :ARITH                                                  ; originalBalance -value in A

        A => D                                                                                  ; originalBalance -value in D

        $ => A                          :MLOAD(txSrcAddr)
        0 => B,C
        $ => SR                         :SSTORE

        ; Increment destination balance
        $ => A                          :MLOAD(txDestAddr)
        0 => B,C
        $ => C                          :SLOAD                                                  ; Original Balance in E

        $ => A                          :MLOAD(txValue)                                         ; E = A + C
        1 => B
        0 => D
        ${A+C} => D                     :ARITH                                                  ; originalBalance + value in D

        $ => A                          :MLOAD(txDestAddr)
        0 => B,C
        $ => SR                         :SSTORE



;;;;;;;;
; Refund GAS
;;;;;;;;

        0 => A
        $ => B                          :MLOAD(gasRefund)
        B - 1                           :JMPC(refundGas)
        $ => A                          :MLOAD(txGas)
        A - GAS => A
        ${A/2} => A                     ; // TODO: Missing :ARITH, could be done by :SHR one bit
        A - B                           :JMPC(refundGas)
        B => A

refundGas:
        GAS + A => GAS
        GAS => A
        $ => B                          :MLOAD(txGasPrice)
        0 => C
        0 => D                                                                                  ; Forces no overflow
        ${A*B} => D                     :ARITH                                                  ; valueToReturn in D

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C
        $ => A                          :SLOAD                                                  ; Original Balance in A

        1 => B
        D => C
        0 => D
        ${A+C} => D                     :ARITH                                                  ; New Balance in D

        $ => A                          :MLOAD(txSrcOriginAddr)
        0 => B,C
        $ => SR                         :SSTORE

;;;;;;;;
; Send remaining gas to sequencer
;;;;;;;;

        $ => A                          :MLOAD(txGas)                                           ; Multiplies the txGas amd the txGasPrice
        A - GAS => A                                                                            ; A = txGas -GAS

        $ => B                          :MLOAD(txGasPrice)
        0 => C
        0 => D                                                                                  ; Forces no overflow
        ${A*B} => D                     :ARITH                                                  ; value to pay the sequencer in D

        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C
        $ => A                          :SLOAD                                                  ; Original Balance in A

        1 => B
        D => C
        0 => D
        ${A+C} => D                     :ARITH                                                   ; New Balance in D

        $ => A                          :MLOAD(sequencerAddr)
        0 => B,C
        $ => SR                         :SSTORE


terminateTX:

                                        :JMP(processTxEnd)
; TODO: should be an invalid intrinsic txs and (revert, out-of-gas, assert, invalid opcode )
invalidTx:
        $ => A                          :MLOAD(originCTX)
        0 - A                           :JMPC(invalidTxOrigin) ; TODO:: invalid call with depth > 0
        $ => SR                         :MLOAD(initSR)
                                        :JMP(terminateTX)

invalidTxOrigin:
        A => CTX
                                        :JMP(invalidTx)
