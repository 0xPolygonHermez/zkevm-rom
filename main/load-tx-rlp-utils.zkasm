;@info: Add 'data' bytes to batchHashData. batchHashData = H_keccak( transactions )
;@in: D: length of the hash
addBatchHashData:
        $ => HASHPOS                    :MLOAD(batchHashPos)
        $ => E                          :MLOAD(batchHashDataId)
        A                               :HASHK(E)
        HASHPOS                         :MSTORE(batchHashPos)
        C => HASHPOS
        $ => E                          :MLOAD(lastHashKIdUsed), RETURN

;; get D bytes from transaction bytes
getTxBytes:
        $ => A                          :MLOAD(batchL2DataLength)
        $ => B                          :MLOAD(batchL2DataParsed)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${p = p + D}
                                        :RETURN

;; Add bytes to generate ethereum transaction hash. transactionHash = H_keccak(rlp(nonce, gasprice, gaslimit, to, value, data, chainId, 0, 0))
addHashTx:
        $ => A                          :MLOAD(txRLPLength)
        A - HASHPOS - D                 :JMPN(invalidTxRLP)
addHashTxBegin:
        $ => A                          :MLOAD(batchL2DataLength)
        $ => B                          :MLOAD(batchL2DataParsed)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${p = p + D}
        A                               :HASHK(E)
        C + D => C                      :RETURN

;; Check short value is over 127. Error RLP: single byte < 0x80 are not prefixed
checkShortRLP:
        D - 1                           :JMPNZ(skipCheckShort)
        A - %MIN_VALUE_SHORT            :JMPN(invalidTxRLP)

skipCheckShort:
                                        :RETURN

;; Check long list/value is over 55 bytes long. Error RLP: encoded list too short
checkLongRLP:
        A - %MIN_BYTES_LONG             :JMPN(invalidTxRLP)
                                        :RETURN

;; Check short value is over 127. Error RLP: single byte < 0x80 are not prefixed
checkShortDataRLP:
        $ => B                          :MLOAD(txCalldataLen)
        B - 1                           :JMPNZ(skipCheckShortData)
        A - %MIN_VALUE_SHORT            :JMPN(invalidTxRLP)

skipCheckShortData:
                                        :RETURN

;; Check non-negative integer RLP representation has no leading zeros and it is encoded in its shortest form
VAR GLOBAL tmpVarAcheckNonLeadingZeros
VAR GLOBAL tmpVarZkPCcheckNonLeadingZeros
checkNonLeadingZeros:
        RR              :MSTORE(tmpVarZkPCcheckNonLeadingZeros)
        A               :MSTORE(tmpVarAcheckNonLeadingZeros)
        ; set value to B and get its
        A => B          :CALL(getLenBytes) ; in: [B: number] out: [A: byte length of B]
        ; check (bytes length - encoded length) are not equal
        D - A           :JMPNZ(invalidTxRLP)
        $ => RR         :MLOAD(tmpVarZkPCcheckNonLeadingZeros)
        $ => A          :MLOAD(tmpVarAcheckNonLeadingZeros), RETURN