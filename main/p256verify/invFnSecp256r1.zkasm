;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; invFnSecp256r1:
;;             in: A
;;             out: A = A⁻¹ (mod SECP256R1_N)
;;
;;  PRE: Input is assumed to be in Fn*
;; POST: The result is in Fn*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RESOURCES:
; -----------------------------
; [steps: 11, bin: 1, arith: 2]
; -----------------------------

VAR GLOBAL invFnSecp256r1_tmp

invFnSecp256r1:
        ; 1] Compute and check the inverse over Z
        ; A·A⁻¹ + [0] = [D]·2²⁵⁶ + [E]
        ${var _invFnSecp256r1_A = inverseFnEc_secp256r1(A)} => B :MSTORE(invFnSecp256r1_tmp)
        0 => C
        $${var _invFnSecp256r1_AAinv = A * _invFnSecp256r1_A}
        ${_invFnSecp256r1_AAinv >> 256} => D
        ${_invFnSecp256r1_AAinv} => E :ARITH

        ; 2] Check it over Fn, that is, it must be satisfied that:
        ; [SECP256R1_N]·[(A·A⁻¹) / SECP256R1_N] + [1] = D·2²⁵⁶ + E
        %SECP256R1_N => A
        ${_invFnSecp256r1_AAinv / const.SECP256R1_N} => B       ; quotient  (256 bits)
        1 => C                                                  ; remainder
        E :ARITH

        ; 3] Check that the result is lower than SECP256R1_N
        A => B
        $ => A          :MLOAD(invFnSecp256r1_tmp)
        1               :LT, RETURN