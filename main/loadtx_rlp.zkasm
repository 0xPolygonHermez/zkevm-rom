
loadTx_rlp:

        ; Save the position of the last hash (oldHashPos --> VAR GLOBAL)
        HASHPOS                         :MSTORE(oldHashPos)
        ; A new hash with position 0 is started
        0 => HASHPOS

        ; We get a new hashId
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        0 => C


;;;;;;;;;
;; List Length
;;;;;;;;;

        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A - 0xc0                        :JMPN(invalidTxRLP)
        A - 0xf8                        :JMPN(shortList)

longList:
        A - 0xf7 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
                                        :JMP(endList)
shortList:
        A - 0xc0 => A

endList:
        A + C                           :MSTORE(txListLength)


;;;;;;;;;
;; Nonce READ
;;;;;;;;;


nonceREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPN(endNonce)
        A - 0x81                        :JMPN(nonce0)
        A - 0x89                        :JMPN(shortNonce)
                                        :JMP(invalidTxRLP)

nonce0:
        0                               :MSTORE(lengthNonce)
        0 => A
                                        :JMP(endNonce)

shortNonce:
        A - 0x80 => D
        D                               :MSTORE(lengthNonce)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C

endNonce:
        A                               :MSTORE(txNonce)


;;;;;;;;;
;; GasPrice READ
;;;;;;;;;


gasPriceREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C

        A - 0x80                        :JMPN(endGasPrice)
        A - 0x81                        :JMPN(gasPrice0)
        A - 0xa1                        :JMPN(shortGasPrice)
                                        :JMP(invalidTxRLP)

gasPrice0:
        0 => A
                                        :JMP(endGasPrice)

shortGasPrice:
        A - 0x80 => D
        D - 1                           :JMPN(endGasPrice)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C+D => C


endGasPrice:
        A                               :MSTORE(txGasPrice)


;;;;;;;;;
;; Gas READ
;;;;;;;;;


gasREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPN(endGas)
        A - 0x81                        :JMPN(gas0)
        A - 0xa1                        :JMPN(shortGas)
                                        :JMP(invalidTxRLP)

gas0:
        0 => A                          :JMPN(endGas)

shortGas:
        A - 0x80 => D
        D - 1                           :JMPN(endGas)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C+D => C

endGas:
        A                               :MSTORE(txGas)

;;;;;;;;;
;; To READ
;;;;;;;;;


toREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPN(invalidTxRLP)
        A - 0x81                        :JMPN(noTo)
        A - 0x94                        :JMPN(invalidTxRLP)
        A - 0x95                        :JMPN(shortTo)
                                        :JMP(invalidTxRLP)


noTo:
        1                               :MSTORE(txIsCreateContract)
                                        :JMP(endTo)

shortTo:
        A - 0x80 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A                               :MSTORE(txDestAddr)
        A                               :MSTORE(storageAddr)

endTo:


;;;;;;;;;
;; Value READ
;;;;;;;;;


valueREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C

        A - 0x80                        :JMPN(endValue)
        A - 0x81                        :JMPN(value0)
        A - 0xa1                        :JMPN(shortValue)
                                        :JMP(invalidTxRLP)

value0:
        0 => A
                                        :JMPN(endValue)

shortValue:
        A - 0x80 => D
        D - 1                           :JMPN(endValue)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C


endValue:
        A                               :MSTORE(txValue)

;;;;;;;;;
;; Data READ
;;;;;;;;;


dataREAD:
        1 => D
        1024 => SP
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPN(veryShortData)
        A - 0x81                        :JMPN(endData)
        A - 0xb8                        :JMPN(shortData)
        A - 0xc0                        :JMPN(longData)
                                        :JMP(invalidTxRLP)

veryShortData:
        1                               :MSTORE(txNData)
        31 => D
        ${A << (D*8)} => A
        A                               :MSTORE(SP++)
                                        :JMP(endData)

shortData:
        A - 0x80 => B                   :MSTORE(txNData)
                                        :JMP(readData)

longData:
        A - 0xb7 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C+D => C
        A => B                          :MSTORE(txNData)

readData:
        32 => D
        B - D                           :JMPN(readDataFinal)
        B - D                           :MSTORE(txDataRead)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C
        A                               :MSTORE(SP++)
        $ => B                          :MLOAD(txDataRead)
                                        :JMP(readData)


readDataFinal:
        B - 1                           :JMPN(endData)
        B => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C + D => C

        32-D => D
        ${A << (D*8)} => A
        A                               :MSTORE(SP)

endData:


;;;;;;;;;
;; chainId READ
;;;;;;;;;


chainREAD:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C+D => C
        A - 0x80                        :JMPN(endChainId)
        A - 0x81                        :JMPN(chanId0)
        A - 0x89                        :JMPN(shortChainId)
                                        :JMP(invalidTxRLP)

chanId0:
        0 => A
                                        :JMPN(endChainId)

shortChainId:
        A - 0x80 => D
        D - 1                           :JMPN(endChainId)
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHK(E)    ; Main Hash
        C+D => C

endChainId:
        A                               :MSTORE(txChainId)

;;;;;;;;;
;; Data Last 2 values
;;;;;;;;;

        2 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A - 0x8080                      :JMPN(invalidTxRLP)
        0x8080 - A                      :JMPN(invalidTxRLP)
        A                               :HASHK(E)
        C+D => C

;;;;;;;;;
;; Size Verification
;;;;;;;;;
        C  => A
        $  => B                         :MLOAD(txListLength)
        A - B                           :JMPN(invalidTxRLP)
        B - A                           :JMPN(invalidTxRLP)
        ; check ctx.hashK[addr].data.length == HASHPOS and ctx.hashK[addr].digest = keccak256(data)
        HASHPOS                         :HASHKLEN(E)

;;;;;;;;;
;; r READ
;;;;;;;;;

rREADTx:
        32 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txR)
        C+D => C

;;;;;;;;;
;; s READ
;;;;;;;;;

sREADTx:
        32 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txS)
        C+D => C

;;;;;;;;;
;; v READ
;;;;;;;;;

vREADTx:
        1 => D
        $ => A                          :MLOAD(txsListLength)
        $ => B                          :MLOAD(batchL2DataRead)
        A - B - C - D                   :JMPN(invalidTxRLP)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txV)
        C+D => C

;;;;;;;;;
;; Update bytes read and txs to be processed
;;;;;;;;;
        $ => A                          :MLOAD(batchL2DataRead)
        A + C => A                      :MSTORE(batchL2DataRead)
        $ => A                          :MLOAD(pendingTxs)
        A + 1 => A                      :MSTORE(pendingTxs)
        ; Save sigDataSize (sigDataSize --> VAR CTX)
        HASHPOS                         :MSTORE(sigDataSize)
        ; Get oldHashPos (saved at the beginning of this file)
        $ => HASHPOS                    :MLOAD(oldHashPos)
                                        :JMP(txLoopRLP)

invalidTxRLP:
                                        :JMP(processTxsEnd)
