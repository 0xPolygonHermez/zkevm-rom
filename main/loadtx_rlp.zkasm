
loadTx_rlp:

        ; We get a new hashId
        $ => E                          :MLOAD(lastHashIdUsed)
        E+1 => E                        :MSTORE(lastHashIdUsed)
        0 => C


;;;;;;;;;
;; List Length
;;;;;;;;;

        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A - 0xc0                        :JMPC(invalidTxRLP)
        A - 0xf8                        :JMPC(shortList)

longList:
        A - 0xf7 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
                                        :JMP(endList)
shortList:
        A - 0xc0 => A

endList:
        A + C                           :MSTORE(txListLength);


;;;;;;;;;
;; Nonce READ
;;;;;;;;;


nonceREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPC(endNonce)
        A - 0x89                        :JMPC(shortNonce)
                                        :JMP(invalidTxRLP)
shortNonce:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C

endNonce:
        A                               :MSTORE(txNonce)


;;;;;;;;;
;; GasPrice READ
;;;;;;;;;


gasPriceREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C

        A - 0x80                        :JMPC(endGasPrice)
        A - 0xa1                        :JMPC(shortGasPrice)
                                        :JMP(invalidTxRLP)
shortGasPrice:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C+D => C


endGasPrice:
        A                               :MSTORE(txGasPrice)


;;;;;;;;;
;; Gas READ
;;;;;;;;;


gasREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPC(endGas)
        A - 0xa1                        :JMPC(shortGas)
                                        :JMP(invalidTxRLP)
shortGas:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C+D => C

endGas:
        A                               :MSTORE(txGas)

;;;;;;;;;
;; To READ
;;;;;;;;;


toREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A - 0x80                        :JMPC(invalidTxRLP)
        A - 0x81                        :JMPC(noTo)
        A - 0x94                        :JMPC(invalidTxRLP)
        A - 0x95                        :JMPC(shortTo)
                                        :JMP(invalidTxRLP)


noTo:
        1                               :MSTORE(txIsCreateContract)
                                        :JMP(endTo)

shortTo:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A                               :MSTORE(txDestAddr)
;        0                              :MSTORE(txIsCreateContract)

endTo:


;;;;;;;;;
;; Value READ
;;;;;;;;;


valueREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C

        A - 0x80                        :JMPC(endValue)
        A - 0xa1                        :JMPC(shortValue)
                                        :JMP(invalidTxRLP)
shortValue:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C


endValue:
        A                               :MSTORE(txValue)

;;;;;;;;;
;; Data READ
;;;;;;;;;


dataREAD:
        1 => D
        1024 => SP
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                                :HASHW(E)    ; Main Hash
        C + D => C
        A - 0x80                         :JMPC(veryShortData)
        A - 0x81                         :JMPC(endData)
        A - 0xb8                         :JMPC(shortData)
        A - 0xc0                         :JMPC(longData)
                                         :JMP(invalidTxRLP)

veryShortData:
        1                               :MSTORE(txNData)
        31 => D
        $ => A                          :SHL
        A                               :MSTORE(SP++)
                                        :JMP(endData)

shortData:
        A - 0x80 => B                   :MSTORE(txNData)
                                        :JMP(readData)

longData:
        A - 0xb8 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C+D => C
        A => B                          :MSTORE(txNData)

readData:
        32 => D
        B - D                           :JMPC(readDataFinal)
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C
        A                               :MSTORE(SP++)
        B - D => B                      :JMP(readData)


readDataFinal:
        B - 1                           :JMPC(endData)
        B => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C + D => C

        32-D => D
        $ => A                          :SHL
        A                               :MSTORE(SP)

endData:


;;;;;;;;;
;; chainId READ
;;;;;;;;;


chainREAD:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C+D => C
        A - 0x80                        :JMPC(endChainId)
        A - 0x89                        :JMPC(shortChainId)
                                        :JMP(invalidTxRLP)
shortChainId:
        A - 0x80 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :HASHW(E)    ; Main Hash
        C+D => C

endChainId:
        A                               :MSTORE(txChainId)

;;;;;;;;;
;; Data Last 2 values
;;;;;;;;;

        2 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A - 0x8080                      :JMPC(invalidTxRLP)
        0x8080 - A                      :JMPC(invalidTxRLP)
        A                               :HASHW(E)
        C+D => C

;;;;;;;;;
;; Size Verification
;;;;;;;;;
        C  => A
        $  => B                         :MLOAD(txListLength)
        A - B                           :JMPC(invalidTxRLP)
        B - A                           :JMPC(invalidTxRLP)
                                        :HASHE(E)

;;;;;;;;;
;; r READ
;;;;;;;;;

rREADTx:
        32 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txR)
        C+D => C

;;;;;;;;;
;; s READ
;;;;;;;;;

sREADTx:
        32 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txS)
        C+D => C

;;;;;;;;;
;; v READ
;;;;;;;;;

vREADTx:
        1 => D
        ${getTxs(p,D)} => A
        $${ p = p + D}
        A                               :MSTORE(txV)
        C+D => C

;;;;;;;;;
;; Update bytes read and txs to be processed
;;;;;;;;;
        $ => A                          :MLOAD(batchL2DataRead)
        A + C => A                      :MSTORE(batchL2DataRead)
        $ => A                          :MLOAD(pendingTxs)
        A + 1 => A                      :MSTORE(pendingTxs)
                                        :JMP(txLoopRLP)

invalidTxRLP:
                                        :JMP(processTxsEnd)
