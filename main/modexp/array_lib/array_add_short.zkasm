;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_add_short:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1],   the second input
;;
;;          output:
;;                  · out = inA + inB, with len(out) <= C + 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_add_short(a: bigint[], b: bigint, B: bigint): bigint[] {
;     const alen = a.length;
;     let result = new Array<bigint>(alen);
;     let sum = 0n;
;     let carry = b;
;     for (let i = 0; i < alen; i++) {
;         sum = a[i] + carry;
;         carry = sum >= B ? 1n : 0n;
;         result[i] = sum - carry * B;
;     }

;     if (carry === 1n) {
;         result.push(carry);
;     }
;     return result;
; }

VAR GLOBAL array_add_short_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_add_short_inB
VAR GLOBAL array_add_short_out[%ARRAY_MAX_LEN_PLUS_ONE]
VAR GLOBAL array_add_short_len_inA
VAR GLOBAL array_add_short_len_out

VAR GLOBAL array_add_short_carry

VAR GLOBAL array_add_short_RR

array_add_short:
        %MAX_CNT_BINARY - CNT_BINARY     - 2*C  - 1       :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 6 - 12*C - 8       :JMPN(outOfCountersStep)

        RR              :MSTORE(array_add_short_RR)

        C               :MSTORE(array_add_short_len_inA)

        0 => E ; index in loops
        $ => A          :MLOAD(array_add_short_inB)
        A               :MSTORE(array_add_short_carry)

array_add_short_loopZero2inA:
        ; The result will be stored as D·base + C

        0 => D  ; reset the carry chunk

        ; a[i] + carry, where a[i] ∈ [0,base-1]:
        ;       · If i = 0, then carry = inB and then the number cannot be GT base + (base - 2), two chunks
        ;       · Otherwise, the number cannot be GT base, two chunks
        $ => A          :MLOAD(array_add_short_inA + E)
        $ => B          :MLOAD(array_add_short_carry)
        $ => C          :ADD, JMPNC(__array_add_short_continue1)
        1 => D
                        __array_add_short_continue1:

        C               :MSTORE(array_add_short_out + E)
        D               :MSTORE(array_add_short_carry)

        E + 1 => E,A
        $ => B          :MLOAD(array_add_short_len_inA)
        B - A           :JMPZ(array_add_short_check_carry, array_add_short_loopZero2inA)

array_add_short_check_carry:
        D => A
        A               :JMPZ(__array_add_short_continue2)
        ; In this case, the carry = 1 and we should append it to the result
        1               :MSTORE(array_add_short_out + E)
        E + 1           :MSTORE(array_add_short_len_out)
                        :JMP(array_add_short_end)
                        __array_add_short_continue2:
         E               :MSTORE(array_add_short_len_out)

array_add_short_end:
        $ => RR         :MLOAD(array_add_short_RR)
                        :RETURN