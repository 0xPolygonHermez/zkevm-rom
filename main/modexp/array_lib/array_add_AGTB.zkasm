;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  PRE: len(inA) >= len(inB)
;; POST: out is trimmed
;;
;; array_add_AGTB:
;;             in:
;;                  · C ∈ [1, 64], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · out = inA + inB, with len(out) <= C + 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_add_AGTB(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     const alen = a.length;
;     const blen = b.length;
;     let result = new Array<bigint>(alen);
;     let sum = 0n;
;     let carry = 0n;
;     for (let i = 0; i < blen; i++) {
;         sum = a[i] + b[i] + carry;
;         carry = sum >= base ? 1n : 0n;
;         out[i] = sum - carry * base;
;     }
;     for (let i = blen; i < alen; i++) {
;         sum = a[i] + carry;
;         carry = sum == base ? 1n : 0n; // the past carry is at most 1n
;         out[i] = sum - carry * base;
;     }

;     if (carry === 1n) {
;         result.push(carry);
;     }
;     return result;
; }

; NOTE: It's unoptimized for the case where len(inB) = 1. Use array_add_short instead.

VAR GLOBAL array_add_AGTB_inA[%ARRAY_MAX_LEN_DOUBLED]
VAR GLOBAL array_add_AGTB_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_add_AGTB_out[%ARRAY_MAX_LEN_DOUBLED] ; This cannot be bigger because we use it for division checking
VAR GLOBAL array_add_AGTB_len_inA
VAR GLOBAL array_add_AGTB_len_inB
VAR GLOBAL array_add_AGTB_len_out

VAR GLOBAL array_add_AGTB_carry

VAR GLOBAL array_add_AGTB_RR

array_add_AGTB:
        %MAX_CNT_BINARY - CNT_BINARY -  1 -  2*%ARRAY_MAX_LEN_MINUS_ONE      - 2                                          :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 10 - 11*%ARRAY_MAX_LEN_MINUS_ONE  - 2 - 8 - 5*%ARRAY_MAX_LEN_DOUBLED_MINUS_ONE - 3 :JMPN(outOfCountersStep)

        RR              :MSTORE(array_add_AGTB_RR)

        C               :MSTORE(array_add_AGTB_len_inA)
        D               :MSTORE(array_add_AGTB_len_inB)

array_add_AGTB_first_iteration:
        ; a[0] + b[0], where a[0],b[0] ∈ [0,base-1]: This number cannot be GT base + (base - 2), two chunks
        $ => A          :MLOAD(array_add_AGTB_inA)
        $ => B          :MLOAD(array_add_AGTB_inB)
        $               :ADD, MSTORE(array_add_AGTB_out), JMPNC(__array_add_AGTB_continue_1)
        ;-----------------
        1 => D          :MSTORE(array_add_AGTB_carry), JMP(__array_add_AGTB_continue_2)
                        __array_add_AGTB_continue_1:
        0 => D          :MSTORE(array_add_AGTB_carry)
                        __array_add_AGTB_continue_2:
        ;-----------------

        1 => E
        $ => B          :MLOAD(array_add_AGTB_len_inB)
        B - E           :JMPZ(array_add_AGTB_loop_index_check)

array_add_AGTB_loopZero2inB:
        ; a[i] + b[i], where a[i],b[i] ∈ [0,base-1]: This number cannot be GT base + (base - 2), two chunks
        $ => A          :MLOAD(array_add_AGTB_inA + E)
        $ => B          :MLOAD(array_add_AGTB_inB + E)
        $ => B          :ADD, JMPNC(__array_add_AGTB_continue_3)
        ;-----------------
        1 => D          :JMP(__array_add_AGTB_continue_4)
                        __array_add_AGTB_continue_3:
        0 => D
                        __array_add_AGTB_continue_4:
        ;-----------------

        ; sum = (a[i] + b[i]) + carry, where carry ∈ [0,1]: This number cannot be GT base + (base - 1), two chunks
        $ => A          :MLOAD(array_add_AGTB_carry)
        $               :ADD, MSTORE(array_add_AGTB_out + E), JMPNC(__array_add_AGTB_continue_5)
        ;-----------------
        1 => D
                        __array_add_AGTB_continue_5:
        ;-----------------

        ; NOTE: It cannot happen that a[i] + b[i] produces carry and (a[i] + b[i]) + carry as well at the same time

        D               :MSTORE(array_add_AGTB_carry)

        E + 1 => E
        $ => B          :MLOAD(array_add_AGTB_len_inB)
        B - E           :JMPZ(array_add_AGTB_loop_index_check, array_add_AGTB_loopZero2inB)

array_add_AGTB_loop_index_check:
        $ => C          :MLOAD(array_add_AGTB_len_inA)
        C - E           :JMPZ(array_add_AGTB_check_carry)

array_add_AGTB_last_two_additions:
        ; sum = a[i] + carry: This number cannot be GT base, two chunks
        ; This sum can produce, at most, one additional carry
        $ => A          :MLOAD(array_add_AGTB_inA + E)
        D => B
        $               :ADD, MSTORE(array_add_AGTB_out + E), JMPNC(array_add_AGTB_set)

        E + 1 => E
        C - E           :JMPZ(array_add_AGTB_is_carry)

        $ => A          :MLOAD(array_add_AGTB_inA + E)
        1 => B
        $               :ADD, MSTORE(array_add_AGTB_out + E)

array_add_AGTB_set:
        E + 1 => E
        $ => A          :MLOAD(array_add_AGTB_len_inA)
        A - E           :JMPZ(array_add_AGTB_trim)
        $ => A          :MLOAD(array_add_AGTB_inA + E)
        A               :MSTORE(array_add_AGTB_out + E), JMP(array_add_AGTB_set)

array_add_AGTB_check_carry:
        D               :JMPZ(array_add_AGTB_trim)

array_add_AGTB_is_carry:
        ; Carry path
        E - %ARRAY_MAX_LEN_DOUBLED  :JMPZ(failAssert)

        ; In this case, the carry = 1 and we should append it to the result
        1               :MSTORE(array_add_AGTB_out + E)
        E + 1           :MSTORE(array_add_AGTB_len_out), JMP(array_add_AGTB_end)

array_add_AGTB_trim:
        E               :MSTORE(array_add_AGTB_len_out)

array_add_AGTB_end:
        $ => RR         :MLOAD(array_add_AGTB_RR)
                        :RETURN