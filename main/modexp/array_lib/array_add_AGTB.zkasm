;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRE: len(inA) >= len(inB)
;;
;;
;; array_add_AGTB:
;;             in:
;;                  · C ∈ [1, 64], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · out = inA + inB, with len(out) <= C + 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_add_AGTB(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     const alen = a.length;
;     const blen = b.length;
;     let result = new Array<bigint>(alen);
;     let sum = 0n;
;     let carry = 0n;
;     for (let i = 0; i < blen; i++) {
;         sum = a[i] + b[i] + carry;
;         carry = sum >= base ? 1n : 0n;
;         out[i] = sum - carry * base;
;     }
;     for (let i = blen; i < alen; i++) {
;         sum = a[i] + carry;
;         carry = sum == base ? 1n : 0n; // the past carry is at most 1n
;         out[i] = sum - carry * base;
;     }

;     if (carry === 1n) {
;         result.push(carry);
;     }
;     return result;
; }

; NOTE: It's unoptimized for the case where len(inB) = 1. Use array_add_short instead.

VAR GLOBAL array_add_AGTB_inA[%ARRAY_MAX_LEN_DOUBLED]
VAR GLOBAL array_add_AGTB_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_add_AGTB_out[%ARRAY_MAX_LEN_DOUBLED] ; This cannot be bigger because we use it for division checking
VAR GLOBAL array_add_AGTB_len_inA
VAR GLOBAL array_add_AGTB_len_inB
VAR GLOBAL array_add_AGTB_len_out

VAR GLOBAL array_add_AGTB_carry

VAR GLOBAL array_add_AGTB_RR

array_add_AGTB:
        %MAX_CNT_BINARY - CNT_BINARY     -  2*D     -   C+  D           :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 5 - 14*D - 3 - 9*C+9*D - 8       :JMPN(outOfCountersStep)

        RR              :MSTORE(array_add_AGTB_RR)

        C               :MSTORE(array_add_AGTB_len_inA)
        D               :MSTORE(array_add_AGTB_len_inB)

        0 => E ; index in loops
        0               :MSTORE(array_add_AGTB_carry)

array_add_AGTB_loopZero2inB:
        ; The result will be stored as D·base + C

        0 => D  ; reset the carry chunk

        ; a[i] + b[i], where a[i],b[i] ∈ [0,base-1]: This number cannot be GT base + (base - 2), two chunks
        $ => A          :MLOAD(array_add_AGTB_inA + E)
        $ => B          :MLOAD(array_add_AGTB_inB + E)
        $ => C          :ADD, JMPNC(__array_add_AGTB_continue_1)
        ;-----------------
        1 => D
                        __array_add_AGTB_continue_1:
        ;-----------------

        ; sum = (a[i] + b[i]) + carry: This number cannot be GT base + (base - 1), two chunks
        $ => A          :MLOAD(array_add_AGTB_carry)
        C => B
        $ => C          :ADD, JMPNC(__array_add_AGTB_continue_2)
        ;-----------------
        1 => D
                        __array_add_AGTB_continue_2:
        ;-----------------

        C               :MSTORE(array_add_AGTB_out + E)
        D               :MSTORE(array_add_AGTB_carry)

        E + 1 => E,A
        $ => B          :MLOAD(array_add_AGTB_len_inB)
        B - A           :JMPZ(array_add_AGTB_loop_index_check, array_add_AGTB_loopZero2inB)

array_add_AGTB_loop_index_check:
        $ => B          :MLOAD(array_add_AGTB_len_inA)
        B - A           :JMPZ(array_add_AGTB_check_carry)

array_add_AGTB_loopInB2InA:
        0 => D ; reset the carry chunk

        ; sum = a[i] + carry: This number cannot be GT base, two chunks
        $ => A          :MLOAD(array_add_AGTB_inA + E)
        $ => B          :MLOAD(array_add_AGTB_carry)
        $ => C          :ADD, JMPNC(__array_add_AGTB_continue_3)
        ;-----------------
        1 => D
                        __array_add_AGTB_continue_3:
        ;-----------------

        C               :MSTORE(array_add_AGTB_out + E)
        D               :MSTORE(array_add_AGTB_carry)

        E + 1 => E,A
        $ => B          :MLOAD(array_add_AGTB_len_inA)
        B - A           :JMPZ(array_add_AGTB_check_carry, array_add_AGTB_loopInB2InA)

array_add_AGTB_check_carry:
        D               :JMPZ(array_add_AGTB_trim)

        ; Carry path
        E - %ARRAY_MAX_LEN_DOUBLED  :JMPZ(failAssert)

        D               :MSTORE(array_add_AGTB_out + E)
        E + 1 => E

array_add_AGTB_trim:
        E               :MSTORE(array_add_AGTB_len_out)

array_add_AGTB_end:
        $ => RR         :MLOAD(array_add_AGTB_RR)
                        :RETURN