; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

VAR GLOBAL modexp_Bnchunks
VAR GLOBAL modexp_Mnchunks
VAR GLOBAL modexp_B[20]
VAR GLOBAL modexp_M[20]

VAR GLOBAL inA[300]
VAR GLOBAL inB[300]
VAR GLOBAL out[600]

start:

        STEP => A
        0 :ASSERT

        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; array_add
        ; ---------------------------------------------------------------
        ; 1] len(inA) = len(inB)
        3 => C
        3 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inB + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inB + E)
                        :CALL(array_add_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n              :MLOAD(array_add_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_add_AGTB_out + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_add_AGTB_out + E)
        3 => E
        1n              :MLOAD(array_add_AGTB_out + E)
        4              :MLOAD(array_add_AGTB_len_out)

        ; 2] len(inA) > len(inB)
        3 => C
        2 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_add_AGTB_inB + E)
                        :CALL(array_add_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n              :MLOAD(array_add_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_add_AGTB_out + E)
        2 => E
        0n              :MLOAD(array_add_AGTB_out + E)
        3 => E
        1n              :MLOAD(array_add_AGTB_out + E)
        4              :MLOAD(array_add_AGTB_len_out)
        ; ---------------------------------------------------------------

        ; array_sub
        ; ---------------------------------------------------------------
        ; 1] len(inA) > len(inB) and inA_i >= inb_i for all i
        3 => C
        2 => D
        5n              :MSTORE(array_sub_AGTB_inA)
        1 => E
        6n              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n              :MSTORE(array_sub_AGTB_inA + E)

        2n              :MSTORE(array_sub_AGTB_inB)
        1 => E
        3n              :MSTORE(array_sub_AGTB_inB + E)
                        :CALL(array_sub_AGTB)
        ; 0               :MLOAD(array_sub_sign)
        3n              :MLOAD(array_sub_AGTB_out)
        1 => E
        3n              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        7n              :MLOAD(array_sub_AGTB_out + E)

        ; 2] len(inA) > len(inB) and inA_i < inb_i for some i
        3 => C
        2 => D
        5n              :MSTORE(array_sub_AGTB_inA)
        1 => E
        6n              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n              :MSTORE(array_sub_AGTB_inA + E)

        6n              :MSTORE(array_sub_AGTB_inB)
        1 => E
        3n              :MSTORE(array_sub_AGTB_inB + E)
                        :CALL(array_sub_AGTB)
        ; 0               :MLOAD(array_sub_sign)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_sub_AGTB_out)
        1 => E
        2n              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        7n              :MLOAD(array_sub_AGTB_out + E)

        ; 3] len(inA) > len(inB) and inA_i < inB_i for all i lower than len(inA)
        3 => C
        2 => D
        5n              :MSTORE(array_sub_AGTB_inA)
        1 => E
        1n              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n              :MSTORE(array_sub_AGTB_inA + E)

        6n              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n              :MSTORE(array_sub_AGTB_inB + E)
                        :CALL(array_sub_AGTB)
        ; 0               :MLOAD(array_sub_sign)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_sub_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639928n              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        6n              :MLOAD(array_sub_AGTB_out + E)

        ; 4] len(inB) > len(inA) and inB_i < inA_i for all i lower than len(inB)
        3 => C
        2 => D
        6n              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n              :MSTORE(array_sub_AGTB_inB + E)

        5n              :MSTORE(array_sub_AGTB_inA)
        1 => E
        1n              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n              :MSTORE(array_sub_AGTB_inA + E)
                        :CALL(array_sub_AGTB)
        ; 1               :MLOAD(array_sub_sign)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MLOAD(array_sub_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639928n              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        6n              :MLOAD(array_sub_AGTB_out + E)

        ; 5] len(inB) = len(inA) and inB > inA
        3 => C
        3 => D
        6n              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n              :MSTORE(array_sub_AGTB_inB + E)
        2 => E
        8n              :MSTORE(array_sub_AGTB_inB + E)

        7n              :MSTORE(array_sub_AGTB_inA)
        1 => E
        8n              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        8n              :MSTORE(array_sub_AGTB_inA + E)
                        :CALL(array_sub_AGTB)
        ; 1               :MLOAD(array_sub_sign)
        1n              :MLOAD(array_sub_AGTB_out)
        1 => E
        0n              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        0n              :MLOAD(array_sub_AGTB_out + E)
        ; ---------------------------------------------------------------

        ; array short mul
        ; ---------------------------------------------------------------
        ; 1] len(inB) = len(inA) and inB > inA
        4 => C
        2n              :MSTORE(array_div_mod_short_inA)
        1 => E
        1n              :MSTORE(array_div_mod_short_inA + E)
        2 => E
        1n              :MSTORE(array_div_mod_short_inA + E)
        3 => E
        1n              :MSTORE(array_div_mod_short_inA + E)
        3n              :MSTORE(array_div_mod_short_inB)
                        :CALL(array_div_mod_short)
        0n              :MLOAD(array_div_mod_short_quo)
        1 => E
        77194726158210796949047323339125271902179989777093709359638389338608753093291n                :MLOAD(array_div_mod_short_quo + E)
        2 => E
        38597363079105398474523661669562635951089994888546854679819194669304376546645n                :MLOAD(array_div_mod_short_quo + E)
        2n                :MLOAD(array_div_mod_short_rem)
        ; ---------------------------------------------------------------

        ; array long mul
        ; ---------------------------------------------------------------
        ; 1] len(inB) = len(inA) and inB > inA
        3 => C
        3 => D
        5n              :MSTORE(array_mul_long_inA)
        1 => E
        6n              :MSTORE(array_mul_long_inA + E)
        2 => E
        7n              :MSTORE(array_mul_long_inA + E)

        2n              :MSTORE(array_mul_long_inB)
        1 => E
        3n              :MSTORE(array_mul_long_inB + E)
        2 => E
        4n              :MSTORE(array_mul_long_inB + E)
                        :CALL(array_mul_long)
        10n             :MLOAD(array_mul_long_out)
        1 => E
        27n             :MLOAD(array_mul_long_out + E)
        2 => E
        52n             :MLOAD(array_mul_long_out + E)
        3 => E
        45n             :MLOAD(array_mul_long_out + E)
        4 => E
        28n             :MLOAD(array_mul_long_out + E)
        5               :MLOAD(array_mul_long_len_out)

        ; 2] len(inB) != len(inA)
        2 => C
        3 => D
        5n              :MSTORE(array_mul_long_inA)
        1 => E
        6n              :MSTORE(array_mul_long_inA + E)

        11n              :MSTORE(array_mul_long_inB)
        1 => E
        21n              :MSTORE(array_mul_long_inB + E)
        2 => E
        16n              :MSTORE(array_mul_long_inB + E)
                        :CALL(array_mul_long)
        55n             :MLOAD(array_mul_long_out)
        1 => E
        171n             :MLOAD(array_mul_long_out + E)
        2 => E
        206n             :MLOAD(array_mul_long_out + E)
        3 => E
        96n             :MLOAD(array_mul_long_out + E)
        4               :MLOAD(array_mul_long_len_out)
        ; ---------------------------------------------------------------

        ; array short mult
        ; ---------------------------------------------------------------
        3 => C
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_mul_short_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_mul_short_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_mul_short_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n             :MSTORE(array_mul_short_inB)
                        :CALL(array_mul_short)
        1n             :MLOAD(array_mul_short_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n             :MLOAD(array_mul_short_out + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n             :MLOAD(array_mul_short_out + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639934n             :MLOAD(array_mul_short_out + E)
        ; ---------------------------------------------------------------

        ; array square
        ; ---------------------------------------------------------------
        ; [4n, 4n, 4n, 3n, 2n, 4n]
        6 => C
        4n              :MSTORE(array_square_in)
        1 => E
        4n              :MSTORE(array_square_in + E)
        2 => E
        4n              :MSTORE(array_square_in + E)
        3 => E
        3n              :MSTORE(array_square_in + E)
        4 => E
        2n              :MSTORE(array_square_in + E)
        5 => E
        4n              :MSTORE(array_square_in + E)
                        :CALL(array_square)
        16n              :MLOAD(array_square_out)
        1 => E
        32n              :MLOAD(array_square_out + E)
        2 => E
        48n              :MLOAD(array_square_out + E)
        3 => E
        56n              :MLOAD(array_square_out + E)
        4 => E
        56n              :MLOAD(array_square_out + E)
        5 => E
        72n              :MLOAD(array_square_out + E)
        6 => E
        57n              :MLOAD(array_square_out + E)
        7 => E
        44n              :MLOAD(array_square_out + E)
        8 => E
        28n              :MLOAD(array_square_out + E)
        9 => E
        16n              :MLOAD(array_square_out + E)
        10 => E
        16n              :MLOAD(array_square_out + E)
        11 => E
        0n              :MLOAD(array_square_out + E)
        ; ; ---------------------------------------------------------------

        ; array long mod div
        ; ---------------------------------------------------------------
        ; 1] len(inB) = len(inA) and inB > inA
        4 => C
        2 => D
        9n              :MSTORE(array_div_mod_long_inA)
        1 => E
        8n              :MSTORE(array_div_mod_long_inA + E)
        2 => E
        7n              :MSTORE(array_div_mod_long_inA + E)
        3 => E
        6n              :MSTORE(array_div_mod_long_inA + E)

        8n              :MSTORE(array_div_mod_long_inB)
        1 => E
        1n              :MSTORE(array_div_mod_long_inB + E)
                        :CALL(array_div_mod_long)
        335n             :MLOAD(array_div_mod_long_quo)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639895n             :MLOAD(array_div_mod_long_quo + E)
        2 => E
        5n             :MLOAD(array_div_mod_long_quo + E)
        115792089237316195423570985008687907853269984665640564039457584007913129637265n             :MLOAD(array_div_mod_long_rem)

        ; 2] [a, 7n, a, 12n, a, 20n, a, 80n] / [a, a, a, a, 100n]
        8 => C
        5 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inA)
        1 => E
        7n              :MSTORE(array_div_mod_long_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inA + E)
        3 => E
        12n              :MSTORE(array_div_mod_long_inA + E)
        4 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inA + E)
        5 => E
        20n              :MSTORE(array_div_mod_long_inA + E)
        6 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inA + E)
        7 => E
        80n              :MSTORE(array_div_mod_long_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inB + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inB + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n              :MSTORE(array_div_mod_long_inB + E)
        4 => E
        100n              :MSTORE(array_div_mod_long_inB + E)
                        :CALL(array_div_mod_long)
        87130681010257731209815790699606742543054641926620622445532439451498988639951n             :MLOAD(array_div_mod_long_quo)
        1 => E
        76812574048516684092863920748337523031377118540573443471719387411189897879957n             :MLOAD(array_div_mod_long_quo + E)
        2 => E
        92862962655669424052566829561422975605097710474424610764317468362781816839948n             :MLOAD(array_div_mod_long_quo + E)
        87130681010257731209815790699606742543054641926620622445532439451498988639950n             :MLOAD(array_div_mod_long_rem)
        1 => E
        76812574048516684092863920748337523031377118540573443471719387411189897879965n             :MLOAD(array_div_mod_long_rem + E)
        2 => E
        92862962655669424052566829561422975605097710474424610764317468362781816839947n             :MLOAD(array_div_mod_long_rem + E)
        3 => E
        13n             :MLOAD(array_div_mod_long_rem + E)
        4 => E
        84n             :MLOAD(array_div_mod_long_rem + E)

        ; 3] inA == 0, inB != 0
        1 => C
        2 => D
        0n              :MSTORE(array_div_mod_long_inA)

        8n              :MSTORE(array_div_mod_long_inB)
        1 => E
        1n              :MSTORE(array_div_mod_long_inB + E)
                        :CALL(array_div_mod_long)
        0n             :MLOAD(array_div_mod_long_quo)
        0n             :MLOAD(array_div_mod_long_rem)

        ; 4] inA != 0, inB == 0 -> error
        2 => C
        1 => D
        0n              :MSTORE(array_div_mod_long_inA)
        1 => E
        30n              :MSTORE(array_div_mod_long_inA + E)

        0n              :MSTORE(array_div_mod_long_inB)
                        :CALL(array_div_mod_long)
        0n             :MLOAD(array_div_mod_long_quo)
        1 => A
        B               :ASSERT

        ; 5] inA == inB
        2 => C
        2 => D
        10n             :MSTORE(array_div_mod_long_inA)
        1 => E
        30n             :MSTORE(array_div_mod_long_inA + E)

        10n             :MSTORE(array_div_mod_long_inB)
        1 => E
        30n             :MSTORE(array_div_mod_long_inB + E)
                        :CALL(array_div_mod_long)
        1n              :MLOAD(array_div_mod_long_quo)
        0n              :MLOAD(array_div_mod_long_rem)

        ; 5] inA < inB
        2 => C
        3 => D
        10n             :MSTORE(array_div_mod_long_inA)
        1 => E
        30n             :MSTORE(array_div_mod_long_inA + E)

        6n             :MSTORE(array_div_mod_long_inB)
        1 => E
        7n             :MSTORE(array_div_mod_long_inB + E)
        2 => E
        8n             :MSTORE(array_div_mod_long_inB + E)
                        :CALL(array_div_mod_long)
        0n              :MLOAD(array_div_mod_long_quo)
        10n             :MLOAD(array_div_mod_long_rem)
        1 => E
        30n             :MSTORE(array_div_mod_long_rem + E)
        ; ---------------------------------------------------------------

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "./utils/array_trim.zkasm"
INCLUDE "./utils/array_compare.zkasm"

INCLUDE "array_sub_AGTB.zkasm"
INCLUDE "array_add_AGTB.zkasm"
; INCLUDE "array_sub.zkasm"
; INCLUDE "array_add.zkasm"

INCLUDE "array_mul_long.zkasm"
INCLUDE "array_mul_short.zkasm"
INCLUDE "array_square.zkasm"
INCLUDE "array_div_mod_long.zkasm"
INCLUDE "array_div_mod_short.zkasm"