;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  PRE: The input arrays have been trimmed.
;; POST: The quotient and remainder are trimmed.
;;
;; array_div_long:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · [quo,rem] = [inA / inB, inA % inB], with len(quo) <= C - D + 1, len(rem) <= D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_div_long(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     if (a === [0n]) {
;         if (b === [0n]) {
;             throw new Error("Division by zero");
;         }
;         return [0n, 0n];
;     } else if (b === [0n]) {
;         throw new Error("Division by zero");
;     }
;
;     if (a === b) {
;         return [1n, 0n];
;     } else if (a < b) {
;         return [0n, a];
;     }
; }

; NOTE: This function receives the actual result from the helper (avoiding the need of computing divisions);
;       checks the correctness of the result and returns the result to the caller

VAR GLOBAL array_div_long_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_div_long_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_div_long_quo[%ARRAY_MAX_LEN]
VAR GLOBAL array_div_long_rem[%ARRAY_MAX_LEN]

VAR GLOBAL array_div_long_len_inA
VAR GLOBAL array_div_long_len_inB
VAR GLOBAL array_div_long_len_quo
VAR GLOBAL array_div_long_len_rem

VAR GLOBAL array_div_long_RR

; ERROR CODES (B)
; 0 - no error
; 1 - inB is zero

; RESOURCES:
; -------------------------------------------
; PATH 1 inA == 0 and inB == 0: [steps: 15, bin: 2]
; PATH 2 inA == 0 and inB != 0: [steps: 19, bin: 2]
; PATH 3 inA != 0 and inB == 0: [steps: 15, bin: 2]
; PATH 4 inA,inB != 0:
;       · PATH 4.1 inA == inB: [steps: 34 + 10*lenA + 3*lenB, bin: 2 + 2*lenA]
;       · PATH 4.2 inA < inB:  [steps: 38 + 6*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 3 + 2*(lenA - diff_chunk_inA_inB)]
;       · PATH 4.3 inA > inB:
;              [steps: 35 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 4 + 2*(lenA - diff_chunk_inA_inB)]                                    // setup and compare inA and inB
;              [steps: 86 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 14*lenB + 15*lenQ + 33*lenQ*lenB,                                                  // mul quo by inB
;                 bin: 5 + 2*(lenA - diff_chunk_inA_inB) + 4*lenQ*lenB,
;               arith: 1 + lenQ*lenB]
;               [steps: 114 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 17*lenB + 15*lenQ + 3*lenR + 33*lenQ*lenB,       // compare inB and rem
;                  bin: 8 + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
;                arith: 1 + lenQ*lenB]
;               [steps: 137 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,      // add quo·inB and rem
;                  bin: 8 + lenQ + lenB + lenR + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
;                arith: 1 + lenQ*lenB]
;               [steps: 158 + 16*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,     // compare quo·inB+rem and inA till end
;                  bin: 8 + 2*lenA + lenQ + lenB + lenR + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
;                arith: 1 + lenQ*lenB]
; -------------------------------------------

array_div_long:
        %MAX_CNT_BINARY - CNT_BINARY - 2                  :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 12 - 3*C - 3*D - 1 :JMPN(outOfCountersStep)

        RR              :MSTORE(array_div_long_RR)

        C               :MSTORE(array_div_long_len_inA)
        D               :MSTORE(array_div_long_len_inB)

        ; Let's cover the edge cases
        1 => B
        ; 1] Is C == 1 and inA == 0?
        C - B           :JMPNZ(__array_div_long_inA_continue)
        $ => A          :MLOAD(array_div_long_inA)
        $               :LT, JMPC(array_div_long_inA_is_zero)
                        __array_div_long_inA_continue:
        ; [steps: 9, bin: 1]

        ; 2] Is D == 1 and inB == 0?
        D - B           :JMPNZ(__array_div_long_inB_continue_1)
        $ => A          :MLOAD(array_div_long_inB)
        $               :LT, JMPC(array_div_long_inB_is_zero)
                        __array_div_long_inB_continue_1:
        ; [steps: 12, bin: 2]

        ; 3] Check if inA = inB or inA < inB
        C - 1 => RR
        D - 1 => E
array_div_long_compare_inA1:
        $ => A          :MLOAD(array_div_long_inA + RR)
        A               :MSTORE(array_compare_inA + RR)
        RR - 1 => RR    :JMPN(array_div_long_compare_inB1, array_div_long_compare_inA1)

array_div_long_compare_inB1:
        $ => A          :MLOAD(array_div_long_inB + E)
        A               :MSTORE(array_compare_inB + E)
        E - 1 => E      :JMPN(array_div_long_compare1, array_div_long_compare_inB1)

array_div_long_compare1:
        ; [steps: 14 + 3*lenA + 3*lenB, bin: 2]
                        :CALL(array_compare)
        ; PATH 1 inA > inB:  [steps: 10 + 7*(lenA - diff_chunk_inA_inB) + 6, bin: 2*(lenA - diff_chunk_inA_inB) + 2]
        ; PATH 2 inA < inB:  [steps: 10 + 7*(lenA - diff_chunk_inA_inB) + 3, bin: 2*(lenA - diff_chunk_inA_inB) + 1]
        ; PATH 3 inA == inB: [steps: 10 + 7*lenA,                    bin: 2*lenA] <--- w.c.

        %MAX_CNT_BINARY - CNT_BINARY - 1         :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 15        :JMPN(outOfCountersStep)

        $ => A          :MLOAD(array_compare_result), JMPZ(array_div_long_prep_inALTinB)
        A - 1           :JMPZ(array_div_long_same_input)
        ; [steps: 35 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 4 + 2*(lenA - diff_chunk_inA_inB)]
        ; From here, inA > inB

        ; Strategy: Divide outside and check the result inside
        $${MPdiv(addr.array_div_long_inA,mem.array_div_long_len_inA,addr.array_div_long_inB,mem.array_div_long_len_inB)}

                        :JMP(array_div_long_prepare_mul_quo_inB)

; Begin of edge cases
array_div_long_inA_is_zero:
        ; before (w.c.) -> [steps: 9, bin: 1, arith: 0]

        ; Is D == 1 and inB == 0? 0/0 is undefined
        D - B           :JMPNZ(__array_div_long_inB_continue_2)
        $ => A          :MLOAD(array_div_long_inB)
        $               :LT, JMPC(array_div_long_inB_is_zero)
                        __array_div_long_inB_continue_2:
        ; [steps: 12, bin: 2, arith: 0]
        ; From here, inA == 0 and inB != 0

        ; Return [q,r] = [0,0] and len(q) = 1, len(r) = 1
        0               :MSTORE(array_div_long_quo)
        0               :MSTORE(array_div_long_rem)
        1               :MSTORE(array_div_long_len_quo)
        1               :MSTORE(array_div_long_len_rem)
        0 => B          :JMP(array_div_long_end)
        ; till the end -> [steps: 19, bin: 2, arith: 0]

array_div_long_inB_is_zero:
        ; before (w.c.) -> [steps: 12, bin: 2, arith: 0]

        ; Error, you cannot divide by 0
        1 => B          :JMP(array_div_long_end)

        ; till the end (inA_is_zero) -> [steps: 15, bin: 2, arith: 0]

array_div_long_same_input:
        ; before (w.c.) -> [steps: 29 + 10*lenA + 3*lenB, bin: 2 + 2*lenA]

        ; if inA = inB, then return [1, 0] and len(q) = 1, len(r) = 1
        1               :MSTORE(array_div_long_quo)
        0               :MSTORE(array_div_long_rem)
        1               :MSTORE(array_div_long_len_quo)
        1               :MSTORE(array_div_long_len_rem)
        0 => B          :JMP(array_div_long_end)

        ; till the end -> [steps: 34 + 10*lenA + 3*lenB, bin: 2 + 2*lenA]

array_div_long_prep_inALTinB:
        ; before (w.c.) -> [steps: 31 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 3 + 2*(lenA - diff_chunk_inA_inB)]

        ; if inA < inB, then return [0, inA] and len(q) = 1, len(r) = C
        1               :MSTORE(array_div_long_len_quo)
        C               :MSTORE(array_div_long_len_rem)

        %MAX_CNT_STEPS - STEP  - 1 - 4*C - 2        :JMPN(outOfCountersStep)

        C - 1 => RR
array_div_long_inALTinB:
        $ => A          :MLOAD(array_div_long_inA + RR)
        A               :MSTORE(array_div_long_rem + RR)
        RR - 1 => RR    :JMPN(array_div_long_inALTinB_before_end, array_div_long_inALTinB)

array_div_long_inALTinB_before_end:
        0               :MSTORE(array_div_long_quo)
        0 => B          :JMP(array_div_long_end)
        ; till the end -> [steps: 38 + 6*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 3 + 2*(lenA - diff_chunk_inA_inB)]
; End of edge cases

array_div_long_prepare_mul_quo_inB:
        ; before (w.c.) [steps: 35 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 4 + 2*(lenA - diff_chunk_inA_inB)]

        $0{receiveLenQuotient()} => C

        ; The received length must be between 1 and %ARRAY_MAX_LEN
        C - 1 => RR             :JMPN(failAssert) ; If C = 0, then fail
        %ARRAY_MAX_LEN - C      :JMPN(failAssert) ; If C > %ARRAY_MAX_LEN, then fail
        ; From here, 1 <= C <= %ARRAY_MAX_LEN

        ; To avoid non-determinism, we must ensure that the quotient is trimmed
        ; i.e., that its last chunk is not 0
        ${receiveQuotientChunk(RR)} => A
        0 => B
        0               :EQ
        ; From here, the quotient is trimmed

        C               :MSTORE(array_div_long_len_quo) ; len(quo) <= lenA - lenB + 1

        $ => D          :MLOAD(array_div_long_len_inB)
        C - 1 => RR
        D - 1 => E

        %MAX_CNT_STEPS - STEP - 4*%ARRAY_MAX_LEN - 3*D - 1      :JMPN(outOfCountersStep)
        ; [steps: 46 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 3*lenB, bin: 5 + 2*(lenA - diff_chunk_inA_inB)]

array_div_long_quo_to_mul:
        ${receiveQuotientChunk(RR)} => A
        A               :MSTORE(array_div_long_quo + RR)
        A               :MSTORE(array_mul_inA + RR)
        RR - 1 => RR    :JMPN(array_div_long_inB_to_mul, array_div_long_quo_to_mul)

array_div_long_inB_to_mul:
        $ => A          :MLOAD(array_div_long_inB + E)
        A               :MSTORE(array_mul_inB + E)
        E - 1 => E      :JMPN(array_div_long_mul_quo_inB, array_div_long_inB_to_mul)

array_div_long_mul_quo_inB:
        ; [steps: 46 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 6*lenB + 4*lenQ, bin: 5 + 2*(lenA - diff_chunk_inA_inB)]
                        :CALL(array_mul) ; (assuming long mul for counters)
        ; [steps: 86 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 14*lenB + 15*lenQ + 33*lenQ*lenB, bin: 5 + 2*(lenA - diff_chunk_inA_inB) + 4*lenQ*lenB, arith: 1 + lenQ*lenB]

        %MAX_CNT_BINARY - CNT_BINARY - 1        :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 10       :JMPN(outOfCountersStep)

        ; Check the remainder
        $0{receiveLenRemainder()} => D ; len(rem) <= lenB

        ; 1] The received length must be between 1 and %ARRAY_MAX_LEN
        D - 1 => E              :JMPN(failAssert) ; If D = 0, then fail
        %ARRAY_MAX_LEN - D      :JMPN(failAssert) ; If D > %ARRAY_MAX_LEN, then fail
        ; From here, 1 <= D <= %ARRAY_MAX_LEN

        ; 2] To avoid non-determinism, we must ensure that the remainder is trimmed
        ; i.e., that its last chunk is not 0
        ${receiveRemainderChunk(E)} => A
        0 => B
        0               :EQ
        ; From here, the remainder is trimmed

        ; 3] Finally, we must ensure that the remainder is lower than inB
        $ => C           :MLOAD(array_div_long_len_inB)
        C - 1 => RR
        D - 1 => E

        %MAX_CNT_STEPS - STEP - 3*C - 3*%ARRAY_MAX_LEN - 1    :JMPN(outOfCountersStep)
        ; [steps: 98 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 14*lenB + 15*lenQ + 33*lenQ*lenB, bin: 6 + 2*(lenA - diff_chunk_inA_inB) + 4*lenQ*lenB, arith: 1 + lenQ*lenB]

array_div_long_compare_inB2:
        $ => A          :MLOAD(array_div_long_inB + RR)
        A               :MSTORE(array_compare_inA + RR)
        RR - 1 => RR    :JMPN(array_div_long_compare_rem, array_div_long_compare_inB2)

array_div_long_compare_rem:
        ${receiveRemainderChunk(E)} => A
        A               :MSTORE(array_compare_inB + E)
        E - 1 => E      :JMPN(array_div_long_compare2, array_div_long_compare_rem)

array_div_long_compare2:
        ; [steps: 98 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 17*lenB + 15*lenQ + 3*lenR + 33*lenQ*lenB, bin: 6 + 2*(lenA - diff_chunk_inA_inB) + 4*lenQ*lenB, arith: 1 + lenQ*lenB]
                        :CALL(array_compare) ; (inB > rem): [steps: 10 + 7*(lenB - diff_chunk_inB_rem) + 6, bin: 2*(lenB - diff_chunk_inB_rem) + 2]
        ; [steps: 114 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 17*lenB + 15*lenQ + 3*lenR + 33*lenQ*lenB,
        ;    bin: 8 + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]

       %MAX_CNT_STEPS - STEP - 6        :JMPN(outOfCountersStep)

        2               :MLOAD(array_compare_result)

        D               :MSTORE(array_div_long_len_rem) ; len(rem) <= lenB

        ; prepare output and remainder to be added
        $ => C          :MLOAD(array_mul_len_out) ; len(quo·inB) <= lenA
        C - 1 => RR
        D - 1 => E

        %MAX_CNT_STEPS - STEP - 3*C - 4*D - 1    :JMPN(outOfCountersStep)
        ; [steps: 121 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 17*lenB + 15*lenQ + 3*lenR + 33*lenQ*lenB,
        ;    bin: 8 + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]

array_div_long_res_to_add:
        $ => A          :MLOAD(array_mul_out + RR)
        A               :MSTORE(array_add_AGTB_inA + RR)
        RR - 1 => RR    :JMPN(array_div_long_rem_to_add, array_div_long_res_to_add)

array_div_long_rem_to_add:
        ${receiveRemainderChunk(E)} => A
        A               :MSTORE(array_div_long_rem + E)
        A               :MSTORE(array_add_AGTB_inB + E)
        E - 1 => E      :JMPN(array_div_long_add_res_rem, array_div_long_rem_to_add)

array_div_long_add_res_rem:
        ; [steps: 121 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 20*lenB + 18*lenQ + 6*lenR + 33*lenQ*lenB,
        ;    bin: 8 + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]
                        :CALL(array_add_AGTB) ; [steps: 16 + 9*(lenQ + lenB) + 5*lenR, bin: (lenQ + lenB) + lenR]
        ; [steps: 137 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,
        ;    bin: 8 + lenQ + lenB + lenR 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]

        %MAX_CNT_STEPS - STEP - 5      :JMPN(outOfCountersStep)

        ; prepare next
        $ => C           :MLOAD(array_add_AGTB_len_out) ; len(quo·inB + rem) <= lenA
        $ => D           :MLOAD(array_div_long_len_inA)
        C - 1 => RR
        D - 1 => E

        %MAX_CNT_STEPS - STEP - 3*C - 3*D - 1    :JMPN(outOfCountersStep)
        ; [steps: 143 + 3*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,
        ;    bin: 8 + lenQ + lenB + lenR + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]

array_div_long_compare_inA2:
        $ => A          :MLOAD(array_add_AGTB_out + RR)
        A               :MSTORE(array_compare_inA + RR)
        RR - 1 => RR    :JMPN(array_div_long_compare_inB3, array_div_long_compare_inA2)

array_div_long_compare_inB3:
        $ => A          :MLOAD(array_div_long_inA + E)
        A               :MSTORE(array_compare_inB + E)
        E - 1 => E      :JMPN(array_div_long_compare3, array_div_long_compare_inB3)

array_div_long_compare3:
        ; [steps: 143 + 9*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,
        ;    bin: 8 + lenQ + lenB + lenR + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]
                        :CALL(array_compare) ; [steps: 10 + 7*lenA, bin: 2*lenA]
        ; [steps: 153 + 16*lenA + 7*(lenA - diff_chunk_inA_inB) + 7*(lenB - diff_chunk_inB_rem) + 29*lenB + 27*lenQ + 11*lenR + 33*lenQ*lenB,
        ;    bin: 8 + 2*lenA + lenQ + lenB + lenR + 2*(lenA - diff_chunk_inA_inB) + 2*(lenB - diff_chunk_inB_rem) + 4*lenQ*lenB,
        ;  arith: 1 + lenQ*lenB]

        %MAX_CNT_STEPS - STEP - 4      :JMPN(outOfCountersStep)

        1               :MLOAD(array_compare_result)
        0 => B

array_div_long_end:
        $ => RR         :MLOAD(array_div_long_RR)
                        :RETURN