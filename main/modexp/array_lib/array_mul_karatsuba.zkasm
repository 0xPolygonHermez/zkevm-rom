;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Assumes: len(inB) >= 2
;;
;; array_mul_karatsuba:
;;             in: 
;;                  · C ∈ [1, 300], the len of inA
;;                  · D ∈ [1, 300], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output: 
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

VAR GLOBAL array_mul_karatsuba_inA[300]
VAR GLOBAL array_mul_karatsuba_inB[300]
VAR GLOBAL array_mul_karatsuba_out[600]
VAR GLOBAL array_mul_karatsuba_len_inA
VAR GLOBAL array_mul_karatsuba_len_inB
VAR GLOBAL array_mul_karatsuba_len_out

VAR GLOBAL array_mul_karatsuba_max_len

VAR GLOBAL array_mul_karatsuba_RR

array_mul_karatsuba:
        RR              :MSTORE(array_mul_karatsuba_RR)
        C               :MSTORE(array_mul_karatsuba_len_inA)
        D               :MSTORE(array_mul_karatsuba_len_inB)
        0 => RR,E
                        :JMP(array_mul_karatsuba_compute_max_len)


array_mul_karatsuba_assign_max_len:
        C               :MSTORE(array_mul_karatsuba_max_len)
                        :JMP(return_array_mul_karatsuba_assign_max_len)

array_mul_karatsuba_compute_max_len:
        C => A
        D => B
        $               :LT, JMPZ(array_mul_karatsuba_assign_max_len)
        D               :MSTORE(array_mul_karatsuba_max_len)
        return_array_mul_karatsuba_assign_max_len:

        ; if n <= 2, then fall back to long multiplication
        $ => A         :MLOAD(array_mul_karatsuba_max_len)
        3 => B
        $               :LT, JMPNZ(array_mul_karatsuba_start_recursion)

array_mul_karatsuba_inA_to_mul_long:
        $ => A          :MLOAD(array_mul_karatsuba_inA + RR)
        A               :MSTORE(array_mul_long_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_karatsuba_inB_to_mul_long)
                        :JMP(array_mul_karatsuba_inA_to_mul_long)

array_mul_karatsuba_inB_to_mul_long:
        $ => A          :MLOAD(array_mul_karatsuba_inB + E)
        A               :MSTORE(array_mul_long_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(array_mul_karatsuba_compute_long)
                        :JMP(array_mul_karatsuba_inB_to_mul_long)

array_mul_karatsuba_compute_long:
                        :CALL(array_mul_long)
        $ => C          :MLOAD(array_mul_long_len_out)
        C               :MSTORE(array_mul_karatsuba_len_out)
        0 => RR
array_mul_karatsuba_assign_long:
        $ => A          :MLOAD(array_mul_long_out + RR)
        A               :MSTORE(array_mul_karatsuba_out + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_karatsuba_end)
                        :JMP(array_mul_karatsuba_assign_long)

array_mul_karatsuba_start_recursion:

array_mul_karatsuba_end:
        $ => RR         :MLOAD(array_mul_karatsuba_RR)
                        :RETURN