;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_mul_short:
;;             in: 
;;                  · C ∈ [0, 2²⁵⁶ - 1], the len of inA
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1], the second input
;;
;;          output: 
;;                  · out = inA·inB, with len(out) <= C + 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

VAR GLOBAL array_mul_short_inA[300]
VAR GLOBAL array_mul_short_inB
VAR GLOBAL array_mul_short_out[301]
VAR GLOBAL array_mul_short_len_inA
VAR GLOBAL array_mul_short_len_out

VAR GLOBAL array_mul_short_carry

VAR GLOBAL array_mul_short_RR

array_mul_short:
        RR              :MSTORE(array_mul_short_RR)
        C               :MSTORE(array_mul_short_len_inA)
        C + 1           :MSTORE(array_mul_short_len_out)

        0n => RCX   ; index in loops
        0n              :MSTORE(array_mul_short_carry)
                        :JMP(array_mul_short_clean_out)

array_mul_short_carry:
        D + 1n => D
                        :JMP(return_array_mul_short_carry)

array_mul_short_clean_out:
        $ => A          :MLOAD(array_mul_short_out + E)
        0n              :MSTORE(array_mul_short_out + E)
        E + 1 => E
        E => A
        C + 1 => B
        $               :EQ, JMPC(array_mul_short_loopZero2inA)
                        :JMP(array_mul_short_clean_out)

array_mul_short_loopZero2inA:
        RCX => E
        ; product = a_i * b + carry
        $ => A          :MLOAD(array_mul_short_inA + E)
        $ => B          :MLOAD(array_mul_short_inB)
        0n => C
        $${var _arrayShortMul_AB = A*B}
        ${_arrayShortMul_AB >> 256} => D
        ${_arrayShortMul_AB} => E :ARITH

        E => A
        $ => B          :MLOAD(array_mul_short_carry)
        $ => C          :ADD, JMPC(array_mul_short_carry)
                        return_array_mul_short_carry:
        D               :MSTORE(array_mul_short_carry)

        ; out[i] = product - carry·2²⁵⁶
        RCX => E
        C               :MSTORE(array_mul_short_out + E)

        RCX + 1n => RCX
        RCX => A
        $ => B          :MLOAD(array_mul_short_len_inA)
        $               :EQ, JMPC(array_mul_short_carry_check)
                        :JMP(array_mul_short_loopZero2inA)

array_mul_short_carry_check:
        $ => A          :MLOAD(array_mul_short_carry)
        0 => B
        $               :EQ, JMPC(array_mul_short_prep_trim_in)

        RCX => E
        A              :MSTORE(array_mul_short_out + E)

array_mul_short_prep_trim_in:
        0 => E
        $ => C          :MLOAD(array_mul_short_len_out)

array_mul_short_trim_in:
        $ => A          :MLOAD(array_mul_short_out + E)
        A               :MSTORE(array_trim_in + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_mul_short_trim)
                        :JMP(array_mul_short_trim_in)

array_mul_short_trim:
                        :CALL(array_trim)
        $ => A          :MLOAD(array_trim_len)
        A               :MSTORE(array_mul_short_len_out)

array_mul_short_end:
        $ => RR         :MLOAD(array_mul_short_RR)
                        :RETURN