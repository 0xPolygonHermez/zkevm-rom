;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: out is trimmed
;;
;; array_mul_short:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1], the second input
;;
;;          output:
;;                  · out = inA·inB, with len(out) <= C + 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_mul_short(a: bigint[], b: bigint, base: bigint): bigint[] {
;     const alen = a.length;
;     const len = alen;
;     const result = new Array<bigint>(len).fill(0n);
;     let product: bigint;
;     let carry = 0n;
;     let i;
;     for (i = 0; i < alen; i++) {
;         product = a[i] * b + carry;
;         carry = product / base;
;         out[i] = product - carry * base;
;     }

;     if (carry > 0n) {
;         result.push(carry);
;     }

;     trim(result);
;     return result;
; }

VAR GLOBAL array_mul_short_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_mul_short_inB
VAR GLOBAL array_mul_short_out[%ARRAY_MAX_LEN_PLUS_ONE]
VAR GLOBAL array_mul_short_len_inA
VAR GLOBAL array_mul_short_len_out

VAR GLOBAL array_mul_short_carry

VAR GLOBAL array_mul_short_RR

array_mul_short:
        %MAX_CNT_BINARY - CNT_BINARY               - 2*C        :JMPN(outOfCountersBinary)
        %MAX_CNT_ARITH - CNT_ARITH                 - C          :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP        - 6 - 2*C-2   - 18*C - 6   :JMPN(outOfCountersStep)

        RR              :MSTORE(array_mul_short_RR)

        C               :MSTORE(array_mul_short_len_inA)
        C + 1           :MSTORE(array_mul_short_len_out)

        C => E          ; auxiliar index
        0 => RCX        ; index in loops
        0               :MSTORE(array_mul_short_carry)

array_mul_short_clean_out:
        0               :MSTORE(array_mul_short_out + E)
        E - 1 => E      :JMPN(array_mul_short_loopZero2inA, array_mul_short_clean_out)

array_mul_short_loopZero2inA:
        ; The result will be stored as D·base + C

        RCX => E
        ; 1] a[i] * b + carry, where a[i],b,carry ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        $ => A          :MLOAD(array_mul_short_inA + E)
        $ => B          :MLOAD(array_mul_short_inB)
        $ => C          :MLOAD(array_mul_short_carry)
        $${var _arrayShortMul_AB = A*B + C}
        ${_arrayShortMul_AB >> 256} => D
        ${_arrayShortMul_AB} => C :ARITH

        ; carry = product / base
        D               :MSTORE(array_mul_short_carry)

        ; out[i] = product - carry·base
        RCX => E
        C               :MSTORE(array_mul_short_out + E)

        RCX + 1 => RCX
        $ => B          :MLOAD(array_mul_short_len_inA)
        B - RCX         :JMPZ(array_mul_short_prep_trim, array_mul_short_loopZero2inA)

; If the last carry > 0, we need to insert it to the output
array_mul_short_prep_trim:
        %MAX_CNT_STEPS - STEP - 3   :JMPN(outOfCountersStep)

        $ => C          :MLOAD(array_mul_short_len_out)

        ; if the last carry is 0, then we need to trim the output. Otherwise, we need to insert the carry
        $ => A          :MLOAD(array_mul_short_carry)
        ${A == 0}       :JMPNZ(array_mul_short_trim)

        0 => B
        0               :EQ

        ; insert the carry
        RCX => E
        A              :MSTORE(array_mul_short_out + E), JMP(array_mul_short_end)

array_mul_short_trim:
        ; trim the output
        0               :ASSERT
        C - 1           :MSTORE(array_mul_short_len_out)

array_mul_short_end:
        $ => RR         :MLOAD(array_mul_short_RR)
                        :RETURN