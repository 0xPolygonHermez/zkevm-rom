;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  PRE: The input arrays have been trimmed and inB != 0.
;; POST: The quotient is trimmed.
;;
;; array_div_short:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1], the second input
;;
;;          output:
;;                  · [quo,rem] = [inA / inB[0], inA % inB[0]], with len(quo) <= C, len(rem) = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_div_short(a: bigint[], b: bigint, base: bigint): bigint[] {
;     if (a === [0n]) {
;         if (b === 0n) {
;             throw new Error("Division by zero");
;         }
;         return [0n, 0n];
;     } else if (b === 0n) {
;         throw new Error("Division by zero");
;     }
;
;     if (a === b) {
;         return [1n, 0n];
;     } else if (a < b) {
;         return [0n, a];
;     }
; }

; NOTE: This function receives the actual result from the helper (avoiding the need of computing divisions);
;       checks the correctness of the result and returns the result to the caller

VAR GLOBAL array_div_short_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_div_short_inB
VAR GLOBAL array_div_short_quo[%ARRAY_MAX_LEN]
VAR GLOBAL array_div_short_rem

VAR GLOBAL array_div_short_len_inA
VAR GLOBAL array_div_short_len_quo

VAR GLOBAL array_div_short_RR

array_div_short:
        ; w.c. is when len(inA) >> len(inB)

        %MAX_CNT_BINARY - CNT_BINARY -  2                                  :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 20 - 4*%ARRAY_MAX_LEN_MINUS_ONE - 3 :JMPN(outOfCountersStep) ; till array_mul_short

        RR              :MSTORE(array_div_short_RR)

        C               :MSTORE(array_div_short_len_inA)
        C               :MSTORE(array_div_short_len_quo)

        ; Let's cover the edge cases
        0 => B
        ; 1] Is C == 1 and inA == 0?
        C - 1           :JMPNZ(array_div_short_inAGTinB) ; If len(inA) > 1, then we already know that inA > inB
        $ => A          :MLOAD(array_div_short_inA); Here, len(inA) = len(inB) = 1
        $               :EQ, JMPC(array_div_short_inA_is_zero, array_div_short_equal_len)
                        __array_div_short_inA_continue:

        ; 2] Check if inA = inB, inA < inB or inA > inB

array_div_short_equal_len:
        ; Here, C = 1

        ; If the lengths are equal, then we must compare the only chunk
        $0{signedComparison(addr.array_div_short_inA,addr.array_div_short_inB)} => RR :JMPZ(array_div_short_check_same_input)

        ; The function does the following:
        ; --------------------------------
        ; if inA < inB => return -1
        ; if inA > inB => return  1
        ; if inA = inB => return  0
        ; --------------------------------

        RR          :JMPN(array_div_short_check_inALTinB)

        1 - RR      :JMPN(failAssertModexp) ; if 1 < RR ERROR

        ; Ensure that the chunk is higher
        $ => A          :MLOAD(array_div_short_inB)
        $ => B          :MLOAD(array_div_short_inA)
        1               :LT, JMP(array_div_short_inAGTinB)

; Begin of edge cases
array_div_short_inA_is_zero:
        ; Return [q,r] = [0,0] and len(q) = 1, len(r) = 1
        0               :MSTORE(array_div_short_quo)
        0               :MSTORE(array_div_short_rem)
        1               :MSTORE(array_div_short_len_quo), JMP(array_div_short_end)

array_div_short_check_same_input:
        $ => A          :MLOAD(array_div_short_inA)
        A               :MLOAD(array_div_short_inB)

array_div_short_same_input:
        ; If inA = inB, then the result is [1,0] since inA = 1·inB + 0
        1               :MSTORE(array_div_short_quo)
        1               :MSTORE(array_div_short_len_quo)
        0               :MSTORE(array_div_short_rem), JMP(array_div_short_end)

array_div_short_check_inALTinB:
        RR + 1      :JMPN(failAssertModexp) ; if RR < -1 ERROR

        $ => A          :MLOAD(array_div_short_inA)
        $ => B          :MLOAD(array_div_short_inB)
        1               :LT

array_div_short_inALTinB:
        ; If inA < inB, then the result is [0, inA] since inA = 0·inB + inA
        0               :MSTORE(array_div_short_quo)
        1               :MSTORE(array_div_short_len_quo)
        $ => A          :MLOAD(array_div_short_inA)
        A               :MSTORE(array_div_short_rem), JMP(array_div_short_end)
; End of edge cases

array_div_short_inAGTinB:
        ; From here, inA > inB

        ; Strategy: Divide outside and check the result inside
        $${MPdiv_short(addr.array_div_short_inA,mem.array_div_short_len_inA,mem.array_div_short_inB)}

        $0{receiveLenQuotient_short()} => C ; It cannot be zero because q=0 happens only when inA < inB

        ; 1] The received length must satisfy 1 <= len(Q) <= len(inA)
        C - 1 => RR                     :JMPN(failAssertModexp) ; if len(Q) < 1 ERROR
        $ => A                          :MLOAD(array_div_short_len_inA)
        A - C                           :JMPN(failAssertModexp) ; if len(inA) < len(Q) ERROR

        ; 2] To avoid non-determinism, we must ensure that the quotient is trimmed
        ; i.e., that its last chunk is not 0
        ${receiveQuotientChunk_short(RR)} => A ; It cannot be zero because q=0 happens only when inA < inB
        0 => B
        0               :EQ
        ; From here, the quotient is trimmed

        ; 3] Let's multiply the quotient by inB

        C               :MSTORE(array_div_short_len_quo)
        C - 1 => RR

        ; save the first non-zero chunk of quo
        A               :MSTORE(array_div_short_quo + RR)
        A               :MSTORE(array_mul_short_inA + RR)
        RR - 1 => RR    :JMPN(array_div_short_inB_to_mul)

array_div_short_quo_to_mul:
        ${receiveQuotientChunk_short(RR)} => A
        A               :MSTORE(array_div_short_quo + RR)
        A               :MSTORE(array_mul_short_inA + RR)
        RR - 1 => RR    :JMPN(array_div_short_inB_to_mul, array_div_short_quo_to_mul)

array_div_short_inB_to_mul:
        $ => A          :MLOAD(array_div_short_inB)
        A               :MSTORE(array_mul_short_inB)

array_div_short_mul_quo_inB:
                        :CALL(array_mul_short)

        ; w.c. is when rem is not zero
        %MAX_CNT_BINARY - CNT_BINARY -  2                                  :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 10 - 3*%ARRAY_MAX_LEN_MINUS_ONE - 1 :JMPN(outOfCountersStep) ; till array_add_short

        ; Check the remainder
        ${receiveRemainderChunk_short()} => A

        ${A == 0}       :JMPNZ(array_div_short_rem_is_zero)

        ; Check that the remainder is not zero
        0 => B
        0               :EQ

        ; We must ensure the the remaider is lower than inB
        $ => B          :MLOAD(array_div_short_inB)
        1               :LT

        A               :MSTORE(array_div_short_rem)
        A               :MSTORE(array_add_short_inB)

        $ => C          :MLOAD(array_mul_short_len_out)
        C - 1 => RR
array_div_short_result_to_add:
        $ => A          :MLOAD(array_mul_short_out + RR)
        A               :MSTORE(array_add_short_inA + RR)
        RR - 1 => RR    :JMPN(array_div_short_add_result_rem, array_div_short_result_to_add)

array_div_short_add_result_rem:
                        :CALL(array_add_short)

        %MAX_CNT_STEPS - STEP - 3 - 3*%ARRAY_MAX_LEN - 2 :JMPN(outOfCountersStep)

        ; The length of q·b + r must be the same as the input of a
        $ => C          :MLOAD(array_add_short_len_out)
        C               :MLOAD(array_div_short_len_inA)
        C - 1 => RR

; Check that a == q·b + r
array_div_short_check_result_eq_inA1:
        $ => A          :MLOAD(array_add_short_out + RR)
        A               :MLOAD(array_div_short_inA + RR)
        RR - 1 => RR    :JMPN(array_div_short_end, array_div_short_check_result_eq_inA1)


; Path with remainder equal to 0
array_div_short_rem_is_zero:
        0               :ASSERT, MSTORE(array_div_short_rem)

        ; The length of q·b must be the same as the input of a
        $ => C          :MLOAD(array_div_short_len_inA)
        C               :MLOAD(array_mul_short_len_out)

        ; Check that a == q·b + 0
        C - 1 => RR
array_div_short_check_result_eq_inA2:
        $ => A          :MLOAD(array_mul_short_out + RR)
        A               :MLOAD(array_div_short_inA + RR)
        RR - 1 => RR    :JMPN(array_div_short_end, array_div_short_check_result_eq_inA2)

array_div_short_end:
        $ => RR         :MLOAD(array_div_short_RR)
                        :RETURN