;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  PRE: len(inB) >= 2
;; POST: out is trimmed
;;
;; array_mul_long:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_mul_long(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     const alen = a.length;
;     const blen = b.length;
;     const len = alen + blen;
;     const result = new Array<bigint>(len).fill(0n);
;     let product: bigint;
;     let carry: bigint;
;     for (let i = 0; i < alen; i++) {
;         for (let j = 0; j < blen; j++) {
;             product = a[i] * b[j] + out[i+j];
;             carry = product / base;
;             out[i+j] = product - carry * base;
;             out[i + j + 1] += carry;
;         }
;     }
;     trim(result);
;     return result;
; }

VAR GLOBAL array_mul_long_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_mul_long_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_mul_long_out[%ARRAY_MAX_LEN_DOUBLED]
VAR GLOBAL array_mul_long_len_inA
VAR GLOBAL array_mul_long_len_inB
VAR GLOBAL array_mul_long_len_out

VAR GLOBAL array_mul_long_out_chunk_2

VAR GLOBAL array_mul_long_RR

/*
 * RESOURCES:
 * -----------------------------
 * (worst case) [steps: 18 + lenA + lenB, arith: 1] + lenA*lenB*[steps: 31, bin: 4, arith: 1] + [steps: 18 + 8*lenA + 8*lenB - 5*NZ₁(A·B), bin: 1 + lenA + lenB - NZ₁(A·B)]
 * total: [steps: 36 + 9*lenA + 9*lenB + 31*lenA*lenB - 5*NZ₁(A·B), bin: 1 + lenA + lenB + 4*lenA*lenB - NZ₁(A·B), arith: 1 + lenA*lenB]
 * -----------------------------
 * where:
 *         NZ₁(X) = First non-zero chunk of X, from most significant to least significant
 */


array_mul_long:
        %MAX_CNT_ARITH - CNT_ARITH - 1        :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP      - 9        :JMPN(outOfCountersStep)

        C => A
        D => B
        0 => C,D
        ${A*B} => E :ARITH
        A => C
        B => D
        ; E holds C*D

        %MAX_CNT_BINARY - CNT_BINARY                 - 4*E                :JMPN(outOfCountersBinary)
        %MAX_CNT_ARITH - CNT_ARITH                   - E                  :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP        - 7 - 2*C - 2*D - 33*E - 2 - 3*C - 1 :JMPN(outOfCountersStep)

        RR              :MSTORE(array_mul_long_RR)

        C               :MSTORE(array_mul_long_len_inA)
        D               :MSTORE(array_mul_long_len_inB)
        C + D           :MSTORE(array_mul_long_len_out)
        0               :MSTORE(array_mul_long_out_chunk_2) ; initialize the out chunk 2

        C + D - 1 => E ; auxiliar index
        0 => RCX   ; first index in loops
        0 => RR    ; second index in loops

        ; till loopZero2inB -> [steps: 18 + lenA + lenB, bin: 0, arith: 1]

array_mul_long_clean_out:
        0               :MSTORE(array_mul_long_out + E)
        E - 1 => E      :JMPN(array_mul_long_loopZero2inB, array_mul_long_clean_out)

; Begin of branching
array_mul_long_loop_index_check:
        RCX + 1 => RCX
        $ => B          :MLOAD(array_mul_long_len_inA)
        B - RCX         :JMPZ(array_mul_long_prep_trim_in)

        0 => RR ; reset the second index
; End of branching

array_mul_long_loopZero2inB:
        ; block costs: [steps: 31, bin: 4, arith: 1]

        ; The result will be stored as D·base + C

        RCX => E
        ; 1] a[i]·b[j], where a[i],b[j] ∈ [0,base-1]: This number cannot be GT (base - 2)·base + 1, two chunks
        $ => A          :MLOAD(array_mul_long_inA + E)
        $ => B          :MLOAD(array_mul_long_inB + RR)
        0 => C
        $${var _arrayLongMul_AB = A*B}
        ${_arrayLongMul_AB >> 256} => D
        ${_arrayLongMul_AB & ((1 << 256) - 1)} => E :ARITH

        ; 2] product = a[i]·b[j] + out[i+j], where out[i+j] ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        E => A
        RCX + RR => E
        $ => B          :MLOAD(array_mul_long_out + E)
        $ => C          :ADD, JMPNC(__array_mul_long_no_carry_continue_1)
        ;-----------------
        ; Since here D ∈ [0, base - 2], there cannot be carry in the following addition
        D => A
        1 => B
        $ => D          :ADD
        ;-----------------
                        __array_mul_long_no_carry_continue_1:

        $ => A          :MLOAD(array_mul_long_out_chunk_2) ; out_chunk_2 ∈ [0,1]
        D => B
        $ => D          :ADD ; the number is of two chunks, no carry can be generated here

        ; NOTE: It cannot happen that a[i]·b[j] + out[i+j] produces carry and out_chunk_2 is 1.

        ; out[i+j] = product - carry·B
        C               :MSTORE(array_mul_long_out + E)

        ; out[i+j+1] += carry, where carry ∈ [0,base-1]: This number cannot be GT base + (base-3), two chunks
        E + 1 => E
        $ => A          :MLOAD(array_mul_long_out + E)
        D => B
        $ => C          :ADD, JMPNC(__array_mul_long_no_carry_continue_2)
        ;-----------------
        1               :MSTORE(array_mul_long_out_chunk_2)
                        :JMP(__array_mul_long_carry_continue)
                        __array_mul_long_no_carry_continue_2:
        0               :MSTORE(array_mul_long_out_chunk_2)
                        __array_mul_long_carry_continue:
        ;-----------------

        C               :MSTORE(array_mul_long_out + E)

        RR + 1 => RR
        $ => B          :MLOAD(array_mul_long_len_inB)
        B - RR          :JMPZ(array_mul_long_loop_index_check, array_mul_long_loopZero2inB)

array_mul_long_prep_trim_in:
        ; from here till end -> [steps: 18 + 8*lenA + 8*lenB - 5*NZ₁(A·B), bin: 1 + lenA + lenB - NZ₁(A·B)]

        $ => C          :MLOAD(array_mul_long_len_out)
        C - 1 => E

array_mul_long_trim_in:
        $ => A          :MLOAD(array_mul_long_out + E)
        A               :MSTORE(array_trim_in + E)
        E - 1 => E      :JMPN(array_mul_long_trim, array_mul_long_trim_in)

array_mul_long_trim:
        ; [steps: 2 + 3*lenA + 3*lenB]
                        :CALL(array_trim) ; [steps: 12 + 5*(lenA + lenB) - 5*NZ₁(A·B), bin: 1 + lenA + lenB - NZ₁(A·B)]
        ; [steps: 14 + 8*lenA + 8*lenB - 5*NZ₁(A·B), bin: 1 + lenA + lenB - NZ₁(A·B)]

        %MAX_CNT_STEPS - STEP - 3   :JMPN(outOfCountersStep)

        C               :MSTORE(array_mul_long_len_out)

array_mul_long_end:
        $ => RR         :MLOAD(array_mul_long_RR)
                        :RETURN