;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  PRE: len(inB) >= 2
;; POST: out is trimmed
;;
;; array_mul_long:
;;             in:
;;                  · C ∈ [1, 64], the len of inA
;;                  · D ∈ [2, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_mul_long(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     const alen = a.length;
;     const blen = b.length;
;     const len = alen + blen;
;     const result = new Array<bigint>(len).fill(0n);
;     let product: bigint;
;     let carry: bigint;
;     for (let i = 0; i < alen; i++) {
;         for (let j = 0; j < blen; j++) {
;             product = a[i] * b[j] + out[i+j];
;             carry = product / base;
;             out[i+j] = product - carry * base;
;             out[i + j + 1] += carry;
;         }
;     }
;     trim(result);
;     return result;
; }

VAR GLOBAL array_mul_long_inA[%ARRAY_MAX_LEN_DOUBLED]
VAR GLOBAL array_mul_long_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_mul_long_out[%ARRAY_MAX_LEN_DOUBLED] ; This cannot be bigger because we use it for division checking
VAR GLOBAL array_mul_long_len_inA
VAR GLOBAL array_mul_long_len_inB
VAR GLOBAL array_mul_long_len_out

VAR GLOBAL array_mul_long_out_chunk_2

VAR GLOBAL array_mul_long_RR

array_mul_long:
        %MAX_CNT_ARITH - CNT_ARITH - 1        :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP      - 9        :JMPN(outOfCountersStep)

        C => A
        D => B
        0 => C,D
        ${A*B} => E :ARITH
        A => C
        B => D
        ; E holds C*D

        %MAX_CNT_BINARY - CNT_BINARY                 - 4*E                :JMPN(outOfCountersBinary)
        %MAX_CNT_ARITH - CNT_ARITH                   - E                  :JMPN(outOfCountersArith)
        %MAX_CNT_STEPS - STEP        - 7 - 2*C - 2*D - 33*E - 2 - 3*C - 1 :JMPN(outOfCountersStep)

        RR              :MSTORE(array_mul_long_RR)

        C               :MSTORE(array_mul_long_len_inA)
        D               :MSTORE(array_mul_long_len_inB)

        0 => RCX,RR     ; first and second indexes in loops

        ; Load a[0] for the first row computation
        $ => A          :MLOAD(array_mul_long_inA)

array_mul_long_first_iteration_first_row:
        ; The result will be stored as D·base + C

        ; a[0]·b[0], where a[0],b[0] ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        $ => B          :MLOAD(array_mul_long_inB)
        0 => C
        $${var _arrayLongMul_AB = A*B}
        ${_arrayLongMul_AB >> 256} => D
        ${_arrayLongMul_AB} => C :ARITH

        ; out[0] = product - carry·B
        C               :MSTORE(array_mul_long_out)

        ; out[1] = carry
        1 => RR
        D               :MSTORE(array_mul_long_out + RR)

array_mul_long_finish_first_row:
        ; The result will be stored as D·base + C

        ; a[0]·b[j] + out[j], where a[0],b[j],out[j] ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        $ => B          :MLOAD(array_mul_long_inB + RR)
        $ => C          :MLOAD(array_mul_long_out + RR)
        $${var _arrayLongMul_AB = A*B + C}
        ${_arrayLongMul_AB >> 256} => D
        ${_arrayLongMul_AB} => C :ARITH

        ; out[j] = product - carry·B
        C               :MSTORE(array_mul_long_out + RR)

        ; out[j+1] = carry
        RR + 1 => RR,E
        D               :MSTORE(array_mul_long_out + RR)

        $ => B          :MLOAD(array_mul_long_len_inB)
        B - RR          :JMPNZ(array_mul_long_finish_first_row)

; Begin of branching
array_mul_long_loop_index_check:
        RCX + 1 => RCX
        $ => A          :MLOAD(array_mul_long_len_inA)
        A - RCX         :JMPZ(array_mul_long_prep_trim)

        0               :MSTORE(array_mul_long_out_chunk_2)     ; reset the out chunk 2

        0 => RR                                                 ; reset the second index
; End of branching

array_mul_long_loopZero2inB:
        ; The result will be stored as D·base + C

        RCX => E
        ; a[i]·b[j] + out[i+j], where a[i],b[j],out[i+j] ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        $ => A          :MLOAD(array_mul_long_inA + E)
        $ => B          :MLOAD(array_mul_long_inB + RR)
        RCX + RR => E
        $ => C          :MLOAD(array_mul_long_out + E)
        $${var _arrayLongMul_AB = A*B + C}
        ${_arrayLongMul_AB >> 256} => D
        ${_arrayLongMul_AB} => C :ARITH

        $ => A          :MLOAD(array_mul_long_out_chunk_2), JMPZ(__array_mul_long_c2isZ_continue) ; out_chunk_2 ∈ [0,1]
        ;-----------------
        D => B
        $ => D          :ADD ; the number is of two chunks, no carry can be generated here
                        __array_mul_long_c2isZ_continue:
        ;-----------------

        ; NOTE: It cannot happen that a[i]·b[j] + out[i+j] produces carry and out_chunk_2 is 1.

        ; out[i+j] = product - carry·B
        C               :MSTORE(array_mul_long_out + E)

        ; out[i+j+1] += carry, where carry ∈ [0,base-1]: This number cannot be GT base + (base-3), two chunks
        E + 1 => E
        $ => A          :MLOAD(array_mul_long_out + E)
        D => B
        $ => C          :ADD, JMPNC(__array_mul_long_no_carry_continue_2)
        ;-----------------
        1               :MSTORE(array_mul_long_out_chunk_2)
                        :JMP(__array_mul_long_carry_continue)
                        __array_mul_long_no_carry_continue_2:
        0               :MSTORE(array_mul_long_out_chunk_2)
                        __array_mul_long_carry_continue:
        ;-----------------

        C               :MSTORE(array_mul_long_out + E)

        RR + 1 => RR
        $ => B          :MLOAD(array_mul_long_len_inB)
        B - RR - 1      :JMPZ(array_mul_long_last_column, array_mul_long_loopZero2inB)

array_mul_long_last_column:
        ; The result will be stored as D·base + C

        RCX => E
        ; a[i]·b[lenB] + out[i+lenB], where a[i],b[lenB],out[i+lenB] ∈ [0,base-1]: This number cannot be GT (base - 1)·base, two chunks
        $ => A          :MLOAD(array_mul_long_inA + E)
        $ => B          :MLOAD(array_mul_long_inB + RR)
        RCX + RR => E
        $ => C          :MLOAD(array_mul_long_out + E)
        $${var _arrayLongMul_AB = A*B + C}
        ${_arrayLongMul_AB >> 256} => D
        ${_arrayLongMul_AB} => C :ARITH

        $ => A          :MLOAD(array_mul_long_out_chunk_2), JMPZ(__array_mul_long_c2isZ_continue2) ; out_chunk_2 ∈ [0,1]
        ;-----------------
        D => B
        $ => D          :ADD ; the number is of two chunks, no carry can be generated here
                        __array_mul_long_c2isZ_continue2:
        ;-----------------

        ; NOTE: It cannot happen that a[i]·b[lenB] + out[i+lenB] produces carry and out_chunk_2 is 1.

        ; out[i+lenB] = product - carry·B
        C               :MSTORE(array_mul_long_out + E)

        ; out[i+lenB+1] = carry, where carry ∈ [0,base-1]
        E + 1 => E
        D               :MSTORE(array_mul_long_out + E), JMP(array_mul_long_loop_index_check)

array_mul_long_prep_trim:
        D => A
        0 => B
        $               :EQ, JMPNZ(array_mul_long_trim)

        ; Carry path
        E - %ARRAY_MAX_LEN_DOUBLED  :JMPZ(failAssert)

        E + 1           :MSTORE(array_mul_long_len_out), JMP(array_mul_long_end)

array_mul_long_trim:
        E               :MSTORE(array_mul_long_len_out)

array_mul_long_end:
        $ => RR         :MLOAD(array_mul_long_RR)
                        :RETURN