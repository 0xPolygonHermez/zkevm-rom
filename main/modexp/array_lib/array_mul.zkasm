;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_mul:
;;             in: 
;;                  · C ∈ [1, 300], the len of inA
;;                  · D ∈ [1, 300], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output: 
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

VAR GLOBAL array_mul_inA[300]
VAR GLOBAL array_mul_inB[300]
VAR GLOBAL array_mul_out[600]
VAR GLOBAL array_mul_len_inA
VAR GLOBAL array_mul_len_inB
VAR GLOBAL array_mul_len_out

VAR GLOBAL array_mul_RR

array_mul:
        RR              :MSTORE(array_mul_RR)
        C               :MSTORE(array_mul_len_inA)
        D               :MSTORE(array_mul_len_inB)
        0 => RR,E

        D => A
        1 => B
        $               :EQ, JMPC(array_mul_inA_to_mul_short)

; Long
array_mul_inA_to_mul_long:
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_long_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_inB_to_mul_long)
                        :JMP(array_mul_inA_to_mul_long)

array_mul_inB_to_mul_long:
        $ => A          :MLOAD(array_mul_inB + E)
        A               :MSTORE(array_mul_long_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(array_mul_compute_long)
                        :JMP(array_mul_inB_to_mul_long)

array_mul_compute_long:
                        :CALL(array_mul_long)
        $ => C          :MLOAD(array_mul_long_len_out)
        C               :MSTORE(array_mul_len_out)
        0 => RR
array_mul_assign_long:
        $ => A          :MLOAD(array_mul_long_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_end)
                        :JMP(array_mul_assign_long)

; Short
array_mul_inA_to_mul_short:
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_short_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_inB_to_mul_short)
                        :JMP(array_mul_inA_to_mul_short)

array_mul_inB_to_mul_short:
        $ => A          :MLOAD(array_mul_inB)
        A               :MSTORE(array_mul_short_inB)

array_mul_compute_short:
                        :CALL(array_mul_short)
        $ => C          :MLOAD(array_mul_short_len_out)
        C               :MSTORE(array_mul_len_out)
        0 => RR
array_mul_assign_short:
        $ => A          :MLOAD(array_mul_short_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_mul_end)
                        :JMP(array_mul_assign_short)

array_mul_end:
        $ => RR         :MLOAD(array_mul_RR)
                        :RETURN