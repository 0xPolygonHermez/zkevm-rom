;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: out is trimmed
;;
;; array_mul:
;;             in: 
;;                  · C ∈ [1, 839], the len of inA
;;                  · D ∈ [1, 839], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output: 
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

; function array_mul(a: bigint[], b: bigint[], B: bigint): bigint[] {
;     if (b.length === 1) {
;         return array_mul_short(a, b, B);
;     }
;     return array_mul_long(a, b, B);
; }

VAR GLOBAL array_mul_inA[839]
VAR GLOBAL array_mul_inB[839]
VAR GLOBAL array_mul_out[1678]
VAR GLOBAL array_mul_len_inA
VAR GLOBAL array_mul_len_inB
VAR GLOBAL array_mul_len_out

VAR GLOBAL array_mul_RR

array_mul:
        %MAX_CNT_BINARY - CNT_BINARY - 1                  :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 7 - 4*C - 4*D - 1  :JMPN(outOfCountersStep)

        RR              :MSTORE(array_mul_RR)
        C               :MSTORE(array_mul_len_inA)
        D               :MSTORE(array_mul_len_inB)

        C => RR
        D => A,E
        1 => B
        $               :EQ, JMPC(array_mul_inA_to_mul_short) ; worst case is mul long
; Long
array_mul_inA_to_mul_long:
        RR - 1 => RR
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_long_inA + RR)
        RR              :JMPZ(array_mul_inB_to_mul_long, array_mul_inA_to_mul_long)

array_mul_inB_to_mul_long:
        E - 1 => E
        $ => A          :MLOAD(array_mul_inB + E)
        A               :MSTORE(array_mul_long_inB + E)
        E               :JMPZ(array_mul_compute_long, array_mul_inB_to_mul_long)

array_mul_compute_long:
                        :CALL(array_mul_long)

        %MAX_CNT_STEPS - STEP - 3   :JMPN(outOfCountersStep)

        $ => C          :MLOAD(array_mul_long_len_out)
        C               :MSTORE(array_mul_len_out)
        C => RR

        %MAX_CNT_STEPS - STEP - 4*C - 2 :JMPN(outOfCountersStep)

array_mul_assign_long:
        RR - 1 => RR
        $ => A          :MLOAD(array_mul_long_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR              :JMPZ(array_mul_end, array_mul_assign_long)

; Short
array_mul_inA_to_mul_short:
        RR - 1 => RR
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_short_inA + RR)
        RR              :JMPZ(array_mul_inB_to_mul_short, array_mul_inA_to_mul_short)

array_mul_inB_to_mul_short:
        $ => A          :MLOAD(array_mul_inB)
        A               :MSTORE(array_mul_short_inB)

array_mul_compute_short:
                        :CALL(array_mul_short)

        %MAX_CNT_STEPS - STEP - 3   :JMPN(outOfCountersStep)

        $ => C          :MLOAD(array_mul_short_len_out)
        C               :MSTORE(array_mul_len_out)
        C => RR

        %MAX_CNT_STEPS - STEP - 4*C - 2 :JMPN(outOfCountersStep)

array_mul_assign_short:
        RR - 1 => RR
        $ => A          :MLOAD(array_mul_short_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR              :JMPZ(array_mul_end, array_mul_assign_short)

array_mul_end:
        $ => RR         :MLOAD(array_mul_RR)
                        :RETURN