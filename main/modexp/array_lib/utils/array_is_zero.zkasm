;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_is_zero:
;;             in: 
;;                  · C ∈ [0, 2²⁵⁶ - 1], the len of in
;;                  · in ∈ [0, 2²⁵⁶ - 1]^C, the input array
;;          output: 
;;                  · 1, if in = 0
;;                  · 0, otherwise
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; NOTE: Since I always trim after a subroutine, I don't need to trim here.

VAR GLOBAL array_is_zero_in
VAR GLOBAL array_is_zero_result

array_is_zero:
        ${(C != 1) || (mem.array_is_zero_in != 0)}   :JMPZ(array_is_zero_check)

        0               :MSTORE(array_is_zero_result)
                        :JMP(array_is_zero_end)

array_is_zero_check:
        C => A
        1 => B
        B               :ASSERT
        0n              :MLOAD(array_is_zero_in)

        1               :MSTORE(array_is_zero_result)

array_is_zero_end:
                        :RETURN