;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_trim:
;;             in:
;;                  · C ∈ [1, 3636], the len of in
;;                  · in ∈ [0, 2²⁵⁶ - 1]^C, the input array
;;
;;          output:
;;                  · C, the new length of in
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_trim(a: bigint[]): void {
;     let i = a.length;
;
;     while (a[--i] === 0n);
;
;     a.length = i + 1;
; }

VAR GLOBAL array_trim_in[%ARRAY_MAX_LEN_DOUBLED]

VAR GLOBAL array_trim_RR

; RESOURCES:
; -----------------------------
; PATH 1 in == 0: [steps: 7 + 5*(C-1) + 3, bin: C-1]
; PATH 2 in != 0: [steps: 7 + 5*(C - non_zero_chunk) + 5, bin: C - non_zero_chunk + 1]
; -----------------------------

array_trim:
        %MAX_CNT_STEPS - STEP - 5       :JMPN(outOfCountersStep)

        RR             	:MSTORE(array_trim_RR)

        0 => B ; used for comparison in the whole loop

        C => E
        ; scan from the last chunk to the first chunks until we find a non-zero chunk
        ; in case of zero input array, we return 1
array_trim_loop:
        %MAX_CNT_BINARY - CNT_BINARY - 1        :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP - 3               :JMPN(outOfCountersStep)

        E - 1 => E      :JMPZ(array_trim_end)

        $ => A          :MLOAD(array_trim_in + E)
        $               :EQ, JMPZ(array_trim_end, array_trim_loop)

array_trim_end:
        %MAX_CNT_STEPS - STEP - 2       :JMPN(outOfCountersStep)

        $ => RR         :MLOAD(array_trim_RR)

        E + 1 => C      :RETURN
