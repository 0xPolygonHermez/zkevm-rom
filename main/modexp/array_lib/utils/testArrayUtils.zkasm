; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

VAR GLOBAL inA[300]
VAR GLOBAL inB[300]
VAR GLOBAL out[300]

start:

        STEP => A
        0 :ASSERT

        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

; array_compare
; ---------------------------------------------------------------
; 1] len(inA) > len(inB) should return 2
array_compare_test_1: 
        5n              :MSTORE(inA)
        1 => E
        6n              :MSTORE(inA + E)
        2 => E
        7n              :MSTORE(inA + E)

        2n              :MSTORE(inB)
        1 => E
        3n              :MSTORE(inB + E)

        3 => C
        2 => D
        0 => E,RR
array_compare_test_1_memory_copy_inA_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_compare_inA + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_compare_test_1_memory_copy_inB_loop)
                        :JMP(array_compare_test_1_memory_copy_inA_loop)

array_compare_test_1_memory_copy_inB_loop:
        $ => A          :MLOAD(inB + RR)
        A               :MSTORE(array_compare_inB + RR)
        RR + 1 => RR
        RR => A
        D => B
        $               :EQ, JMPC(array_compare_test_1_compare)
                        :JMP(array_compare_test_1_memory_copy_inB_loop)

array_compare_test_1_compare:
                        :CALL(array_compare)
        2               :MLOAD(array_compare_result)

; 2] len(inA) < len(inB) should return 0
array_compare_test_2: 
        5n              :MSTORE(inA)
        1 => E
        6n              :MSTORE(inA + E)

        2n              :MSTORE(inB)
        1 => E
        3n              :MSTORE(inB + E)
        2 => E
        4n              :MSTORE(inB + E)

        2 => C
        3 => D
        0 => E,RR
array_compare_test_2_memory_copy_inA_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_compare_inA + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_compare_test_2_memory_copy_inB_loop)
                        :JMP(array_compare_test_2_memory_copy_inA_loop)

array_compare_test_2_memory_copy_inB_loop:
        $ => A          :MLOAD(inB + RR)
        A               :MSTORE(array_compare_inB + RR)
        RR + 1 => RR
        RR => A
        D => B
        $               :EQ, JMPC(array_compare_test_2_compare)
                        :JMP(array_compare_test_2_memory_copy_inB_loop)

array_compare_test_2_compare:
                        :CALL(array_compare)
        0               :MLOAD(array_compare_result)



; 3] len(inA) = len(inB) but inA > inB should return 2
array_compare_test_3: 
        5n              :MSTORE(inA)
        1 => E
        6n              :MSTORE(inA + E)
        2 => E
        7n              :MSTORE(inA + E)

        5n              :MSTORE(inB)
        1 => E
        6n              :MSTORE(inB + E)
        2 => E
        6n              :MSTORE(inB + E)

        3 => C
        3 => D
        0 => E,RR
array_compare_test_3_memory_copy_inA_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_compare_inA + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_compare_test_3_memory_copy_inB_loop)
                        :JMP(array_compare_test_3_memory_copy_inA_loop)

array_compare_test_3_memory_copy_inB_loop:
        $ => A          :MLOAD(inB + RR)
        A               :MSTORE(array_compare_inB + RR)
        RR + 1 => RR
        RR => A
        D => B
        $               :EQ, JMPC(array_compare_test_3_compare)
                        :JMP(array_compare_test_3_memory_copy_inB_loop)

array_compare_test_3_compare:
                        :CALL(array_compare)
        2               :MLOAD(array_compare_result)

; 4] len(inA) = len(inB) but inA < inB should return 0
array_compare_test_4: 
        5n              :MSTORE(inA)
        1 => E
        6n              :MSTORE(inA + E)
        2 => E
        6n              :MSTORE(inA + E)

        5n              :MSTORE(inB)
        1 => E
        6n              :MSTORE(inB + E)
        2 => E
        7n              :MSTORE(inB + E)

        3 => C
        3 => D
        0 => E,RR
array_compare_test_4_memory_copy_inA_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_compare_inA + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_compare_test_4_memory_copy_inB_loop)
                        :JMP(array_compare_test_4_memory_copy_inA_loop)

array_compare_test_4_memory_copy_inB_loop:
        $ => A          :MLOAD(inB + RR)
        A               :MSTORE(array_compare_inB + RR)
        RR + 1 => RR
        RR => A
        D => B
        $               :EQ, JMPC(array_compare_test_4_compare)
                        :JMP(array_compare_test_4_memory_copy_inB_loop)

array_compare_test_4_compare:
                        :CALL(array_compare)
        0               :MLOAD(array_compare_result)

; 5] inA = inB should return 1
array_compare_test_5: 
        5n              :MSTORE(inA)
        1 => E
        6n              :MSTORE(inA + E)
        2 => E
        6n              :MSTORE(inA + E)

        5n              :MSTORE(inB)
        1 => E
        6n              :MSTORE(inB + E)
        2 => E
        6n              :MSTORE(inB + E)

        3 => C
        3 => D
        0 => E,RR
array_compare_test_5_memory_copy_inA_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_compare_inA + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_compare_test_5_memory_copy_inB_loop)
                        :JMP(array_compare_test_5_memory_copy_inA_loop)

array_compare_test_5_memory_copy_inB_loop:
        $ => A          :MLOAD(inB + RR)
        A               :MSTORE(array_compare_inB + RR)
        RR + 1 => RR
        RR => A
        D => B
        $               :EQ, JMPC(array_compare_test_5_compare)
                        :JMP(array_compare_test_5_memory_copy_inB_loop)

array_compare_test_5_compare:
                        :CALL(array_compare)
        1               :MLOAD(array_compare_result)
; --------------------------------------------------------------- 

; array unshift
; ---------------------------------------------------------------
        0 => C
        5n => D
        3n               :MSTORE(array_unshift_in)
                        :CALL(array_unshift)
        5               :MLOAD(array_unshift_in)
        1               :MLOAD(array_unshift_len)

array_unshift_test_1: 
        2n              :MSTORE(inA)
        1 => E
        1n              :MSTORE(inA + E)
        2 => E
        1n              :MSTORE(inA + E)
        5n => D

        3 => C
        0 => E
array_unshift_test_1_memory_copy_in_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_unshift_in + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_unshift_test_1_unshift)
                        :JMP(array_unshift_test_1_memory_copy_in_loop)

array_unshift_test_1_unshift:
                        :CALL(array_unshift)
        4               :MLOAD(array_unshift_len)
        3 => C ; reset the len back to 3
        0 => E ; reset the loop counter

array_unshift_test_1_memory_copy_out_loop:
        $ => A          :MLOAD(array_unshift_in + E)
        A               :MSTORE(out + E)
        E + 1 => E
        E => A
        C + 1 => B
        $               :EQ, JMPC(array_unshift_test_1_dump)
                        :JMP(array_unshift_test_1_memory_copy_out_loop)

array_unshift_test_1_dump:
        4               :MLOAD(array_unshift_len)
        ${dump(mem.out[0],mem.out[1],mem.out[2],mem.out[3])}
; ---------------------------------------------------------------

; array trim
; ---------------------------------------------------------------
; 1] [2,1,0] should return 2
array_trim_test_1: 
        2n              :MSTORE(inA)
        1 => E
        1n              :MSTORE(inA + E)
        2 => E
        0n              :MSTORE(inA + E)

3 => C
0 => E
array_trim_test_1_memory_copy_in_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_trim_in + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_trim_test_1_trim)
                        :JMP(array_trim_test_1_memory_copy_in_loop)

array_trim_test_1_trim:
                        :CALL(array_trim)
        2               :MLOAD(array_trim_len)

; 2] [0] should return 1
array_trim_test_2: 
        0n              :MSTORE(inA)
        1 => E
        0n              :MSTORE(inA + E)
        2 => E
        0n              :MSTORE(inA + E)
        3 => E
        0n              :MSTORE(inA + E)
        4 => E
        0n              :MSTORE(inA + E)
        5 => E
        0n              :MSTORE(inA + E)

6 => C
0 => E
array_trim_test_2_memory_copy_in_loop:
        $ => A          :MLOAD(inA + E)
        A               :MSTORE(array_trim_in + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_trim_test_2_trim)
                        :JMP(array_trim_test_2_memory_copy_in_loop)

array_trim_test_2_trim:
                        :CALL(array_trim)
        1               :MLOAD(array_trim_len)
; ---------------------------------------------------------------

        9n              :MSTORE(inA)
        1 => E
        8n              :MSTORE(inA + E)
        2 => E
        7n              :MSTORE(inA + E)
        3 => E
        6n              :MSTORE(inA + E)

        8n              :MSTORE(inB)
        1 => E
        1n              :MSTORE(inB + E)

        $${MPdiv(addr.inA,4,addr.inB,2)}
        ${receiveQuotientChunk(0)} => A
        ${receiveQuotientChunk(1)} => B
        ${receiveQuotientChunk(2)} => C
        ${receiveRemainderChunk(0)} => D
        ${dump(A,B,C,D)}

        ${receiveLenQuotient()} => A
        ${receiveLenRemainder()} => B
        ${dump(A,B)}

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "array_compare.zkasm"
INCLUDE "array_unshift.zkasm"
INCLUDE "array_trim.zkasm"