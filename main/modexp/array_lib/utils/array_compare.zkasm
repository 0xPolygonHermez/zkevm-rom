;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRE: The input arrays have been trimmed.
;;
;; array_compare:
;;             in:
;;                  · C ∈ [1, 32], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · 2, if inA > inB
;;                  · 1, if inA = inB
;;                  · 0, if inA < inB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_compare(a: bigint[], b: bigint[]): number {
;     const alen = a.length;
;     const blen = b.length;
;     if (alen !== blen) {
;         return alen >= blen ? 1 : -1;
;     }
;     for (let i = alen - 1; i >= 0; i--) {
;         if (a[i] !== b[i]) {
;             return a[i] > b[i] ? 1 : -1;
;         }
;     }
;     return 0;
; }

; ----------------------------------
; Five possible paths:
;      · inA > inB and lenA > lenB.
;      · inA > inB and lenA = lenB.
;      · inA = inB. (worst case)
;      · inA < inB and lenA < lenB.
;      · inA < inB and lenA = lenB.
; ----------------------------------

VAR GLOBAL array_compare_inA[%ARRAY_MAX_LEN]
VAR GLOBAL array_compare_inB[%ARRAY_MAX_LEN]

VAR GLOBAL array_compare_result

VAR GLOBAL array_compare_RR

array_compare:
        %MAX_CNT_BINARY - CNT_BINARY - 2 - 2*C          :JMPN(outOfCountersBinary)
        %MAX_CNT_STEPS - STEP        - 8 - 8*C - 4      :JMPN(outOfCountersStep)

        RR              :MSTORE(array_compare_RR)

        ; Start by comparing the lengths of the arrays
        C - D           :JMPN(array_compare_ALTB)
        D - C           :JMPN(array_compare_AGTB)

        C - 1 => E
array_compare_same_len:
        $ => A          :MLOAD(array_compare_inA + E)
        $ => B          :MLOAD(array_compare_inB + E)
        $               :LT, JMPC(array_compare_ALTB)

        $ => A          :MLOAD(array_compare_inB + E)
        $ => B          :MLOAD(array_compare_inA + E)
        $               :LT, JMPC(array_compare_AGTB)

        E - 1 => E      :JMPN(array_compare_AEQB, array_compare_same_len)

array_compare_AGTB:
        2               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_AEQB:
        1               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_ALTB:
        0               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_end:
        $ => RR         :MLOAD(array_compare_RR)
                        :RETURN