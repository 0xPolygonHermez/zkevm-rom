;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; array_compare:
;;             in: 
;;                  · C ∈ [1, 300], the len of inA
;;                  · D ∈ [1, 300], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output: 
;;                  · 2, if inA > inB
;;                  · 1, if inA = inB
;;                  · 0, if inA < inB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL array_compare_inA[300]
VAR GLOBAL array_compare_inB[300]

VAR GLOBAL array_compare_result

VAR GLOBAL array_compare_RR

array_compare:
        RR              :MSTORE(array_compare_RR)

        C => A
        D => B
        $               :LT, JMPC(array_compare_ALTB)
        C => B
        D => A
        $               :LT, JMPC(array_compare_AGTB)

array_compare_same_len:
        C - 1 => E
        $ => A          :MLOAD(array_compare_inA + E)
        $ => B          :MLOAD(array_compare_inB + E)

        $               :LT, JMPC(array_compare_ALTB)
        A => D
        B => A
        D => B
        $               :LT, JMPC(array_compare_AGTB)

        C - 1 => C      :JMPZ(array_compare_AEQB)
                        :JMP(array_compare_same_len)

array_compare_AGTB:
        2               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_AEQB:
        1               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_ALTB:
        0               :MSTORE(array_compare_result)
                        :JMP(array_compare_end)

array_compare_end:
        $ => RR         :MLOAD(array_compare_RR)
                        :RETURN