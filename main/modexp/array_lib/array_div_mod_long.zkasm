;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Assumes: len(inB) >= 2
;;
;; array_div_mod_long:
;;             in: 
;;                  · C ∈ [0, 2²⁵⁶ - 1], the len of inA
;;                  · D ∈ [0, 2²⁵⁶ - 1], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output: 
;;                  · [quo,rem] = [inA / inB, inA % inB], with len(quo) <= C - D, len(rem) <= D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

VAR GLOBAL array_div_mod_long_inA[300]
VAR GLOBAL array_div_mod_long_inB[300]
VAR GLOBAL array_div_mod_long_quo[299]
VAR GLOBAL array_div_mod_long_rem[300]

VAR GLOBAL array_div_mod_long_len_inA
VAR GLOBAL array_div_mod_long_len_inB
VAR GLOBAL array_div_mod_long_len_quo
VAR GLOBAL array_div_mod_long_len_rem

VAR GLOBAL array_div_mod_long_RR

; ERROR CODES (B)
; 0 - no error
; 1 - inB is zero

array_div_mod_long:
        RR              :MSTORE(array_div_mod_long_RR)
        C               :MSTORE(array_div_mod_long_len_inA)
        D               :MSTORE(array_div_mod_long_len_inB)

        ; Let's cover the edge cases
        ; 1] Check if inA = 0
        ${(C != 1) || (mem.array_div_mod_long_inA != 0)}   :JMPZ(array_div_mod_long_inA_is_zero)

        ; 2] Check if inB = 0
        ${(D != 1) || (mem.array_div_mod_long_inB != 0)}   :JMPZ(array_div_mod_long_inB_is_zero)

        ; 3] Check if inA = inB or inA < inB
        ;                                 :CALL(array_compare) ; TODO: Finish
        ; $ => A                          :MLOAD(array_compare_result), JMPZ(array_div_mod_long_inALTinB)
        ; 1n => B     
        ; 1               :EQ, JMPC(array_div_mod_long_same_input)

        ; From here, it is assumed that inA > inB
        $${MPdiv(addr.array_div_mod_long_inA,mem.array_div_mod_long_len_inA,addr.array_div_mod_long_inB,mem.array_div_mod_long_len_inB)}

        0 => RR,E
                        :JMP(array_div_mod_long_prepare_mul_quo_inB)

; Begin of edge cases
array_div_mod_long_inA_is_zero:
        1               :MLOAD(array_div_mod_long_len_inA)
        0n              :MLOAD(array_div_mod_long_inA)

        0n              :MSTORE(array_div_mod_long_quo)
        0n              :MSTORE(array_div_mod_long_rem)
        1               :MSTORE(array_div_mod_long_len_quo)
        1               :MSTORE(array_div_mod_long_len_rem)
        0 => B          :JMP(array_div_mod_long_end)

array_div_mod_long_inB_is_zero:
        1               :MLOAD(array_div_mod_long_len_inB)
        0n              :MLOAD(array_div_mod_long_inB)
        1 => B          :JMP(array_div_mod_long_end)

array_div_mod_long_same_input:
        1n              :MSTORE(array_div_mod_long_quo)
        0n              :MSTORE(array_div_mod_long_rem)
        0 => B          :JMP(array_div_mod_long_end)

array_div_mod_long_inALTinB:
        C - 1n => C     :JMPZ(array_div_mod_long_inALTinB_before_end)
        $ => A          :MLOAD(array_div_mod_long_inA + RR)
        A               :MSTORE(array_div_mod_long_rem + RR)
        RR + 1n => RR   :JMP(array_div_mod_long_inALTinB)

array_div_mod_long_inALTinB_before_end:
        0n              :MSTORE(array_div_mod_long_quo)
        0 => B          :JMP(array_div_mod_long_end)
; End of edge cases

array_div_mod_long_prepare_mul_quo_inB:
        ${receiveLenQuotient()} => C
        $ => D          :MLOAD(array_div_mod_long_len_inB)

array_div_mod_long_quo_to_mul:
        ${receiveQuotientChunk(RR)} => A
        A               :MSTORE(array_div_mod_long_quo + RR)
        A               :MSTORE(array_mul_long_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_div_mod_long_inB_to_mul)
                        :JMP(array_div_mod_long_quo_to_mul)

array_div_mod_long_inB_to_mul:
        $ => A          :MLOAD(array_div_mod_long_inB + E)
        A               :MSTORE(array_mul_long_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(array_div_mod_long_mul_quo_inB)
                        :JMP(array_div_mod_long_inB_to_mul)

array_div_mod_long_mul_quo_inB:
                        :CALL(array_mul_long)

        ; prepare next
        0 => RR,E
        $ => C          :MLOAD(array_mul_long_len_out)
        ${receiveLenRemainder()} => D

array_div_mod_long_res_to_add:
        $ => A          :MLOAD(array_mul_long_out + RR)
        A               :MSTORE(array_add_AGTB_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_div_mod_long_rem_to_add)
                        :JMP(array_div_mod_long_res_to_add)

array_div_mod_long_rem_to_add:
        ${receiveRemainderChunk(E)} => A
        A               :MSTORE(array_div_mod_long_rem + E)
        A               :MSTORE(array_add_AGTB_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(array_div_mod_long_add_res_rem)
                        :JMP(array_div_mod_long_rem_to_add)

array_div_mod_long_add_res_rem:
                        :CALL(array_add_AGTB)

        ; prepare next
        0 => RR,E
        $ => C          :MLOAD(array_add_AGTB_len_out)
        $ => D          :MLOAD(array_div_mod_long_len_inA)

array_div_mod_long_compare_inA:
        $ => A          :MLOAD(array_add_AGTB_out + RR)
        A               :MSTORE(array_compare_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(array_div_mod_long_compare_inB)
                        :JMP(array_div_mod_long_compare_inA)

array_div_mod_long_compare_inB:
        $ => A          :MLOAD(array_div_mod_long_inA + E)
        A               :MSTORE(array_compare_inB + E)
        E + 1 => E
        E => A
        C => B
        $               :EQ, JMPC(array_div_mod_long_compare)
                        :JMP(array_div_mod_long_compare_inB)

array_div_mod_long_compare:
                        :CALL(array_compare)
        1               :MLOAD(array_compare_result)
        0 => B

array_div_mod_long_end:
        $ => RR         :MLOAD(array_div_mod_long_RR)
                        :RETURN