;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: out is trimmed
;;
;; array_mul:
;;             in:
;;                  · C ∈ [1, 64], the len of inA
;;                  · D ∈ [1, 32], the len of inB
;;                  · inA ∈ [0, 2²⁵⁶ - 1]^C, the first input array
;;                  · inB ∈ [0, 2²⁵⁶ - 1]^D, the second input array
;;
;;          output:
;;                  · out = inA·inB, with len(out) <= C + D
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; function array_mul(a: bigint[], b: bigint[], base: bigint): bigint[] {
;     if (b.length === 1) {
;         return array_mul_short(a, b, base);
;     }
;     return array_mul_long(a, b, base);
; }

VAR GLOBAL array_mul_inA[%ARRAY_MAX_LEN_DOUBLED]
VAR GLOBAL array_mul_inB[%ARRAY_MAX_LEN]
VAR GLOBAL array_mul_out[%ARRAY_MAX_LEN_DOUBLED]
; Note: The output length should not be bigger than %ARRAY_MAX_LEN_DOUBLED because the input is of size %ARRAY_MAX_LEN_DOUBLED
;       only in the case of checking the result of a division of a number of size %ARRAY_MAX_LEN_DOUBLED by a number of size %ARRAY_MAX_LEN
;       i.e., that a = q·b + r. Mul is used to mutiply q by b which cannot be bigger than %ARRAY_MAX_LEN_DOUBLED (the size of a)
VAR GLOBAL array_mul_len_inA
VAR GLOBAL array_mul_len_inB
VAR GLOBAL array_mul_len_out

VAR GLOBAL array_mul_RR

array_mul:
        %MAX_CNT_STEPS - STEP        - 6 - 3*C - 3*D - 1  :JMPN(outOfCountersStep)

        RR              :MSTORE(array_mul_RR)

        C               :MSTORE(array_mul_len_inA)
        D               :MSTORE(array_mul_len_inB)

        C - 1 => RR
        D - 1 => E
        D - 1           :JMPZ(array_mul_inA_to_mul_short) ; worst case is mul long
; Long
array_mul_inA_to_mul_long:
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_long_inA + RR)
        RR - 1 => RR    :JMPN(array_mul_inB_to_mul_long, array_mul_inA_to_mul_long)

array_mul_inB_to_mul_long:
        $ => A          :MLOAD(array_mul_inB + E)
        A               :MSTORE(array_mul_long_inB + E)
        E - 1 => E      :JMPN(array_mul_compute_long, array_mul_inB_to_mul_long)

array_mul_compute_long:
                        :CALL(array_mul_long)

        %MAX_CNT_STEPS - STEP - 4   :JMPN(outOfCountersStep)

        $ => C          :MLOAD(array_mul_long_len_out)
        C               :MSTORE(array_mul_len_out)
        C - 1 => RR

        %MAX_CNT_STEPS - STEP - 3*C - 2 :JMPN(outOfCountersStep)

array_mul_assign_long:
        $ => A          :MLOAD(array_mul_long_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR - 1 => RR    :JMPN(array_mul_end, array_mul_assign_long)

; Short
array_mul_inA_to_mul_short:
        $ => A          :MLOAD(array_mul_inA + RR)
        A               :MSTORE(array_mul_short_inA + RR)
        RR - 1 => RR    :JMPN(array_mul_inB_to_mul_short, array_mul_inA_to_mul_short)

array_mul_inB_to_mul_short:
        $ => A          :MLOAD(array_mul_inB)
        A               :MSTORE(array_mul_short_inB)

array_mul_compute_short:
                        :CALL(array_mul_short)

        %MAX_CNT_STEPS - STEP - 4   :JMPN(outOfCountersStep)

        $ => C          :MLOAD(array_mul_short_len_out)
        C               :MSTORE(array_mul_len_out)
        C - 1 => RR

        %MAX_CNT_STEPS - STEP - 3*C - 2 :JMPN(outOfCountersStep)

array_mul_assign_short:
        $ => A          :MLOAD(array_mul_short_out + RR)
        A               :MSTORE(array_mul_out + RR)
        RR - 1 => RR    :JMPN(array_mul_end, array_mul_assign_short)

array_mul_end:
        $ => RR         :MLOAD(array_mul_RR)
                        :RETURN