
; @info return Einit without 0's
; @in E => Einit with 0's
; @out E => Einit without 0's

VAR GLOBAL modexp_getInit_RR

modexp_getInit:
    RR                  :MSTORE(modexp_getInit_RR)
    1 => C

modexp_getInit2:
                        :CALL(MLOADX)
    31 => D             :CALL(SHRarith)
    A                   :JMPZ(modexp_getInit2)
    E - 1 => E
    $ => RR             :MLOAD(modexp_getInit_RR)
                        :RETURN

VAR GLOBAL tmpVarAmodexp
VAR GLOBAL tmpVarBmodexp
VAR GLOBAL tmpVarCmodexp
VAR GLOBAL tmpVarDmodexp
VAR GLOBAL tmpVarEmodexp
VAR GLOBAL tmpZkPCmodexp
VAR GLOBAL modExpArrayIndex

modexp_getBase:
    RR                  :MSTORE(tmpZkPCmodexp)
    A                   :MSTORE(tmpVarAmodexp)
    B                   :MSTORE(tmpVarBmodexp)
    C                   :MSTORE(tmpVarCmodexp)
    D                   :MSTORE(tmpVarDmodexp)
    E + C => E          ;E = offset final
    0                   :MSTORE(modExpArrayIndex)

modexp_getBaseLoop:
    C => A
    0 => B
    $                   :EQ,JMPC(modexp_saveBaseLen)
    32 => B
    $                   :LT,JMPC(modexp_getBaseMloadX)
    E - 32 => E
                        :CALL(MLOAD32)
    ${log(A,chunk)}
    C - 32 => C         :JMP(modexp_getBaseMstore)

modexp_getBaseMloadX:
    E - C => E
                        :CALL(MLOADX)
    ${log(A,chunk)}
    32 - C => D         :CALL(SHRarith)
    0 => C

modexp_getBaseMstore:
    E                   :MSTORE(tmpVarEmodexp)
    $ => B, E           :MLOAD(modExpArrayIndex)
    $ => A              :ADD
    0 => B
    $                   :EQ,JMPC(modexp_getBaseFinal)
    ${log(A,chunk)}
    ${log(E,desfase)}
    A                   :MSTORE(modexp_B+E)
    E + 1 => B          :MSTORE(modExpArrayIndex)

modexp_getBaseFinal:
    $ => E              :MLOAD(tmpVarEmodexp),JMP(modexp_getBaseLoop)

modexp_saveBaseLen:
    $ => B              :MLOAD(modExpArrayIndex)
    ${log(B,lenBase)}
    B                   :MSTORE(modexp_Blen),JMP(modexp_getReturn)

modexp_getExp:
    RR                  :MSTORE(tmpZkPCmodexp)
    A                   :MSTORE(tmpVarAmodexp)
    B                   :MSTORE(tmpVarBmodexp)
    C                   :MSTORE(tmpVarCmodexp)
    D                   :MSTORE(tmpVarDmodexp)
    E + C => E          ;E = offset final
    0                   :MSTORE(modExpArrayIndex)

modexp_getExpLoop:
    C => A
    0 => B
    $                   :EQ,JMPC(modexp_saveExpLen)
    32 => B
    $                   :LT,JMPC(modexp_getExpMloadX)
    E - 32 => E
    ${log(E,offset)}
                        :CALL(MLOAD32)
    E - 32 => E
    ${log(A,chunk)}
    C - 32 => C         :JMP(modexp_getExpMstore)

modexp_getExpMloadX:
    E - C => E
    ${log(E,offset)}
                        :CALL(MLOADX)
    32 - C => D         :CALL(SHRarith)
    ${log(A,chunk)}
    0 => C

modexp_getExpMstore:
    E                   :MSTORE(tmpVarEmodexp)
    A => E
    $ => B              :MLOAD(modExpArrayIndex)
    $ => A              :ADD
    0 => B
    $                   :EQ,JMPC(modexp_getExpFinal)
    E => A
    $ => E              :MLOAD(modExpArrayIndex)
    ${log(A,chunk)}
    ${log(E,desfase)}
    A                   :MSTORE(modexp_E+E)
    E + 1 => B          :MSTORE(modExpArrayIndex)

modexp_getExpFinal:
    $ => E              :MLOAD(tmpVarEmodexp)
                        :JMP(modexp_getExpLoop)

modexp_saveExpLen:
    $ => B              :MLOAD(modExpArrayIndex)
    ${log(B,lenExp)}
    B                   :MSTORE(modexp_Elen),JMP(modexp_getReturn)

modexp_getMod:
    RR                  :MSTORE(tmpZkPCmodexp)
    A                   :MSTORE(tmpVarAmodexp)
    B                   :MSTORE(tmpVarBmodexp)
    C                   :MSTORE(tmpVarCmodexp)
    D                   :MSTORE(tmpVarDmodexp)
    E + C => E          ;E = offset final
    0                   :MSTORE(modExpArrayIndex)

modexp_getModLoop:
    C => A
    0 => B
    $                   :EQ,JMPC(modexp_saveModLen)
    32 => B
    $                   :LT,JMPC(modexp_getModMloadX)
    E - 32 => E
                        :CALL(MLOAD32)
    ${log(A,chunk)}
    C - 32 => C         :JMP(modexp_getModMstore)

modexp_getModMloadX:
    E - C => E
                        :CALL(MLOADX)
    ${log(A,chunk)}
    32 - C => D         :CALL(SHRarith)
    0 => C

modexp_getModMstore:
    E                   :MSTORE(tmpVarEmodexp)
    $ => B, E           :MLOAD(modExpArrayIndex)
    $ => A              :ADD
    0 => B
    $                   :EQ,JMPC(modexp_getModFinal)
    ${log(A,chunk)}
    ${log(E,desfase)}
    A                   :MSTORE(modexp_M+E)
    E + 1 => B          :MSTORE(modExpArrayIndex)

modexp_getModFinal:
    $ => E              :MLOAD(tmpVarEmodexp),JMP(modexp_getModLoop)

modexp_saveModLen:
    $ => B              :MLOAD(modExpArrayIndex)
    ${log(B,lenMod)}
    B                   :MSTORE(modexp_Mlen),JMP(modexp_getReturn)

modexp_getReturn:
    $ => RR             :MLOAD(tmpZkPCmodexp)
    $ => A              :MLOAD(tmpVarAmodexp)
    $ => B              :MLOAD(tmpVarBmodexp)
    $ => C              :MLOAD(tmpVarCmodexp)
    $ => D              :MLOAD(tmpVarDmodexp)
                        :RETURN
