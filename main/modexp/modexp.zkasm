;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Assumes: the three of B, E, M have no trailing zero chunks
;;
;; modexp:
;; ----------------------------------------
;;          input: 
;;                  · Blen ∈ [1, 300], the len of B
;;                  · Elen ∈ [1, 300], the len of E
;;                  · Mlen ∈ [1, 300], the len of M
;;                  ·     B ∈ [0, 2²⁵⁶ - 1]^Blen, the base represented in little-endian
;;                  ·     E ∈ [0, 2²⁵⁶ - 1]^Elen, the exponent represented in little-endian
;;                  ·     M ∈ [0, 2²⁵⁶ - 1]^Mlen, the modulus represented in little-endian
;;
;;          output: 
;;                  · B^E (mod M) ∈ [0, 2²⁵⁶ - 1]^Mlen
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL modexp_Blen
VAR GLOBAL modexp_Elen
VAR GLOBAL modexp_Mlen
VAR GLOBAL modexp_B[300]
VAR GLOBAL modexp_E[300]
VAR GLOBAL modexp_M[300]

VAR GLOBAL modexp_out[300]
VAR GLOBAL modexp_outlen

VAR GLOBAL modexp_RR

modexp:
        RR              :MSTORE(modexp_RR)

        $ => C          :MLOAD(modexp_Mlen)
        $ => A          :MLOAD(modexp_M)
        A               :MSTORE(array_is_zero_in)
                        :CALL(array_is_zero)
        $ => A          :MLOAD(array_is_zero_result), JMPNZ(modexp_M_is_zero)
        ; From here, M > 0

        $ => C          :MLOAD(modexp_Mlen)
        $ => A          :MLOAD(modexp_M)
        A               :MSTORE(array_is_one_in)
                        :CALL(array_is_one)
        $ => A          :MLOAD(array_is_one_result), JMPNZ(modexp_M_is_one)
        ; From here, M > 1

        1n              :MSTORE(modexp_out)
        1               :MSTORE(modexp_outlen)

        ; prepare for B = B % M
        $ => C          :MLOAD(modexp_Blen)
        $ => D          :MLOAD(modexp_Mlen)
        0 => RR,E

; Compute B = B % M
; -------------------
modexp_B_to_divmod:
        $ => A          :MLOAD(modexp_B + RR)
        A               :MSTORE(array_div_mod_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_M_to_divmod1)
                        :JMP(modexp_B_to_divmod)

modexp_M_to_divmod1:
        $ => A          :MLOAD(modexp_M + E)
        A               :MSTORE(array_div_mod_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(modexp_divmod_B_and_M)
                        :JMP(modexp_M_to_divmod1)

modexp_divmod_B_and_M:
                        :CALL(array_div_mod)

        $ => C          :MLOAD(array_div_mod_len_rem)
        C               :MSTORE(modexp_Blen)
        0 => RR

modexp_rem_from_divmod1:
        $ => A          :MLOAD(array_div_mod_rem + RR)
        A               :MSTORE(modexp_B + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_pre_loop)
                        :JMP(modexp_rem_from_divmod1)
; -------------------

; Begin of edge cases
modexp_M_is_one:
        0                   :MSTORE(modexp_out), JMP(modexp_end)

modexp_M_is_zero:
        0                   :MSTORE(modexp_out), JMP(modexp_end)

modexp_B_is_zero:
        0                   :MSTORE(modexp_out), JMP(modexp_end)
; End of edge cases

modexp_pre_loop:
        ; check if E is zero
        $ => C          :MLOAD(modexp_Elen)
        $ => A          :MLOAD(modexp_E)
        A               :MSTORE(array_is_zero_in)
                        :CALL(array_is_zero)
        $ => A          :MLOAD(array_is_zero_result), JMPNZ(modexp_end)

modexp_loop:
        ; check if B is zero
        $ => C          :MLOAD(modexp_Blen)
        $ => A          :MLOAD(modexp_B)
        A               :MSTORE(array_is_zero_in)
                        :CALL(array_is_zero)
        $ => A          :MLOAD(array_is_zero_result), JMPNZ(modexp_B_is_zero)

        ; check if E is odd
        $ => A          :MLOAD(modexp_E)
        A               :MSTORE(array_is_odd_in)
                        :CALL(array_is_odd)
        $ => A          :MLOAD(array_is_odd_result), JMPNZ(modexp_loop_multiply)
                        return_modexp_loop_multiply:

        $ => C          :MLOAD(modexp_Elen)
        2n              :MSTORE(array_div_mod_short_inB)
        0 => RR

; Compute E = E / 2
; -------------------
modexp_E_to_divmod_short:
        $ => A          :MLOAD(modexp_E + RR)
        A               :MSTORE(array_div_mod_short_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_divmod_E_and_2)
                        :JMP(modexp_E_to_divmod_short)

modexp_divmod_E_and_2:
                        :CALL(array_div_mod_short)

        $ => C          :MLOAD(array_div_mod_short_len_quo)
        C               :MSTORE(modexp_Elen)
        0 => RR

modexp_quo_from_divmod_short:
        $ => A          :MLOAD(array_div_mod_short_quo + RR)
        A               :MSTORE(modexp_E + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_pre_B_square)
                        :JMP(modexp_quo_from_divmod_short)
; -------------------

; Compute B^2
; -------------------
modexp_pre_B_square:
        $ => C          :MLOAD(modexp_Blen)
        0 => RR,E

modexp_B_to_square1:
        $ => A          :MLOAD(modexp_B + RR)
        A               :MSTORE(array_square_in + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_square_B)
                        :JMP(modexp_B_to_square1)

modexp_square_B:
                        :CALL(array_square)

        $ => C          :MLOAD(array_square_len_out)
        $ => D          :MLOAD(modexp_Mlen)
        0 => RR,E

; Compute B = (B^2) % M
modexp_out_to_divmod2:
        $ => A          :MLOAD(array_square_out + RR)
        A               :MSTORE(array_div_mod_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_M_to_divmod2)
                        :JMP(modexp_out_to_divmod2)
modexp_M_to_divmod2:
        $ => A          :MLOAD(modexp_M + E)
        A               :MSTORE(array_div_mod_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(modexp_divmod_out_and_M1)
                        :JMP(modexp_M_to_divmod2)

modexp_divmod_out_and_M1:
                        :CALL(array_div_mod)

        $ => C          :MLOAD(array_div_mod_len_rem)
        C               :MSTORE(modexp_Blen)
        0 => RR

modexp_rem_from_divmod3:
        $ => A          :MLOAD(array_div_mod_rem + RR)
        A               :MSTORE(modexp_B + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_pre_loop)
                        :JMP(modexp_rem_from_divmod3)
; -------------------

modexp_loop_multiply:
        $ => C          :MLOAD(modexp_outlen)
        $ => D          :MLOAD(modexp_Blen)
        0 => RR,E

; Compute out * B
; -------------------
modexp_out_to_mul_long:
        $ => A          :MLOAD(modexp_out + RR)
        A               :MSTORE(array_mul_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_B_to_mul_long)
                        :JMP(modexp_out_to_mul_long)

modexp_B_to_mul_long:
        $ => A          :MLOAD(modexp_B + E)
        A               :MSTORE(array_mul_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(modexp_mul_long_out_and_B)
                        :JMP(modexp_B_to_mul_long)

modexp_mul_long_out_and_B:
                        :CALL(array_mul)

        $ => C          :MLOAD(array_mul_len_out)
        $ => D          :MLOAD(modexp_Mlen)
        0 => RR,E

; Compute out = (out * B) % M
modexp_out_to_divmod1:
        $ => A          :MLOAD(array_mul_out + RR)
        A               :MSTORE(array_div_mod_inA + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(modexp_M_to_divmod)
                        :JMP(modexp_out_to_divmod1)
modexp_M_to_divmod:
        $ => A          :MLOAD(modexp_M + E)
        A               :MSTORE(array_div_mod_inB + E)
        E + 1 => E
        E => A
        D => B
        $               :EQ, JMPC(modexp_divmod_out_and_M2)
                        :JMP(modexp_M_to_divmod)

modexp_divmod_out_and_M2:
                        :CALL(array_div_mod)

        $ => C          :MLOAD(array_div_mod_len_rem)
        C               :MSTORE(modexp_outlen)
        0 => RR

modexp_rem_from_divmod2:
        $ => A          :MLOAD(array_div_mod_rem + RR)
        A               :MSTORE(modexp_out + RR)
        RR + 1 => RR
        RR => A
        C => B
        $               :EQ, JMPC(return_modexp_loop_multiply)
                        :JMP(modexp_rem_from_divmod2)
; -------------------

modexp_end:
        $ => RR             :MLOAD(modexp_RR)
                                :RETURN