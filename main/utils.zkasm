; This file is WIP

VAR GLOBAL tmpVarA
VAR GLOBAL tmpVarB
VAR GLOBAL tmpVarC
VAR GLOBAL tmpVarD
VAR GLOBAL tmpVarE
VAR GLOBAL tmpVarA2
VAR GLOBAL tmpVarB2
VAR GLOBAL tmpVarC2
VAR GLOBAL tmpVarD2
VAR GLOBAL tmpVarE2
VAR GLOBAL arithA
VAR GLOBAL arithB
VAR GLOBAL arithRes1
VAR GLOBAL arithRes2
VAR GLOBAL tmpZkPC
VAR GLOBAL tmpZkPC2

; @info Get absolute value and sign
; @in A => number to convert
; @out A => Absolut value of A
; @out B => Sign of A [1 if negative, 0 positive]
abs:
    0 => B
    ;TODO: fix `$ => B          :SLT,JMPC(absIsNeg)`
    ;when zkproverjs has been updated
    $ => B          :SLT,JMPC(absIsNeg)
                    :RETURN

absIsNeg:
    A => B
    0 => A
    $ => A          :SUB
    1 => B
                    :RETURN

; @info copy MEM A to ctxB SP = 1024
; TODO: copy + 32 bytes
copySP:
    RR              :MSTORE(tmpZkPC2)
    CTX             :MSTORE(currentCTX)
    1024 => SP                             ;destOffset = 0
    $ => CTX        :MLOAD(originCTX)
    $ => E          :MLOAD(argsOffsetCall)
    $ => C          :MLOAD(argsLengthCall) ;length

copyInit:
    C - 1           :JMPN(copyEnd)
    C - 32          :JMPN(copyFinal)
    zkPC+1 => RR    :JMP(MLOAD32)
    $ => CTX        :MLOAD(currentCTX)
    A               :MSTORE(SP++)
    $ => CTX        :MLOAD(originCTX)
    C - 32 => C
                    :JMP(copyInit)

copyFinal:
    zkPC+1 => RR    :JMP(MLOADX)
    $ => CTX        :MLOAD(currentCTX)
    A               :MSTORE(SP++)
    $ => CTX        :MLOAD(originCTX)

copyEnd:
    $ => CTX        :MLOAD(currentCTX)
    $ => RR         :MLOAD(tmpZkPC2)
                    :RETURN

; @info byte length of B
; @in B => number
; @out A => bytes length
getLenBytes:
    RR              :MSTORE(tmpZkPC)
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    0 => C
    B => A

getLenBytesLoop:
    0 => B
    $               :EQ,JMPC(getLenEnd)
    1 => D
    zkPC+1 => RR    :JMP(SHRarith)
    C + 1 => C
                    :JMP(getLenBytesLoop)

getLenEnd:
    C => A
    $ => B          :MLOAD(tmpVarB)
    $ => C          :MLOAD(tmpVarC)
    $ => RR         :MLOAD(tmpZkPC)
                    :RETURN

VAR GLOBAL bytesToStore
VAR GLOBAL isMSTOREX
; @info save value to memory < 32 bytes with offset
; REQUIRE: set bytesToStore with value to use in MSTORE
; @in E => offset
; @in C => length
; @out E => new offset
MSTOREX:
    32 - C          :JMPN(errorMLOADMSTORE)
    32 - C - 1      :JMPN(MSTORE32)
    1               :MSTORE(isMSTOREX)

; @info save value to memory 32 bytes with offset
; REQUIRE: set bytesToStore with value to use in MSTORE
; @in E => offset
; @out E => new offset
MSTORE32:
    RR              :MSTORE(tmpZkPC)
    A               :MSTORE(tmpVarA)
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    D               :MSTORE(tmpVarD)
    E               :MSTORE(tmpVarE)
    E => A
    0x200000 => B
    $               :LT,JMPC(initMSTORE)
                    :JMP(errorMLOADMSTORE)

initMSTORE:
    zkPC+1 => RR    :JMP(offsetUtil)
    $ => B          :MLOAD(isMSTOREX)
    B - 1           :JMPN(finalMSTORE)
    -C              :JMPN(MSTOREX2)
    $ => C          :MLOAD(tmpVarC)
    $ => A          :MLOAD(bytesToStore)
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    zkPC+1 => RR    :JMP(SHLarith)
    A => B
    $ => A          :MLOAD(MEM:E)
    32 - D => D
    zkPC+1 => RR    :JMP(SHLarith)
    zkPC+1 => RR    :JMP(SHRarith)
    A + B           :MSTORE(bytesToStore)
    A + B => A
    0 => C
    0               :MSTORE(isMSTOREX)
                    :JMP(finalMSTORE)

MSTOREX2:
    $ => D          :MLOAD(tmpVarC)
    C + D => D
    $ => A          :MLOAD(MEM:E)
    zkPC+1 => RR    :JMP(SHLarith)
    $ => D          :MLOAD(tmpVarC)
    zkPC+1 => RR    :JMP(SHRarith)
    A => B
    $ => A          :MLOAD(MEM:E+1)
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    A + B => B
    $ => A          :MLOAD(bytesToStore)
    $ => D          :MLOAD(tmpVarC)
    32 - D => D
    zkPC+1 => RR    :JMP(SHRarith)
    zkPC+1 => RR    :JMP(SHLarith)
    A + B           :MSTORE(bytesToStore)
    A + B => A

finalMSTORE:
    -C              :JMPN(memAlignOptionMSTORE)

; (*) NOTE: only using E0 on address indirection, ignores E1..E7
    $ => A          :MLOAD(bytesToStore)
    A               :MSTORE(MEM:E)
    E*32 => E
                    :JMP(offsetMSTORE32)

memAlignOptionMSTORE:
    E               :MSTORE(tmpVarE)

    $ => A          :MLOAD(MEM:E) ; read M0
    $ => B          :MLOAD(MEM:E+1) ; read M1

    ${memAlignWR_W0(A,mem.bytesToStore,C)} => D                    ; no trust calculate W0
    ${memAlignWR_W1(B,mem.bytesToStore,C)} => E                    ; no trust calculate W1
    $               :MEM_ALIGN_WR,MLOAD(bytesToStore)
    E => A
    $ => E          :MLOAD(tmpVarE)
    D               :MSTORE(MEM:E)          ; write W0
    A               :MSTORE(MEM:E+1)        ; write W1
    E*32 + C => E
    $ => A          :MLOAD(isMSTOREX)
    A - 1           :JMPN(offsetMSTORE32)
    $ => C          :MLOAD(tmpVarC)
    E*32 + C => E
    0               :MSTORE(isMSTOREX)
                    :JMP(endMSTORE)

offsetMSTORE32:
    E + 32 => E

endMSTORE:
    $ => A          :MLOAD(tmpVarA)
    $ => B          :MLOAD(tmpVarB)
    $ => C          :MLOAD(tmpVarC)
    $ => D          :MLOAD(tmpVarD)
    $ => RR         :MLOAD(tmpZkPC)
                    :RETURN


VAR GLOBAL isMLOADX
; @info get value from memory (< 32 bytes)
; @in E => offset
; @in C => length
; @out A => value
; @out E => new offset
MLOADX:
    32 - C          :JMPN(errorMLOADMSTORE)
    32 - C - 1      :JMPN(MLOAD32)
    1               :MSTORE(isMLOADX)

; @info get value from memory (32 bytes)
; @in E => offset
; @out A => value
; @out E => new offset
MLOAD32:
    RR              :MSTORE(tmpZkPC)
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    D               :MSTORE(tmpVarD)
    E => A
    0x200000 => B
    $               :LT,JMPC(initMLOAD)
                    :JMP(errorMLOADMSTORE)

initMLOAD:
    zkPC+1 => RR    :JMP(offsetUtil)
    -C              :JMPN(memAlignOptionMLOAD)

    $ => A          :MLOAD(MEM:E)
    $ => B          :MLOAD(isMLOADX)
    E*32 => E
    B - 1           :JMPN(offsetMLOAD32)
                    :JMP(sliceA)

memAlignOptionMLOAD:
    $ => A          :MLOAD(MEM:E)
    $ => B          :MLOAD(MEM:E+1)
    $ => A          :MEM_ALIGN_RD
    E*32 + C => E
    $ => B          :MLOAD(isMLOADX)
    B - 1           :JMPN(offsetMLOAD32)

sliceA:
    $ => C          :MLOAD(tmpVarC)
    32 - C => D
    zkPC+1 => RR    :JMP(SHRarith)
    zkPC+1 => RR    :JMP(SHLarith)
    0               :MSTORE(isMLOADX)
    E*32 + C => E
                    :JMP(endMLOAD)

offsetMLOAD32:
    E + 32 => E

endMLOAD:
    $ => B          :MLOAD(tmpVarB)
    $ => C          :MLOAD(tmpVarC)
    $ => D          :MLOAD(tmpVarD)
    $ => RR         :MLOAD(tmpZkPC)
                    :RETURN

errorMLOADMSTORE:
                    :JMP(endFailed)

; @info check account is empty ( balance == nonce == code == 0x )
; @in E => address
; @out E => isEmpty => 1 = true, 0 = false

isEmptyAccount:
    A                           :MSTORE(tmpVarA)
    B                           :MSTORE(tmpVarB)
    C                           :MSTORE(tmpVarC)
    D                           :MSTORE(tmpVarD)
    
    E => A

    ;Check is precompiled
    10 => B
    $                               :LT,JMPC(isNotEmptyAccount)

    ; read balance
    0 => B,C                    ; balance key smt
    $ => B                      :SLOAD
    0 => A                      
    $                           :LT,JMPC(isNotEmptyAccount)

    ; read nonce
    E => A
    %SMT_KEY_NONCE => B
    $ => B                      :SLOAD
    0 => A                      
    $                           :LT,JMPC(isNotEmptyAccount)

    ; read bytecode
    E => A
    %SMT_KEY_SC_CODE => B
    $ => B                      :SLOAD
    0 => A                      
    $                           :LT,JMPC(isNotEmptyAccount)
    1 => E
                                :JMP(ISEMPTYEnd)

isNotEmptyAccount:
    0 => E
                                :JMP(ISEMPTYEnd)

ISEMPTYEnd:
    $ => A                      :MLOAD(tmpVarA)
    $ => B                      :MLOAD(tmpVarB)
    $ => C                      :MLOAD(tmpVarC)
    $ => D                      :MLOAD(tmpVarD)
                                :RETURN

; @out A => min( requested_gas , all_but_one_64th(63/64) )
computeGasSendCall:
    ; save tmp vars
    B                       :MSTORE(tmpVarB)
    C                       :MSTORE(tmpVarC)
    D                       :MSTORE(tmpVarD)
    E                       :MSTORE(tmpVarE)

    ; compute all_but_one_64th gas
    GAS - ${GAS/64} => A
    $ => B                  :MLOAD(gasCall)
    ; gas_sent_with_call = min(requested_gas, all_but_one_64th)
    $                       :LT,JMPC(computeGasSendCallEnd)
    ; gas to substract
    B => A

computeGasSendCallEnd:
    $ => B                  :MLOAD(tmpVarB)
    $ => C                  :MLOAD(tmpVarC)
    $ => D                  :MLOAD(tmpVarD)
    $ => E                  :MLOAD(tmpVarE)
                            :RETURN

;@in E --> new mem length
saveMem:
    A                           :MSTORE(tmpVarA)
    B                           :MSTORE(tmpVarB)
    E                           :MSTORE(memLength)
    ${(E+31)/32} => A
    ${(B+31)/32} => B
    GAS - 3*A - ${A*A/512} => GAS   :JMPN(outOfGas)
    GAS + 3*B + ${B*B/512} => GAS   :JMPN(outOfGas)
    $ => A                      :MLOAD(tmpVarA)
    $ => B                      :MLOAD(tmpVarB)
                                :RETURN

addARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => A          :MLOAD(arithA)
    $ => B          :MLOAD(arithB)
    $ => E          :ADD

    E              :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

subARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => A          :MLOAD(arithA)
    $ => B          :MLOAD(arithB)
    $ => A          :SUB

    A                :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

mulARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => A          :MLOAD(arithA)
    $ => B          :MLOAD(arithB)
    0 => C
    0 => D
    ${A*B} => E     :ARITH

    E              :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

divARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => E          :MLOAD(arithA)
    $ => A          :MLOAD(arithB)
    ; Check denominator(A) is not zero
    0 => B
    $ => B          :EQ, JMPC(zeroDiv)
    ${E%A} => C
    ${E/A} => B
    0 => D
    E               :ARITH

    B               :MSTORE(arithRes1)
    C               :MSTORE(arithRes2)

    ; check remainder < dividend
    ; Add one to check also the case where remainder = numToDiv
    E => A
    C => B
    $               :LT, JMPC(invalidTx)
    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

zeroDiv:
    0               :MSTORE(arithRes1)
    0               :MSTORE(arithRes2)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)
                    
loadTmp:
    $ => A                  :MLOAD(tmpVarA)
    $ => B                  :MLOAD(tmpVarB)
    $ => C                  :MLOAD(tmpVarC)
    $ => D                  :MLOAD(tmpVarD)
    $ => E                  :MLOAD(tmpVarE)
                            :JMP(RR)
storeTmp:
    A                   :MSTORE(tmpVarA)
    B                   :MSTORE(tmpVarB)
    C                   :MSTORE(tmpVarC)
    D                   :MSTORE(tmpVarD)
    E                   :MSTORE(tmpVarE)
                        :JMP(RR)

;@in A - (A >> D)
;@in D - (A >> D) D bytes
;@out A -  A >> D => A
SHRarith:
    B                       :MSTORE(tmpVarB2)
    C                       :MSTORE(tmpVarC2)
    D                       :MSTORE(tmpVarD2)
    E                       :MSTORE(tmpVarE2)
    A => E
    D => A
    8 => B
    0 => C
    0 => D
    ${A*B} => D             :ARITH
    E => A
                            :JMP(SHRarithinit)

;@in A - (A >> D)
;@in D - (A >> D) D bits
;@out A -  A >> D => A
SHRarithBit:
    B                       :MSTORE(tmpVarB2)
    C                       :MSTORE(tmpVarC2)
    D                       :MSTORE(tmpVarD2)
    E                       :MSTORE(tmpVarE2)

SHRarithinit:
    0 => B
    $                       :EQ,JMPC(SHRarithfinal)
    A => E
    D => B
    255 => A
    $                       :LT,JMPC(SHRarith0)
    E => A
    ${exp(2,D)} => B
    ${B-1} => B
    $ => C                  :AND
    ${exp(2,D)} => B
    ${E/B} => A
    0 => D
    E                       :ARITH
                            :JMP(SHRarithfinal)

SHRarith0:
    0 => A

SHRarithfinal:
    $ => B                      :MLOAD(tmpVarB2)
    $ => C                      :MLOAD(tmpVarC2)
    $ => D                      :MLOAD(tmpVarD2)
    $ => E                      :MLOAD(tmpVarE2)
                                :JMP(RR)

;@in A - (A << D)
;@in D - (A << D) D bytes
;@out A -  A << D => A
SHLarith:
    B                       :MSTORE(tmpVarB2)
    C                       :MSTORE(tmpVarC2)
    D                       :MSTORE(tmpVarD2)
    E                       :MSTORE(tmpVarE2)
    A => E
    D => A
    8 => B
    0 => C
    0 => D
    ${A*B} => D             :ARITH
    E => A
                            :JMP(SHLarithinit)
;@in A - (A << D)
;@in D - (A << D) D bits
;@out A -  A << D => A
SHLarithBit:
    B                       :MSTORE(tmpVarB2)
    C                       :MSTORE(tmpVarC2)
    D                       :MSTORE(tmpVarD2)
    E                       :MSTORE(tmpVarE2)

SHLarithinit:
    A => E
    0 => A
    D => B
    $                       :EQ,JMPC(SHLarithfinal) ; if D == 0 --> no shift
    E => A
    ${exp(2,D)} => B
    ${A*B} => E
    256 - D => D            :JMPN(SHLarith0) ; if D > 256 --> return 0
    ${exp(2,D)} => B
    ${B-1} => B
    A => C
    B => A
    C => B
    $ => C                  :LT
    B => A
    256 - D => D
    ${exp(2,D)} => B
    0 - C                   :JMPN(SHLarithBig)
    0 => D,C
    E                       :ARITH
                            :JMP(SHLarithfinal)

SHLarith0:
    0 => E
                            :JMP(SHLarithfinal)

SHLarithBig:
    256 - D => D
    ${exp(2,D)} => D
    ${A/D} => D
    0 => C
    E                       :ARITH

SHLarithfinal:
    E => A
    $ => B                  :MLOAD(tmpVarB2)
    $ => C                  :MLOAD(tmpVarC2)
    $ => D                  :MLOAD(tmpVarD2)
    $ => E                  :MLOAD(tmpVarE2)
                            :JMP(RR)

;//TODO: check if outOfGas error === stack error --> same code
endFailed:
    $ => A          :MLOAD(originCTX)
    A - 1           :JMPN(invalidTx)
    A => CTX
    $ => GAS        :MLOAD(gasCTX)
    $ => SP         :MLOAD(lastSP)
    $ => PC         :MLOAD(lastPC)
    0               :MSTORE(SP++)
                    :JMP(readCode)

outOfGas:
    ${eventLog(onError, OOG)}
                    :JMP(handleError)
revertTx:
${eventLog(onError, revert)}
                    :JMP(handleError)
invalidProcess:
${eventLog(onError, invalid)}
                    :JMP(handleError)
stackUnderflow:
${eventLog(onError, underflow)}
                    :JMP(handleError)
stackOverflow:
${eventLog(onError, overflow)}
                    :JMP(handleError)
handleError:
    ;revert all state changes
    ;initSR --> balance = balance - gas, nonce + 1
    $ => SR         :MLOAD(initSR)
    $ => C          :MLOAD(currentCTX)
    ;remaining gas = 0
    $ => A          :MLOAD(originCTX)
    0 => B
    $               :EQ,JMPC(stackErrorEnd)
    A => CTX
    ; Add return data context value to origin context
    C               :MSTORE(retDataCTX)
    CTX             :MSTORE(currentCTX)
    $ => GAS        :MLOAD(gasCTX)
    $ => SP         :MLOAD(lastSP)
    $ => PC         :MLOAD(lastPC)
    0               :MSTORE(SP++)
                    :JMP(readCode)

stackErrorEnd:
    ;save Root and jump to send gas to sequencer
    0 => GAS
                    :JMP(sendGasSeq)

;Get offset/32 & offset%32
;@in A offset
;@out E offset/32
;@out C offset%32
offsetUtil:
    ${A >> 5} => E          ; ${A >> 5} -> E (*)
    ${A & 0x1F} => C        ; ${A & 0x1F} -> C
    0x0FFFF - E     :JMPN(stackUnderflow)
    31-C            :JMPN(stackUnderflow)
    E*32+C          :ASSERT
                    :RETURN

moveBalances:

;;;;;;;;
; evmCALL (Move Balances)
;;;;;;;;
        ;Check if is a delegate call
        $ => A                           :MLOAD(isDelegateCall)
        -A                               :JMPN(endMoveBalances)
        ; Decrement original balance
        $ => A                          :MLOAD(txSrcAddr)
        0 => B,C                                                                                ; balance key smt
        $ => A                          :SLOAD                                                  ; Original Balance in E
        $ => B                          :MLOAD(txValue)                                         ; A = E - C
        ; Check has enough balance to pay the value. In case not, means we are in a CALL/CALLCODE
        $                               :LT,JMPC(invalidCall)
        $ => D                          :SUB                                                    ; originalBalance -value in D
        $ => A                          :MLOAD(txSrcAddr)
        0 => B                                                                                  ; balance key smt
        $ => SR                         :SSTORE

        ; Increment destination balance
        $ => A                          :MLOAD(txDestAddr)
        0 => B                                                                                  ; balance key smt
        $ => A                          :SLOAD                                                  ; Original Balance in E
        $ => B                          :MLOAD(txValue)                                         ; E = A + C
        $ => D                          :ADD 
        $ => A                          :MLOAD(txDestAddr)
        0 => B,C                        ; balance key smt
        $ => SR                         :SSTORE
endMoveBalances:
                                        :RETURN
invalidCall:
        $ => SR                         :MLOAD(initSR)
        $ => A                          :MLOAD(originCTX)
        0 => B
        $                               :EQ,JMPC(handleGas)
        A => CTX
        CTX                             :MSTORE(currentCTX)
        $ => A                          :MLOAD(gasCTX)
        GAS + A => GAS
        $ => SP                         :MLOAD(lastSP)
        $ => PC                         :MLOAD(lastPC)
        0                               :MSTORE(SP++)
                                        :JMP(readCode)

; @info Read bytes opcode PUSHX
; @internalParam {numBlocks} 4 bytes blocks to read
; @internalParam {leftBytes} remaining bytes
; @in D => bytes to read
; @out E => value read
VAR GLOBAL pushBytes
VAR GLOBAL numBlocks
VAR GLOBAL leftBytes
VAR GLOBAL accumulator
readPush:
    D                           :MSTORE(pushBytes)
    D => A
    0                           :MSTORE(accumulator)
    PC + D - 1 => HASHPOS
    ${A >> 2} => B
    ${A & 0x03} => D
    B*4 + D                     :ASSERT
    D                           :MSTORE(leftBytes)
    B                           :MSTORE(numBlocks)
    0 => B
                                :JMP(readPushBlock)

readPushBlock:
    $ => A                      :MLOAD(numBlocks)
    $                           :EQ, JMPC(endPushInit)

    E                           :MLOAD(contractHashId) ; load hash contract identifier

    ; read bytes
    1 => D
    $ => C                      :HASHP(E)
    HASHPOS - 2 => HASHPOS

    $ => A                      :HASHP(E)
    HASHPOS - 2 => HASHPOS
    A*256 + C => C

    $ => A                      :HASHP(E)
    HASHPOS - 2 => HASHPOS
    A*65536 + C => C

    $ => A                      :HASHP(E)
    HASHPOS - 2 => HASHPOS
    A*16777216 + C => C

                                :JMP(doRotate)

doRotate:
    B - 1 => A

                                :JMP(doRotateLoop)

doRotateLoop:
    A                           :JMPN(endRotate)
    ROTL_C => C
    A - 1 => A
                                :JMP(doRotateLoop)

endRotate:
    $ => D                      :MLOAD(accumulator)
    C + D => D
    D                           :MSTORE(accumulator)
    B + 1 => B
                                :JMP(readPushBlock)

endPushInit:
    $ => A                          :MLOAD(leftBytes)
    A - 1                           :JMPN(finalPush)
    0 => C
    0 => B
                                    :JMP(endPushLoop)


endPushLoop:
    $ => A                          :MLOAD(leftBytes)
    $                               :EQ, JMPC(endPushFinal)

    1 => D
    $ => D                          :HASHP(E)
    HASHPOS - 2 => HASHPOS
    B - 1 => A
                                    :JMP(computeFactorLoop)

computeFactorLoop:
    A                               :JMPN(computeFactorEnd)
    256*D => D
    A - 1 => A
                                    :JMP(computeFactorLoop)

computeFactorEnd:
    B + 1 => B
    D + C => C
                                    :JMP(endPushLoop)

endPushFinal:
    $ => B                          :MLOAD(numBlocks)
                                    :JMP(doRotate2)

doRotate2:
    B - 1 => A
                                :JMP(doRotateLoop2)

doRotateLoop2:
    A                           :JMPN(endRotate2)
    ROTL_C => C
    A - 1 => A
                                :JMP(doRotateLoop2)

endRotate2:
    $ => D                      :MLOAD(accumulator)
    C + D => D
    D                           :MSTORE(accumulator)
                                :JMP(finalPush)

finalPush:
    $ => E                      :MLOAD(accumulator)
    $ => D                      :MLOAD(pushBytes)
                                :RETURN

VAR GLOBAL auxBytes
addBatchHashBytebyByte:
        RR                              :MSTORE(tmpZkPC)
        A                               :MSTORE(auxBytes)
        D => B
        B                               :MSTORE(tmpVarB)
        1 => D

utilsAddBatchHashBytebyByte:
        32 - D => D
        $ => A                          :MLOAD(auxBytes)
        zkPC+1 => RR                    :JMP(SHRarith)
        D => B
        1 => D
        zkPC+1 => RR                    :JMP(addBatchHashData)
        B => D
        32 - D => D
        D + 1 => D
        $ => B                          :MLOAD(tmpVarB)
        D - B - 1                       :JMPN(utilsAddBatchHashBytebyByte)
        $ => RR                         :MLOAD(tmpZkPC)
                                        :RETURN
