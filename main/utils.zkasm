; This file is WIP

VAR GLOBAL tmpVarA
VAR GLOBAL tmpVarB
VAR GLOBAL tmpVarC
VAR GLOBAL tmpVarD
VAR GLOBAL tmpVarE
VAR GLOBAL arithA
VAR GLOBAL arithB
VAR GLOBAL arithRes1
VAR GLOBAL arithRes2
VAR GLOBAL tmpZkPC

; @info Get absolute value and sign
; @in A => number to convert
; @out A => Absolut value of A
; @out B => Sign of A [1 if negative, 0 positive]
abs:
    0 => B
    $               :SLT, JMPC(absIsNeg)
                    :RETURN

absIsNeg:
    A => B
    0 => A
    $ => A          :SUB
    1 => B
                    :RETURN

; @info copy MEM A to ctxB SP = 1024
; TODO: copy + 32 bytes
copySP:
    CTX             :MSTORE(currentCTX)
    1024 => SP                             ;destOffset = 0
    $ => CTX        :MLOAD(originCTX)
    $ => E          :MLOAD(argsOffsetCall)
    $ => C          :MLOAD(argsLengthCall) ;length
    0 - ${E%32}     :JMPN(copyInit2)

copyInit:
    C - 1           :JMPN(copyEnd)
    C - 32          :JMPN(copyFinal)
    $ => A          :MLOAD(MEM:E)
    E + 32 => E
    $ => CTX        :MLOAD(currentCTX)
    A               :MSTORE(SP++)
    $ => CTX        :MLOAD(originCTX)
    C - 32 => C
                    :JMP(copyInit)

copyFinal:
    $ => A          :MLOAD(MEM:E)
    32 - C => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    $ => CTX        :MLOAD(currentCTX)
    A               :MSTORE(SP++)
                    :JMP(copyEnd)

copyInit2:
    C - 1           :JMPN(copyEnd)
    C - 32          :JMPN(copyFinal2)
    ${E%32} => D
    ${(E/32)*32} => E
    $ => A          :MLOAD(MEM:E)
    ${A << (D*8)} => B
    32 - D => D
    E + 32 => E
    $ => A          :MLOAD(MEM:E)
    ${A >> (D*8)} => A
    $ => CTX        :MLOAD(currentCTX)
    A + B           :MSTORE(SP++)
    $ => CTX        :MLOAD(originCTX)
    C - 32 => C
                    :JMP(copyInit2)

copyFinal2:
    32 - ${E%32} - C => D       :JMPN(copyFinal22)
    ${E%32} => B
    ${(E/32)*32} => E
    $ => A                      :MLOAD(MEM:E)
    32 - C => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    $ => CTX                    :MLOAD(currentCTX)
    A                           :MSTORE(SP++)
                                :JMP(copyEnd)

copyFinal22:
    ${E%32} => D
    ${(E/32)*32} => E
    $ => A                  :MLOAD(MEM:E)
    ${A << (D*8)} => B
    E + 32 => E
    $ => A                  :MLOAD(MEM:E)
    C - 32 + D => D
    32 - D => D
    ${A >> (D*8)} => A
    32 - C => D
    ${A << (D*8)} => A
    $ => CTX                :MLOAD(currentCTX)
    A + B                   :MSTORE(SP++)

copyEnd:
    $ => CTX        :MLOAD(currentCTX)
                    :RETURN

; @info byte length of B
; @in B => number
; @out A => bytes length
getLenBytes:
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    0 => C
    B => A

getLenBytesLoop:
    0 => B
    $ => B          :EQ
    0 - B           :JMPN(getLenEnd)
    1 => D
    ${A >> (D*8)} => A
    C + 1 => C
                    :JMP(getLenBytesLoop)

getLenEnd:
    C => A
    $ => B          :MLOAD(tmpVarB)
    $ => C          :MLOAD(tmpVarC)
                    :RETURN

; @info save value to memory 32 bytes with offset
; REQUIRE: set bytesToStore with value to use in MSTORE
; @in E => offset
; @out E => new offset

VAR GLOBAL bytesToStore

MSTORE32:
    A               :MSTORE(tmpVarA)
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    D               :MSTORE(tmpVarD)
    E               :MSTORE(tmpVarE)
    ${E%32} - 1     :JMPN(MSTORE322)
    ${E%32} => C
    ${(E/32)*32} => E
    $ => A          :MLOAD(MEM:E)
    32 - C => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    A => B
    $ => A          :MLOAD(bytesToStore)
    C => D
    ${A >> (D*8)} => A
    A + B           :MSTORE(MEM:E)
    E + 32 => E                                    ;new offset
    $ => A          :MLOAD(MEM:E)
    C => D
    ${A << (D*8)} => A
    ${A >> (D*8)} => A
    A => B
    $ => A          :MLOAD(bytesToStore)
    32 - C => D
    ${A << (D*8)} => A
    A + B           :MSTORE(MEM:E)
    $ => E          :MLOAD(tmpVarE)
    E + 32 => E
                    :JMP(MSTOREend)

MSTORE322:
    $ => A          :MLOAD(bytesToStore)
    A               :MSTORE(MEM:E)
    E + 32 => E
                    :JMP(MSTOREend)

; @info save value to memory < 32 bytes with offset
; REQUIRE: set bytesToStore with value to use in MSTORE
; @in E => offset
; @in C => length
; @out E => new offset

MSTOREX:
    A                           :MSTORE(tmpVarA)
    B                           :MSTORE(tmpVarB)
    C                           :MSTORE(tmpVarC)
    D                           :MSTORE(tmpVarD)
    E                           :MSTORE(tmpVarE)
    32 - ${E%32} - C            :JMPN(MSTOREX2)
    ${E%32} => D
    ${(E/32)*32} => E
    $ => A                      :MLOAD(bytesToStore)
    ${A >> (D*8)} => B
    $ => A                      :MLOAD(MEM:E)
    32 - D => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    A + B                       :MSTORE(MEM:E)
    $ => E                      :MLOAD(tmpVarE)
    E + C => E                                    ;new offset
                                :JMP(MSTOREend)

MSTOREX2:
    ${E%32} => D
    ${(E/32)*32} => E
    $ => A                      :MLOAD(bytesToStore)
    ${A >> (D*8)} => B
    $ => A                      :MLOAD(MEM:E)
    32 - D => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    A + B                       :MSTORE(MEM:E)
    E + 32 => E
    $ => A                      :MLOAD(bytesToStore)
    ${A << (D*8)} => B
    $ => A                      :MLOAD(MEM:E)
    C - D => D
    ${A >> (D*8)} => A
    A + B                       :MSTORE(MEM:E)
    $ => E                      :MLOAD(tmpVarE)
    E + C => E                                    ;new offset

MSTOREend:
    $ => A                      :MLOAD(tmpVarA)
    $ => B                      :MLOAD(tmpVarB)
    $ => C                      :MLOAD(tmpVarC)
    $ => D                      :MLOAD(tmpVarD)
                                :RETURN


; @info get value from memory (32 bytes)
; @in E => offset
; @out A => value
; @out E => new offset

MLOAD32:
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    D               :MSTORE(tmpVarD)
    
    32 => A
    ${E%A} => C
    ${E/A} => B
    0 => D
    E               :ARITH 

    C - 1     :JMPC(MLOAD322)
    ; ${(E/32)*32} => E - floor E
    ${E%A} => C
    ${E/A} => B
    0 => D
    E               :ARITH 

    C               :MSTORE(tmpVarA)
    0 => C
    ${A*B} => E     :ARITH
    $ => C          :MLOAD(tmpVarA)

;TODO: Add --> LT(Residu < numToDiv)

    $ => A          :MLOAD(MEM:E)
    C => D
    ${A << (D*8)} => B
    32 - C => D
    E + 32 => E
    $ => A          :MLOAD(MEM:E)
    ${A >> (D*8)} => A
    A + B => A
    E + C => E                                      ;new offset
                    :JMP(MLOADend)

MLOAD322:
    $ => A          :MLOAD(MEM:E)
    E + 32 => E                                     ;new offset
                    :JMP(MLOADend)

; @info get value from memory (32 bytes)
; @in E => offset
; @in C => length
; @out A => value
; @out E => new offset

MLOADX:
    B               :MSTORE(tmpVarB)
    C               :MSTORE(tmpVarC)
    D               :MSTORE(tmpVarD)
    E               :MSTORE(tmpVarE)
    32 - ${E%32} - C => D       :JMPN(MLOADX2)
    ${E%32} => B
    ${(E/32)*32} => E
    $ => A                      :MLOAD(MEM:E)
    B => D
    ${A << (D*8)} => A
    32 - C => D
    ${A >> (D*8)} => A
    ${A << (D*8)} => A
    E + B + C => E                                    ;new offset
                                :JMP(MLOADend)

MLOADX2:
    ${E%32} => D
    ${(E/32)*32} => E
    $ => A                  :MLOAD(MEM:E)
    ${A << (D*8)} => B
    E + 32 => E
    $ => A                  :MLOAD(MEM:E)
    C - 32 + D => D
    32 - D => D
    ${A >> (D*8)} => A
    32 - C => D
    ${A << (D*8)} => A
    A + B => A
    E                       :MLOAD(tmpVarE)
    E + C => E                                    ;new offset

MLOADend:
    $ => B                      :MLOAD(tmpVarB)
    $ => C                      :MLOAD(tmpVarC)
    $ => D                      :MLOAD(tmpVarD)
                                :RETURN

; @info check account is empty ( balance == nonce == code == 0x )
; @in E => address
; @out E => isEmpty

ISEMPTY:
    A                           :MSTORE(tmpVarA)
    B                           :MSTORE(tmpVarB)
    C                           :MSTORE(tmpVarC)
    D                           :MSTORE(tmpVarD)
    ; read balance
    E => A
    0 => B,C
    $ => A                      :SLOAD
    $ => A                      :EQ
    A - 1                       :JMPN(ISEMPTYSet0)

    ; read nonce
    E => A
    1 => B
    $ => A                      :SLOAD
    0 => B
    $ => A                      :EQ
    A - 1                       :JMPN(ISEMPTYSet0)

    ; read bytecode
    E => A
    2 => B
    $ => A                      :SLOAD
    0 => B
    $ => A                      :EQ
    A - 1                       :JMPN(ISEMPTYSet0)

ISEMPTYSet1:
    1 => E
                                :JMP(ISEMPTYEnd)

ISEMPTYSet0:
    0 => E
                                :JMP(ISEMPTYEnd)

ISEMPTYEnd:
    $ => A                      :MLOAD(tmpVarA)
    $ => B                      :MLOAD(tmpVarB)
    $ => C                      :MLOAD(tmpVarC)
    $ => D                      :MLOAD(tmpVarD)
                                :RETURN

; @out A => min( requested_gas , all_but_one_64th(63/64) )
computeGasSendCall:
    ; save tmp vars
    B                       :MSTORE(tmpVarB)
    C                       :MSTORE(tmpVarC)
    D                       :MSTORE(tmpVarD)
    E                       :MSTORE(tmpVarE)

    ; compute all_but_one_64th gas
    GAS - ${GAS/64} => A
    $ => B                  :MLOAD(gasCall)
    ; gas_sent_with_call = min(requested_gas, all_but_one_64th)
    $ => D                  :LT
    0 - D                   :JMPC(computeGasSendCallEnd)
    ; gas to substract
    B => A

computeGasSendCallEnd:
    $ => B                  :MLOAD(tmpVarB)
    $ => C                  :MLOAD(tmpVarC)
    $ => D                  :MLOAD(tmpVarD)
    $ => E                  :MLOAD(tmpVarE)
                            :RETURN

;@in E --> new mem length
saveMem:
    A                           :MSTORE(tmpVarA)
    B                           :MSTORE(tmpVarB)
    E                           :MSTORE(memLength)
    ${(E+31)/32} => A
    ${(B+31)/32} => B
    GAS - 3*A - ${A*A/512} => GAS
    GAS + 3*B + ${B*B/512} => GAS
    $ => A                      :MLOAD(tmpVarA)
    $ => B                      :MLOAD(tmpVarB)
                                :RETURN
addARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => A          :MLOAD(arithA)
    $ => C          :MLOAD(arithB)
    1 => B
    0 => D
    ${A+C} => E     :ARITH

    E              :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

subARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => E          :MLOAD(arithA)
    $ => C          :MLOAD(arithB)
    1 => B
    0 => D
    ${E-C} => A
    E                :ARITH

    A                :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

mulARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => A          :MLOAD(arithA)
    $ => B          :MLOAD(arithB)
    0 => C
    0 => D
    ${A*B} => E     :ARITH

    E              :MSTORE(arithRes1)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

divARITH:

    RR              :MSTORE(tmpZkPC)
    zkPC+1 => RR    :JMP(storeTmp)

    $ => E          :MLOAD(arithA)
    $ => A          :MLOAD(arithB)
    ${E%A} => C
    ${E/A} => B
    0 => D
    E               :ARITH ;TODO: Add --> LT(Residu < numToDiv)

    B               :MSTORE(arithRes1)
    C               :MSTORE(arithRes2)

    zkPC+1 => RR    :JMP(loadTmp)
    $ => RR         :MLOAD(tmpZkPC)
                    :JMP(RR)

loadTmp:
    $ => A                  :MLOAD(tmpVarA)
    $ => B                  :MLOAD(tmpVarB)
    $ => C                  :MLOAD(tmpVarC)
    $ => D                  :MLOAD(tmpVarD)
    $ => E                  :MLOAD(tmpVarE)
                            :JMP(RR)
storeTmp:
    A                   :MSTORE(tmpVarA)
    B                   :MSTORE(tmpVarB)
    C                   :MSTORE(tmpVarC)
    D                   :MSTORE(tmpVarD)
    E                   :MSTORE(tmpVarE)
                        :JMP(RR)