: secp256k1_init


    ${2**256-4294968273} => A
    1 => B
    4294968273 => C
    1 => D
    0                                       : ARITH
    A                                       : MSTORE(secp256k1_q)
    $${ var secp256k1_qq = A}

    7                                       : MSTORE(secp256k1_b)

    $ => E                                  : MLOAD(cb)
                                            : JMP(E)










:secp256k1_adddiferent:

;  s = (x1-x2) / (y1 - y2)
    $ => A                                  : MLOAD(secp256k1_y1)
    $ => B                                  : MLOAD(secp256k1_y2)
    A-B => C
    $ => A                                  : MLOAD(secp256k1_x1)
    $ => B                                  : MLOAD(secp256k1_x2)
    A-B => B
    ${C/B} => A           
    A                                       : MSTORE(secp256k1_s)          
    $((A*B + C)\(2**256) ) => D
    $((A*B + C)%(2**256) ) => E             : ARITH     


    $ => A                                  : MLOAD(q)
    ${ (D*(2**256) + E)\A  } => B
    0 => C
    E                                       : ARITH

; x3 = s*s -s1 -x2

    $ => A, B                               : MLOAD(secp256k1_s)
    $ => C                                  : MLOAD(secp256k1_x1)
    $ => D                                  : MLOAD(secp256k1_x2)
    ${ (A*B - C -D) % secp256k1_qq} => E          
    E                                       : MSTORE(secp256k1_x3)
    -C-D-E => C
    $((A*B + C)\(2**256) ) => D
    $((A*B + C)%(2**256) ) => E             : ARITH     

    $ => A          : MLOAD(q)
    ${ (D*(2**256) + E)\A  } => B
    0 => C
    E                                       : ARITH

; y3 = y1 + s*(x3-x1)

    $ => A                                  : MLOAD(secp256k1_s)
    $ => B                                  : MLOAD(secp256k1_x3)
    $ => C                                  : MLOAD(secp256k1_x1)
    B-C => B
    $ => C                                  : MLOAD(secp256k1_y1)
    ${ (A*B + C)%secp256k1_qq } => D 

    D                                       : MSTORE(secp256k1_y3)  

    C-D => C
    $((A*B + C)\(2**256) ) => D
    $((A*B + C)%(2**256) ) => E             : ARITH     

    $ => A                                  : MLOAD(q)
    ${ (D*(2**256) + E)\A  } => B
    0 => C
    E                                       : ARITH

$ => E                                      : MLOAD(cb)
                                            : JMP(E)






