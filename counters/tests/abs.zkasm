INCLUDE "../initIncludes.zkasm"
start:
    1000000 => GAS

operation:
    ; @info Get absolute value and sign
    ; @in A => number to convert
    ; @out A => Absolut value of A
    ; @out B => Sign of A [1 if negative, 0 positive]
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => A
             :CALL(abs)

    %ABS_STEP - STEP:JMPN(failedCounters)
    %ABS_CNT_BINARY - CNT_BINARY :JMPNZ(failedCounters)
    %ABS_CNT_ARITH - CNT_ARITH :JMPNZ(failedCounters)
    %ABS_CNT_KECCAK_F - CNT_KECCAK_F :JMPNZ(failedCounters)
    %ABS_CNT_MEM_ALIGN - CNT_MEM_ALIGN :JMPNZ(failedCounters)
    %ABS_CNT_PADDING_PG - CNT_PADDING_PG :JMPNZ(failedCounters)
    %ABS_CNT_POSEIDON_G - CNT_POSEIDON_G :JMPNZ(failedCounters)
finalizeExecution:
0 => A,B,C,D,E,CTX, SP, PC, GAS,  SR, HASHPOS, RR ; Set all registers to 0
                                                                        :JMP(finalWait)
readCode:
    :RETURN
failedCounters:
2 => A
1       :ASSERT

INCLUDE "../endIncludes.zkasm"