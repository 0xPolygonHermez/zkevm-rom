; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

CONSTL %BN254_P = 21888242871839275222246405745257275088696311157297823662689037894645226208583n
CONSTL %BN254_P_MINUS_ONE = 21888242871839275222246405745257275088696311157297823662689037894645226208582n
CONSTL %BN254_R = 21888242871839275222246405745257275088548364400416034343698204186575808495617n
CONSTL %BN254_E_B = 3n

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; 1] 0·𝒪 = 𝒪
        0n                                                                              :MSTORE(ecMul_k)
        0n                                                                              :MSTORE(ecMul_P_x)
        0n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        0n                                                                              :MLOAD(ecMul_Q_x)
        0n                                                                              :MLOAD(ecMul_Q_y)

        ; 2] k·𝒪 = 𝒪
        5n                                                                              :MSTORE(ecMul_k)
        0n                                                                              :MSTORE(ecMul_P_x)
        0n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        0n                                                                              :MLOAD(ecMul_Q_x)
        0n                                                                              :MLOAD(ecMul_Q_y)

        ; 3] 0·P = 𝒪, where P != 𝒪
        0n                                                                              :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        0n                                                                              :MLOAD(ecMul_Q_x)
        0n                                                                              :MLOAD(ecMul_Q_y)

        ; 4] P not in range
        0n                                                                              :MSTORE(ecMul_k)
        21888242871839275222246405745257275088696311157297823662689037894645226208584n  :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        1 => A
        1                                                                               :EQ

        0n                                                                              :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        21888242871839275222246405745257275088696311157297823662689037894645226208585n  :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        2 => A
        1                                                                               :EQ

        ; 5] P not in E
        0n                                                                              :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        0n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        3 => A
        1                                                                               :EQ

        65n                                                                             :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        0n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        3 => A
        1                                                                               :EQ

        ; 6] k·P when k != 0
        1n                                                                              :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        1n                                                                              :MLOAD(ecMul_Q_x)
        2n                                                                              :MLOAD(ecMul_Q_y)

        2n                                                                              :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        1368015179489954701390400359078579693043519447331113978918064868415326638035n   :MLOAD(ecMul_Q_x)
        9918110051302171585080402603319702774565515993150576347155970296011118125764n   :MLOAD(ecMul_Q_y)

        65n                                                                             :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        21184532036463169063041779836861514142873086093180850953095098556309204188255n  :MLOAD(ecMul_Q_x)
        16870949628445799017882714788639508275834535486794531840392367353784571921174n  :MLOAD(ecMul_Q_y)

        10000000089n                                                                    :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        4768044760451824005417871472283223457728569810854115125480649095031772328870n   :MLOAD(ecMul_Q_x)
        21389337952468851259287213083493638952853622949895525580347877121675081015727n  :MLOAD(ecMul_Q_y)

        57n                                                                             :MSTORE(ecMul_k)
        1745860766704548035074878643814414425056208216948549237180537806484993001172n   :MSTORE(ecMul_P_x)
        10428992577810537311515619307712828512800028181521723820412159824785899508051n  :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        21092868577100313210583214784627729175513062432513303686654820611840644382013n  :MLOAD(ecMul_Q_x)
        10293123368529248350591404721829100625076077203595282162629899903703630633665n  :MLOAD(ecMul_Q_y)

        123456789n                                                                      :MSTORE(ecMul_k)
        1745860766704548035074878643814414425056208216948549237180537806484993001172n   :MSTORE(ecMul_P_x)
        10428992577810537311515619307712828512800028181521723820412159824785899508051n  :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        9551410454255481932113938269904288675272239827491596157984458647610565008967n   :MLOAD(ecMul_Q_x)
        17781856861347070862134441477208204792978952663354273425763774350233183876915n  :MLOAD(ecMul_Q_y)

        21888242871839275222246405745257275088548364400416034343698204186575808495617n  :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        0n                                                                              :MLOAD(ecMul_Q_x)
        0n                                                                              :MLOAD(ecMul_Q_y)

        21888242871839275222246405745257275088548364400416034343698204186575808495618n  :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        1n                                                                              :MLOAD(ecMul_Q_x)
        2n                                                                              :MLOAD(ecMul_Q_y)

        21888242871839275222246405745257275088696311157297823662689037894645226208583n  :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        7793429943220682609834519115512946233910458086191548249060013461061457526887n   :MLOAD(ecMul_Q_x)
        16460968250425543446028981775631045522280113359306664586749259656855967130574n  :MLOAD(ecMul_Q_y)

        21888242871839275222246405745257275088696311157297823662689037894645226208584n  :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        15886422571275617715400903250697722692198979607302343556925904858625057687404n  :MLOAD(ecMul_Q_x)
        9788557113822741943783365060165103517008620829146475047263378292709661309554n   :MLOAD(ecMul_Q_y)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        21415159568991615317144600033915305503576371596506956373206836402282692989778n  :MLOAD(ecMul_Q_x)
        8573070896319864868535933562264623076420652926303237982078693068147657243287n   :MLOAD(ecMul_Q_y)

        ; 7] Worst case scenario in terms of ARITH calls and therefore in terms of number of steps.
        ;    In ecMul, this should be the scalar multiplication with the highest scalar with the
        ;    higher Hamming weight that is lower than r, which in this case is:
        ;    0b101111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        ;      111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        ;      11111111111111111111111111111111111111111111111111111111111111111111111111111111
        ;   plus the alias r for extra steps.
        43599259603836061864165965434386257811036486525223640101096501188059520303104n  :MSTORE(ecMul_k)
        1n                                                                              :MSTORE(ecMul_P_x)
        2n                                                                              :MSTORE(ecMul_P_y)
                                                                                        :CALL(ecMul)
        8041448123897457278601593007848323813197856498612220939414281968624779383026n   :MLOAD(ecMul_Q_x)
        19954199902209052547301623742734796126853744744756027752727888617225334710299n  :MLOAD(ecMul_Q_y)


end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)


INCLUDE "../main/tables/bitwiseReconstruction.zkasm"

INCLUDE "../main/pairings/BN254/doublePointBN254.zkasm"
INCLUDE "../main/pairings/BN254/ecMul.zkasm"
INCLUDE "../main/pairings/BN254/ecAdd.zkasm"

INCLUDE "../main/pairings/FRBN254/reduceFrBN254.zkasm"

INCLUDE "../main/pairings/FPBN254/reduceFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/addFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/subFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/mulFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/squareFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/invFpBN254.zkasm"