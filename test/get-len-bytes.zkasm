VAR GLOBAL test

;; Comments 'readPush' function
; @info Read bytes opcode PUSHX
; @internalParam {numBlocks} 4 bytes blocks to read
; @internalParam {leftBytes} remaining bytes
; @in D => bytes to read
; @out E => value read

start:
    ; init vars
    0 => HASHPOS
    1 => D
    $${var rounds}

    0x0102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20n => B    :CALL(getLenBytes)
    32      :ASSERT
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    32      :ASSERT
    0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    31      :ASSERT
    0x004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    31      :ASSERT
    0x00004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    30      :ASSERT
    0x00000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    29      :ASSERT
    0x0000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    28      :ASSERT
    0x000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    27      :ASSERT
    0x00000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    26      :ASSERT
    0x0000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    25      :ASSERT
    0x000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    24      :ASSERT
    0x00000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    23      :ASSERT
    0x0000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    22      :ASSERT
    0x000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    21      :ASSERT
    0x00000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    20      :ASSERT
    0x0000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    19      :ASSERT
    0x000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    18      :ASSERT
    0x00000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    17      :ASSERT
    0x0000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    16      :ASSERT
    0x000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    15      :ASSERT
    0x00000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    14      :ASSERT
    0x0000000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    13      :ASSERT
    0x000000000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    12      :ASSERT
    0x00000000000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    11      :ASSERT
    0x0000000000000000000000000000000000000000000004FFFFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    10      :ASSERT
    0x000000000000000000000000000000000000000000000004FFFFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    9      :ASSERT
    0x00000000000000000000000000000000000000000000000004FFFFFFFFFFFFFFn => B    :CALL(getLenBytes)
    8      :ASSERT
    0x0000000000000000000000000000000000000000000000000004FFFFFFFFFFFFn => B    :CALL(getLenBytes)
    7      :ASSERT
    0x000000000000000000000000000000000000000000000000000004FFFFFFFFFFn => B    :CALL(getLenBytes)
    6      :ASSERT
    0x00000000000000000000000000000000000000000000000000000004FFFFFFFFn => B    :CALL(getLenBytes)
    5      :ASSERT
    0x0000000000000000000000000000000000000000000000000000000004FFFFFFn => B    :CALL(getLenBytes)
    4      :ASSERT
    0x000000000000000000000000000000000000000000000000000000000004FFFFn => B    :CALL(getLenBytes)
    3      :ASSERT
    0x00000000000000000000000000000000000000000000000000000000000004FFn => B    :CALL(getLenBytes)
    2      :ASSERT
    0x00000000000000000000000000000000000000000000000000000000000001FFn => B    :CALL(getLenBytes)
    2      :ASSERT
    0x000000000000000000000000000000000000000000000000000000000000FFFFn => B    :CALL(getLenBytes)
    2      :ASSERT
    0x0000000000000000000000000000000000000000000000000000000000000004n => B    :CALL(getLenBytes)
    1      :ASSERT
    0x00000000000000000000000000000000000000000000000000000000000000FFn => B    :CALL(getLenBytes)
    1      :ASSERT
    0x000000000000000000000000000000000000000000000000000000000000000Fn => B    :CALL(getLenBytes)
    1      :ASSERT
    0x0000000000000000000000000000000000000000000000000000000000000000n => B    :CALL(getLenBytes)
    0      :ASSERT

                                                                        :JMP(finalizeExecution)

initLoop:
    $${rounds = 32}
    0 => B ; to allow $$

loopAdd32Byte:
    $${rounds = rounds - 1}
    0 => E
    ${(A >> (rounds * 8)) & 0xFF} => E   :HASHP1(E)
    ${rounds}                            :JMPZ(endLoop, loopAdd32Byte)

endLoop:
                                :RETURN

INCLUDE "../main/main.zkasm"
