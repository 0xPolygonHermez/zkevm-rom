; constants needed by executor C++
INCLUDE "../main/constants.zkasm"

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT

        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; array_add
        ; ---------------------------------------------------------------
        ; 1] len(inA) = len(inB)
        3 => C
        3 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inB + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inB + E)
                                                                                        :CALL(array_add)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_add_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_add_out + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_add_out + E)
        3 => E
        1n                                                                              :MLOAD(array_add_out + E)
        4                                                                               :MLOAD(array_add_len_out)

        ; 2] len(inA) = len(inB) + 1
        3 => C
        2 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_inB + E)
                                                                                        :CALL(array_add)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_add_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_add_out + E)
        2 => E
        0n                                                                              :MLOAD(array_add_out + E)
        3 => E
        1n                                                                              :MLOAD(array_add_out + E)
        4                                                                               :MLOAD(array_add_len_out)

        ; 3] len(inA) = len(inB) + 3
        7 => C
        4 => D
        0n                                                                              :MSTORE(array_add_inA)
        1 => E
        0n                                                                              :MSTORE(array_add_inA + E)
        2 => E
        71980342328814551066277152664912916825216970430701952092274083071078176857050n  :MSTORE(array_add_inA + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007907110318705n :MSTORE(array_add_inA + E)
        4 => E
        87552057494100699607633960453116574392480272162273084008350826812719088235448n  :MSTORE(array_add_inA + E)
        5 => E
        29405388739667337424543497575767709934732594998639086405406332616399343873602n  :MSTORE(array_add_inA + E)
        6 => E
        370491411790392985199n                                                          :MSTORE(array_add_inA + E)

        0n                                                                              :MSTORE(array_add_inB)
        1 => E
        0n                                                                              :MSTORE(array_add_inB + E)
        2 => E
        43811746908501644357293832343774991028053014234938611947183500936834952782886n  :MSTORE(array_add_inB + E)
        3 => E
        6019321230n                                                                     :MSTORE(array_add_inB + E)
                                                                                        :CALL(array_add)
        0n                                                                              :MLOAD(array_add_out)
        1 => E
        0n                                                                              :MLOAD(array_add_out + E)
        2 => E
        0n                                                                              :MLOAD(array_add_out + E)
        3 => E
        0n                                                                              :MLOAD(array_add_out + E)
        4 => E
        87552057494100699607633960453116574392480272162273084008350826812719088235449n  :MLOAD(array_add_out + E)
        5 => E
        29405388739667337424543497575767709934732594998639086405406332616399343873602n  :MLOAD(array_add_out + E)
        6 => E
        370491411790392985199n                                                          :MLOAD(array_add_out + E)
        7                                                                               :MLOAD(array_add_len_out)

        ; 4] len(inA) = len(inB) - 3
        4 => C
        7 => D
        0n                                                                              :MSTORE(array_add_inA)
        1 => E
        0n                                                                              :MSTORE(array_add_inA + E)
        2 => E
        43811746908501644357293832343774991028053014234938611947183500936834952782886n  :MSTORE(array_add_inA + E)
        3 => E
        6019321230n                                                                     :MSTORE(array_add_inA + E)

        0n                                                                              :MSTORE(array_add_inB)
        1 => E
        0n                                                                              :MSTORE(array_add_inB + E)
        2 => E
        71980342328814551066277152664912916825216970430701952092274083071078176857050n  :MSTORE(array_add_inB + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007907110318705n :MSTORE(array_add_inB + E)
        4 => E
        87552057494100699607633960453116574392480272162273084008350826812719088235448n  :MSTORE(array_add_inB + E)
        5 => E
        29405388739667337424543497575767709934732594998639086405406332616399343873602n  :MSTORE(array_add_inB + E)
        6 => E
        370491411790392985199n                                                          :MSTORE(array_add_inB + E)
                                                                                        :CALL(array_add)
        0n                                                                              :MLOAD(array_add_out)
        1 => E
        0n                                                                              :MLOAD(array_add_out + E)
        2 => E
        0n                                                                              :MLOAD(array_add_out + E)
        3 => E
        0n                                                                              :MLOAD(array_add_out + E)
        4 => E
        87552057494100699607633960453116574392480272162273084008350826812719088235449n  :MLOAD(array_add_out + E)
        5 => E
        29405388739667337424543497575767709934732594998639086405406332616399343873602n  :MLOAD(array_add_out + E)
        6 => E
        370491411790392985199n                                                          :MLOAD(array_add_out + E)
        7                                                                               :MLOAD(array_add_len_out)
        ; ---------------------------------------------------------------

        ; array_add AGTB
        ; ---------------------------------------------------------------
        ; 1] [2**256-1,2**256-1,2**256-1] + [2**256-1,2**256-1]
        3 => C
        2 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_AGTB_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_AGTB_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_AGTB_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_AGTB_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_AGTB_inB + E)
                                                                                        :CALL(array_add_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_add_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_add_AGTB_out + E)
        2 => E
        0n                                                                              :MLOAD(array_add_AGTB_out + E)
        3 => E
        1n                                                                              :MLOAD(array_add_AGTB_out + E)
        4                                                                               :MLOAD(array_add_AGTB_len_out)
        ; ---------------------------------------------------------------

        ; array_add small
        ; ---------------------------------------------------------------
        ; 1] [2**256-1,2**256-1,2**256-1] + [2**256-1]
        3 => C
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_short_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_short_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_short_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_add_short_inB)
                                                                                        :CALL(array_add_short)
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_add_short_out)
        1 => E
        0n                                                                              :MLOAD(array_add_short_out + E)
        2 => E
        0n                                                                              :MLOAD(array_add_short_out + E)
        3 => E
        1n                                                                              :MLOAD(array_add_short_out + E)
        4                                                                               :MLOAD(array_add_short_len_out)
        ; ---------------------------------------------------------------

        ; array_sub
        ; ---------------------------------------------------------------
        ; 1] len(inA) > len(inB) and inA_i >= inb_i for all i
        3 => C
        2 => D
        5n                                                                              :MSTORE(array_sub_AGTB_inA)
        1 => E
        6n                                                                              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_sub_AGTB_inA + E)

        2n                                                                              :MSTORE(array_sub_AGTB_inB)
        1 => E
        3n                                                                              :MSTORE(array_sub_AGTB_inB + E)
                                                                                        :CALL(array_sub_AGTB)
        3n                                                                              :MLOAD(array_sub_AGTB_out)
        1 => E
        3n                                                                              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        7n                                                                              :MLOAD(array_sub_AGTB_out + E)

        ; 2] len(inA) > len(inB) and inA_i < inb_i for some i
        3 => C
        2 => D
        5n                                                                              :MSTORE(array_sub_AGTB_inA)
        1 => E
        6n                                                                              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_sub_AGTB_inA + E)

        6n                                                                              :MSTORE(array_sub_AGTB_inB)
        1 => E
        3n                                                                              :MSTORE(array_sub_AGTB_inB + E)
                                                                                        :CALL(array_sub_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_sub_AGTB_out)
        1 => E
        2n                                                                              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        7n                                                                              :MLOAD(array_sub_AGTB_out + E)

        ; 3] len(inA) > len(inB) and inA_i < inB_i for all i lower than len(inA)
        3 => C
        2 => D
        5n                                                                              :MSTORE(array_sub_AGTB_inA)
        1 => E
        1n                                                                              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_sub_AGTB_inA + E)

        6n                                                                              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inB + E)
                                                                                        :CALL(array_sub_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_sub_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639928n :MLOAD(array_sub_AGTB_out + E)
        2 => E
        6n                                                                              :MLOAD(array_sub_AGTB_out + E)

        ; 4] len(inB) > len(inA) and inB_i < inA_i for all i lower than len(inB)
        3 => C
        2 => D
        6n                                                                              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inB + E)

        5n                                                                              :MSTORE(array_sub_AGTB_inA)
        1 => E
        1n                                                                              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_sub_AGTB_inA + E)
                                                                                        :CALL(array_sub_AGTB)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_sub_AGTB_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639928n :MLOAD(array_sub_AGTB_out + E)
        2 => E
        6n                                                                              :MLOAD(array_sub_AGTB_out + E)

        ; 5] len(inB) = len(inA) and inB > inA
        3 => C
        3 => D
        6n                                                                              :MSTORE(array_sub_AGTB_inB)
        1 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inB + E)
        2 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inB + E)

        7n                                                                              :MSTORE(array_sub_AGTB_inA)
        1 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inA + E)
        2 => E
        8n                                                                              :MSTORE(array_sub_AGTB_inA + E)
                                                                                        :CALL(array_sub_AGTB)
        1n                                                                              :MLOAD(array_sub_AGTB_out)
        1 => E
        0n                                                                              :MLOAD(array_sub_AGTB_out + E)
        2 => E
        0n                                                                              :MLOAD(array_sub_AGTB_out + E)
        ; ---------------------------------------------------------------

        ; array long mul
        ; ---------------------------------------------------------------
        ; 1] len(inB) = len(inA) and inB > inA
        3 => C
        3 => D
        5n                                                                              :MSTORE(array_mul_inA)
        1 => E
        6n                                                                              :MSTORE(array_mul_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_mul_inA + E)

        2n                                                                              :MSTORE(array_mul_inB)
        1 => E
        3n                                                                              :MSTORE(array_mul_inB + E)
        2 => E
        4n                                                                              :MSTORE(array_mul_inB + E)
                                                                                        :CALL(array_mul)
        10n                                                                             :MLOAD(array_mul_out)
        1 => E
        27n                                                                             :MLOAD(array_mul_out + E)
        2 => E
        52n                                                                             :MLOAD(array_mul_out + E)
        3 => E
        45n                                                                             :MLOAD(array_mul_out + E)
        4 => E
        28n                                                                             :MLOAD(array_mul_out + E)
        5                                                                               :MLOAD(array_mul_len_out)

        ; 2] len(inB) != len(inA)
        2 => C
        3 => D
        5n                                                                              :MSTORE(array_mul_inA)
        1 => E
        6n                                                                              :MSTORE(array_mul_inA + E)

        11n                                                                             :MSTORE(array_mul_inB)
        1 => E
        21n                                                                             :MSTORE(array_mul_inB + E)
        2 => E
        16n                                                                             :MSTORE(array_mul_inB + E)
                                                                                        :CALL(array_mul)
        55n                                                                             :MLOAD(array_mul_out)
        1 => E
        171n                                                                            :MLOAD(array_mul_out + E)
        2 => E
        206n                                                                            :MLOAD(array_mul_out + E)
        3 => E
        96n                                                                             :MLOAD(array_mul_out + E)
        4                                                                               :MLOAD(array_mul_len_out)
        ; ---------------------------------------------------------------

        ; ; WIP: array karatsuba mul
        ; ; ---------------------------------------------------------------
        ; ; 1] len(inA) > len(inB)
        ; 2 => C
        ; 1 => D
        ; 2n              :MSTORE(array_mul_karatsuba_inA)
        ; 1 => E
        ; 6n              :MSTORE(array_mul_karatsuba_inA + E)

        ; 8n              :MSTORE(array_mul_karatsuba_inB)
        ;                 :CALL(array_mul_karatsuba)
        ; 16n             :MLOAD(array_mul_karatsuba_out)
        ; 1 => E
        ; 48n             :MLOAD(array_mul_karatsuba_out + E)
        ; 2               :MLOAD(array_mul_karatsuba_len_out)

        ; ; 2] len(inA) = len(inB)
        ; 2 => C
        ; 2 => D
        ; 10n              :MSTORE(array_mul_karatsuba_inA)
        ; 1 => E
        ; 50n              :MSTORE(array_mul_karatsuba_inA + E)

        ; 98n              :MSTORE(array_mul_karatsuba_inB)
        ; 1 => E
        ; 1000n              :MSTORE(array_mul_karatsuba_inB + E)
        ;                 :CALL(array_mul_karatsuba)
        ; 980n             :MLOAD(array_mul_karatsuba_out)
        ; 1 => E
        ; 14900n             :MLOAD(array_mul_karatsuba_out + E)
        ; 2 => E
        ; 50000n             :MLOAD(array_mul_karatsuba_out + E)
        ; 3               :MLOAD(array_mul_karatsuba_len_out)

        ; ; 3]
        ; 3 => C
        ; 3 => D
        ; 10n              :MSTORE(array_mul_karatsuba_inA)
        ; 1 => E
        ; 6n              :MSTORE(array_mul_karatsuba_inA + E)
        ; 2 => E
        ; 2n              :MSTORE(array_mul_karatsuba_inA + E)

        ; 8n              :MSTORE(array_mul_karatsuba_inB)
        ; 1 => E
        ; 3n              :MSTORE(array_mul_karatsuba_inB + E)
        ; 2 => E
        ; 5n              :MSTORE(array_mul_karatsuba_inB + E)
        ;                 :CALL(array_mul_karatsuba)
        ; 16n             :MLOAD(array_mul_karatsuba_out)
        ; 1 => E
        ; 54n             :MLOAD(array_mul_karatsuba_out + E)
        ; 2 => E
        ; 40n             :MLOAD(array_mul_karatsuba_out + E)
        ; 3 => E
        ; 24n             :MLOAD(array_mul_karatsuba_out + E)
        ; 4 => E
        ; 6n             :MLOAD(array_mul_karatsuba_out + E)
        ; 5               :MLOAD(array_mul_karatsuba_len_out)
        ; ; ---------------------------------------------------------------

        ; array short mult
        ; ---------------------------------------------------------------
        ; 1] [a, a, a] * a
        3 => C
        1 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inA)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inB)
                                                                                        :CALL(array_mul)
        1n                                                                              :MLOAD(array_mul_out)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_mul_out + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MLOAD(array_mul_out + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_mul_out + E)
        4                                                                               :MLOAD(array_mul_len_out)

        ; 2] [a, 100, a, 6] * 400
        4 => C
        1 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inA)
        1 => E
        100n                                                                            :MSTORE(array_mul_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_mul_inA + E)
        3 => E
        6n                                                                              :MSTORE(array_mul_inA + E)

        400n                                                                            :MSTORE(array_mul_inB)
                                                                                        :CALL(array_mul)
        115792089237316195423570985008687907853269984665640564039457584007913129639536n :MLOAD(array_mul_out)
        1 => E
        40399n                                                                          :MLOAD(array_mul_out + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639536n :MLOAD(array_mul_out + E)
        3 => E
        2799n                                                                           :MLOAD(array_mul_out + E)
        4                                                                               :MLOAD(array_mul_len_out)
        ; ---------------------------------------------------------------

        ; array square
        ; ---------------------------------------------------------------
        ; 1] [4n, 4n, 4n, 3n, 2n, 4n]
        6 => C
        4n                                                                              :MSTORE(array_square_in)
        1 => E
        4n                                                                              :MSTORE(array_square_in + E)
        2 => E
        4n                                                                              :MSTORE(array_square_in + E)
        3 => E
        3n                                                                              :MSTORE(array_square_in + E)
        4 => E
        2n                                                                              :MSTORE(array_square_in + E)
        5 => E
        4n                                                                              :MSTORE(array_square_in + E)
                                                                                        :CALL(array_square)
        16n                                                                             :MLOAD(array_square_out)
        1 => E
        32n                                                                             :MLOAD(array_square_out + E)
        2 => E
        48n                                                                             :MLOAD(array_square_out + E)
        3 => E
        56n                                                                             :MLOAD(array_square_out + E)
        4 => E
        56n                                                                             :MLOAD(array_square_out + E)
        5 => E
        72n                                                                             :MLOAD(array_square_out + E)
        6 => E
        57n                                                                             :MLOAD(array_square_out + E)
        7 => E
        44n                                                                             :MLOAD(array_square_out + E)
        8 => E
        28n                                                                             :MLOAD(array_square_out + E)
        9 => E
        16n                                                                             :MLOAD(array_square_out + E)
        10 => E
        16n                                                                             :MLOAD(array_square_out + E)
        11                                                                              :MLOAD(array_square_len_out)

        ; 2] [49625181101706940895816136432294817651401421999560241731196107431962769845690n, 16541727033902313631938712144098272550467140666520080577065369143987589948564n, 2n]
        3 => C
        49625181101706940895816136432294817651401421999560241731196107431962769845690n  :MSTORE(array_square_in)
        1 => E
        16541727033902313631938712144098272550467140666520080577065369143987589948564n  :MSTORE(array_square_in + E)
        2 => E
        2n                                                                              :MSTORE(array_square_in + E)
                                                                                        :CALL(array_square)
        73256219721567388941442868066720921294925908666017499698432349066230755486500n  :MLOAD(array_square_out)
        1 => E
        59077596549651120114066829086065259108811216666143144918090604085669964102021n  :MLOAD(array_square_out + E)
        2 => E
        75619323583553433746005541230163531659278357332663225495155973229657554050588n  :MLOAD(array_square_out + E)
        3 => E
        68530011997595299332317521739835700566221011332726048104985100739377158358338n  :MLOAD(array_square_out + E)
        4 => E
        4n                                                                              :MLOAD(array_square_out + E)
        5                                                                               :MLOAD(array_square_len_out)

        ; 3] [108509871213644914495224788117262720812102234692915980461799068728781566717980n, 97610657482852136417037764955262109743864410230427530868747251158690618238750n, 3n]
        3 => C
        108509871213644914495224788117262720812102234692915980461799068728781566717980n :MSTORE(array_square_in)
        1 => E
        97610657482852136417037764955262109743864410230427530868747251158690618238750n  :MSTORE(array_square_in + E)
        2 => E
        3n                                                                              :MSTORE(array_square_in + E)
                                                                                        :CALL(array_square)
        82987931714326364316120253427931880709278140571418487333162713377057429160720n  :MLOAD(array_square_out)
        1 => E
        4257238595720679277571917967782652353394431698489248379634099239588181418140n   :MLOAD(array_square_out + E)
        2 => E
        15209178211456919413336795740141505754388379695813905932093982440742677791802n  :MLOAD(array_square_out + E)
        3 => E
        88987534839350135473536361176867192550264928852523682165693061442019881855583n  :MLOAD(array_square_out + E)
        4 => E
        14n                                                                             :MLOAD(array_square_out + E)
        5                                                                               :MLOAD(array_square_len_out)

        ; 4] [94296684984090328915786319894647341212298256830891608529662243544763352873524n,85801804490443701075961240310880668636621463408258506144468684495763969931231n]
        2 => C
        94296684984090328915786319894647341212298256830891608529662243544763352873524n  :MSTORE(array_square_in)
        1 => E
        85801804490443701075961240310880668636621463408258506144468684495763969931231n  :MSTORE(array_square_in + E)
                                                                                        :CALL(array_square)
        56476742620324943499420425449441725188859143808665910845865775685761970051728n  :MLOAD(array_square_out)
        1 => E
        15939360972613038527243286761436595585964755988147232278935003110685006573864n  :MLOAD(array_square_out + E)
        2 => E
        71885101902860809166787972884705167254384530826288829047389464757277834814455n  :MLOAD(array_square_out + E)
        3 => E
        63579038104476977130956937454941822659502127575865339775268690127769381598323n  :MLOAD(array_square_out + E)
        4                                                                               :MLOAD(array_square_len_out)
        ; ---------------------------------------------------------------

        ; array short mod div
        ; ---------------------------------------------------------------
        ; 1] [9n, 8n, 7n, 6n] / 8n
        4 => C
        1 => D
        9n                                                                              :MSTORE(array_div_mod_inA)
        1 => E
        8n                                                                              :MSTORE(array_div_mod_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_div_mod_inA + E)
        3 => E
        6n                                                                              :MSTORE(array_div_mod_inA + E)

        8n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        1n                                                                              :MLOAD(array_div_mod_quo)
        1 => E
        101318078082651670995624611882601919371611236582435493534525386006923988434945n :MLOAD(array_div_mod_quo + E)
        2 => E
        86844066927987146567678238756515930889952488499230423029593188005934847229952n  :MLOAD(array_div_mod_quo + E)
        1n                                                                              :MLOAD(array_div_mod_rem)
        3                                                                               :MLOAD(array_div_mod_len_quo)

        ; 2] [a, 7n, a, 12n, a, 20n, a, 80n] / a
        8 => C
        1 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA)
        1 => E
        7n                                                                              :MSTORE(array_div_mod_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        3 => E
        12n                                                                             :MSTORE(array_div_mod_inA + E)
        4 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        5 => E
        20n                                                                             :MSTORE(array_div_mod_inA + E)
        6 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        7 => E
        80n                                                                             :MSTORE(array_div_mod_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        120n                                                                            :MLOAD(array_div_mod_quo)
        1 => E
        112n                                                                            :MLOAD(array_div_mod_quo + E)
        2 => E
        113n                                                                            :MLOAD(array_div_mod_quo + E)
        3 => E
        100n                                                                            :MLOAD(array_div_mod_quo + E)
        4 => E
        101n                                                                            :MLOAD(array_div_mod_quo + E)
        5 => E
        80n                                                                             :MLOAD(array_div_mod_quo + E)
        6 => E
        81n                                                                             :MLOAD(array_div_mod_quo + E)
        119n                                                                            :MLOAD(array_div_mod_rem)
        7                                                                               :MLOAD(array_div_mod_len_quo)

        ; 3] inA == 0, inB != 0
        1 => C
        1 => D
        0n                                                                              :MSTORE(array_div_mod_inA)

        8n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        0n                                                                              :MLOAD(array_div_mod_quo)
        0n                                                                              :MLOAD(array_div_mod_rem)
        1                                                                               :MLOAD(array_div_mod_len_quo)

        ; 4] inA != 0, inB == 0 -> error
        2 => C
        1 => D
        0n                                                                              :MSTORE(array_div_mod_inA)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_inA + E)

        0n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        1 => A
        B                                                                               :ASSERT

        ; 5] inA == inB
        1 => C
        1 => D
        10n                                                                             :MSTORE(array_div_mod_inA)

        10n                                                                             :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        1n                                                                              :MLOAD(array_div_mod_quo)
        0n                                                                              :MLOAD(array_div_mod_rem)
        1                                                                               :MLOAD(array_div_mod_len_quo)

        ; 6] inA < inB
        1 => C
        1 => D
        10n                                                                             :MSTORE(array_div_mod_inA)

        11n                                                                             :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        0n                                                                              :MLOAD(array_div_mod_quo)
        10n                                                                             :MLOAD(array_div_mod_rem)
        1                                                                               :MLOAD(array_div_mod_len_quo)

        ; 7] [28948022309329048855892746252171976963317496166410141009864396001978282409984n, 1n] / 2
        2 => C
        1 => D
        28948022309329048855892746252171976963317496166410141009864396001978282409984n  :MSTORE(array_div_mod_inA)
        1 => E
        1n                                                                              :MSTORE(array_div_mod_inA + E)

        2n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        72370055773322622139731865630429942408293740416025352524660990004945706024960n  :MLOAD(array_div_mod_quo)
        1                                                                               :MLOAD(array_div_mod_len_quo)

        ; 8] [72370055773322622139731865630429942408293740416025352524660990004945706024960n] / 2
        1 => C
        1 => D
        72370055773322622139731865630429942408293740416025352524660990004945706024960n  :MSTORE(array_div_mod_inA)
        2n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        36185027886661311069865932815214971204146870208012676262330495002472853012480n  :MLOAD(array_div_mod_quo)
        1                                                                               :MLOAD(array_div_mod_len_quo)
        ; ---------------------------------------------------------------

        ; array long mod div
        ; ---------------------------------------------------------------
        ; 1] len(inB) = len(inA) and inB > inA
        4 => C
        2 => D
        9n                                                                              :MSTORE(array_div_mod_inA)
        1 => E
        8n                                                                              :MSTORE(array_div_mod_inA + E)
        2 => E
        7n                                                                              :MSTORE(array_div_mod_inA + E)
        3 => E
        6n                                                                              :MSTORE(array_div_mod_inA + E)

        8n                                                                              :MSTORE(array_div_mod_inB)
        1 => E
        1n                                                                              :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        335n                                                                            :MLOAD(array_div_mod_quo)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639895n :MLOAD(array_div_mod_quo + E)
        2 => E
        5n                                                                              :MLOAD(array_div_mod_quo + E)
        115792089237316195423570985008687907853269984665640564039457584007913129637265n :MLOAD(array_div_mod_rem)

        ; 2] [a, 7n, a, 12n, a, 20n, a, 80n] / [a, a, a, a, 100n]
        8 => C
        5 => D
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA)
        1 => E
        7n                                                                              :MSTORE(array_div_mod_inA + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        3 => E
        12n                                                                             :MSTORE(array_div_mod_inA + E)
        4 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        5 => E
        20n                                                                             :MSTORE(array_div_mod_inA + E)
        6 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inA + E)
        7 => E
        80n                                                                             :MSTORE(array_div_mod_inA + E)

        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB + E)
        2 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB + E)
        4 => E
        100n                                                                            :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        87130681010257731209815790699606742543054641926620622445532439451498988639951n  :MLOAD(array_div_mod_quo)
        1 => E
        76812574048516684092863920748337523031377118540573443471719387411189897879957n  :MLOAD(array_div_mod_quo + E)
        2 => E
        92862962655669424052566829561422975605097710474424610764317468362781816839948n  :MLOAD(array_div_mod_quo + E)
        87130681010257731209815790699606742543054641926620622445532439451498988639950n  :MLOAD(array_div_mod_rem)
        1 => E
        76812574048516684092863920748337523031377118540573443471719387411189897879965n  :MLOAD(array_div_mod_rem + E)
        2 => E
        92862962655669424052566829561422975605097710474424610764317468362781816839947n  :MLOAD(array_div_mod_rem + E)
        3 => E
        13n                                                                             :MLOAD(array_div_mod_rem + E)
        4 => E
        84n                                                                             :MLOAD(array_div_mod_rem + E)

        ; 3] inA == 0, inB != 0
        1 => C
        2 => D
        0n                                                                              :MSTORE(array_div_mod_inA)

        8n                                                                              :MSTORE(array_div_mod_inB)
        1 => E
        1n                                                                              :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        0n                                                                              :MLOAD(array_div_mod_quo)
        0n                                                                              :MLOAD(array_div_mod_rem)

        ; 4] inA != 0, inB == 0 -> error
        2 => C
        1 => D
        0n                                                                              :MSTORE(array_div_mod_inA)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_inA + E)

        0n                                                                              :MSTORE(array_div_mod_inB)
                                                                                        :CALL(array_div_mod)
        1 => A
        B                                                                               :ASSERT

        ; 5] inA == inB
        2 => C
        2 => D
        10n                                                                             :MSTORE(array_div_mod_inA)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_inA + E)

        10n                                                                             :MSTORE(array_div_mod_inB)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        1n                                                                              :MLOAD(array_div_mod_quo)
        0n                                                                              :MLOAD(array_div_mod_rem)

        ; 6] inA < inB
        2 => C
        3 => D
        10n                                                                             :MSTORE(array_div_mod_inA)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_inA + E)

        6n                                                                              :MSTORE(array_div_mod_inB)
        1 => E
        7n                                                                              :MSTORE(array_div_mod_inB + E)
        2 => E
        8n                                                                              :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        0n                                                                              :MLOAD(array_div_mod_quo)
        10n                                                                             :MLOAD(array_div_mod_rem)
        1 => E
        30n                                                                             :MSTORE(array_div_mod_rem + E)

        ; 7] [82987931714326364316120253427931880709278140571418487333162713377057429160720n,4257238595720679277571917967782652353394431698489248379634099239588181418140n,15209178211456919413336795740141505754388379695813905932093982440742677791802n,88987534839350135473536361176867192550264928852523682165693061442019881855583n,14n], [4n, 6n, 7n]
        5 => C
        3 => D
        82987931714326364316120253427931880709278140571418487333162713377057429160720n  :MSTORE(array_div_mod_inA)
        1 => E
        4257238595720679277571917967782652353394431698489248379634099239588181418140n   :MSTORE(array_div_mod_inA + E)
        2 => E
        15209178211456919413336795740141505754388379695813905932093982440742677791802n  :MSTORE(array_div_mod_inA + E)
        3 => E
        88987534839350135473536361176867192550264928852523682165693061442019881855583n  :MSTORE(array_div_mod_inA + E)
        4 => E
        14n                                                                             :MSTORE(array_div_mod_inA + E)

        4n                                                                              :MSTORE(array_div_mod_inB)
        1 => E
        6n                                                                              :MSTORE(array_div_mod_inB + E)
        2 => E
        7n                                                                              :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        90526669110436282262084097418054683975846294708417529350769755852355732618090n  :MLOAD(array_div_mod_quo)
        1 => E
        12712504977050019353362337310981027507180704121789097452241865920288554550795n  :MLOAD(array_div_mod_quo + E)
        2 => E
        2n                                                                              :MLOAD(array_div_mod_quo + E)
        68257522984529821538496818781776868365702915734670062048456441991373887608168n  :MLOAD(array_div_mod_rem)
        1 => E
        104999739448800080833043894267657885589213754954671066702793604491778345346033n :MSTORE(array_div_mod_rem + E)
        2 => E
        4n                                                                              :MSTORE(array_div_mod_rem + E)
        3                                                                               :MLOAD(array_div_mod_len_quo)
        3                                                                               :MLOAD(array_div_mod_len_rem)

        ; 8] [0n,0n,0n,0n,87552057494100699607633960453116574392480272162273084008350826812719088235449n,29405388739667337424543497575767709934732594998639086405406332616399343873602n,370491411790392985199n], [0n, 0n, 8238129386n, 23102318237n]
        7 => C
        4 => D
        0n                                                                              :MSTORE(array_div_mod_inA)
        1 => E
        0n                                                                              :MSTORE(array_div_mod_inA + E)
        2 => E
        0n                                                                              :MSTORE(array_div_mod_inA + E)
        3 => E
        0n                                                                              :MSTORE(array_div_mod_inA + E)
        4 => E
        87552057494100699607633960453116574392480272162273084008350826812719088235449n  :MSTORE(array_div_mod_inA + E)
        5 => E
        29405388739667337424543497575767709934732594998639086405406332616399343873602n  :MSTORE(array_div_mod_inA + E)
        6 => E
        370491411790392985199n                                                          :MSTORE(array_div_mod_inA + E)

        0n                                                                              :MSTORE(array_div_mod_inB)
        1 => E
        0n                                                                              :MSTORE(array_div_mod_inB + E)
        2 => E
        8238129386n                                                                     :MSTORE(array_div_mod_inB + E)
        3 => E
        23102318237n                                                                    :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        10624890954144362706283399919870985530330343554129711486796784890935496833177n  :MLOAD(array_div_mod_quo)
        1 => E
        12699239907746414269759600684072701206520647567004427767570235373004025148518n  :MLOAD(array_div_mod_quo + E)
        2 => E
        62973947849727744055941265906651873030488901951864462234513788026171769471385n  :MLOAD(array_div_mod_quo + E)
        3 => E
        16036979838n                                                                    :MLOAD(array_div_mod_quo + E)
        0n                                                                              :MLOAD(array_div_mod_rem)
        1 => E
        0n                                                                              :MSTORE(array_div_mod_rem + E)
        2 => E
        43811746908501644357293832343774991028053014234938611947183500936834952782886n  :MSTORE(array_div_mod_rem + E)
        3 => E
        6019321230n                                                                     :MSTORE(array_div_mod_rem + E)
        4                                                                               :MLOAD(array_div_mod_len_quo)
        4                                                                               :MLOAD(array_div_mod_len_rem)

        ; 9] [7n], [7719472615821079694904732333912527190217998977709370935963838933860875309329n, 17n]
        1 => C
        2 => D
        7n                                                                              :MSTORE(array_div_mod_inA)
        7719472615821079694904732333912527190217998977709370935963838933860875309329n   :MSTORE(array_div_mod_inB)
        1 => E
        17n                                                                             :MSTORE(array_div_mod_inB + E)
                                                                                        :CALL(array_div_mod)
        0n                                                                              :MLOAD(array_div_mod_quo)
        7n                                                                              :MLOAD(array_div_mod_rem)
        1                                                                               :MLOAD(array_div_mod_len_quo)
        1                                                                               :MLOAD(array_div_mod_len_rem)

        ; 10] [9,12,16,2,0,2**256-4], [2**256-1,2**256-1]
	6 => C
	2 => D
	9n                                                                              :MSTORE(array_div_mod_inA)
	115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB)
	1 => E
	12n                                                                             :MSTORE(array_div_mod_inA + E)
	115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(array_div_mod_inB + E)
	2 => E
	16n                                                                             :MSTORE(array_div_mod_inA + E)
	3 => E
	2n                                                                              :MSTORE(array_div_mod_inA + E)
	4 => E
	0n                                                                              :MSTORE(array_div_mod_inA + E)
	5 => E
	115792089237316195423570985008687907853269984665640564039457584007913129639932n :MSTORE(array_div_mod_inA + E)
	                                                                                :CALL(array_div_mod)
        4                                                                               :MLOAD(array_div_mod_len_quo)
        2                                                                               :MLOAD(array_div_mod_len_rem)
        17n                                                                             :MLOAD(array_div_mod_quo)
        26n                                                                             :MLOAD(array_div_mod_rem)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639934n :MLOAD(array_div_mod_quo + E)
        10n                                                                             :MLOAD(array_div_mod_rem + E)
        2 => E
        0n                                                                              :MLOAD(array_div_mod_quo + E)
        3 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639932n :MLOAD(array_div_mod_quo + E)
        ; ---------------------------------------------------------------

        :JMP(end)

outOfCountersBinary:
        ${dump(CNT_BINARY)}     :JMP(end)
outOfCountersStep:
        ${dump(STEP)}           :JMP(end)
outOfCountersArith:
        ${dump(CNT_ARITH)}      :JMP(end)

;@info function to force a failed assert
failAssert:
    1 => A
    2               :ASSERT

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "../main/modexp/constants.zkasm"

INCLUDE "../main/modexp/array_lib/utils/array_trim.zkasm"
INCLUDE "../main/modexp/array_lib/utils/array_compare.zkasm"

INCLUDE "../main/modexp/array_lib/array_add_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_add_AGTB.zkasm"
INCLUDE "../main/modexp/array_lib/array_mul_long.zkasm"
INCLUDE "../main/modexp/array_lib/array_mul_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_mul.zkasm"
INCLUDE "../main/modexp/array_lib/array_square.zkasm"
INCLUDE "../main/modexp/array_lib/array_div_mod_long.zkasm"
INCLUDE "../main/modexp/array_lib/array_div_mod_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_div_mod.zkasm"

INCLUDE "../main/modexp/array_lib/unused/array_sub_AGTB.zkasm"
INCLUDE "../main/modexp/array_lib/unused/array_add.zkasm"