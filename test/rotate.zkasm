VAR GLOBAL test
; test valid for op-arith-final_0.json input
start:
    0x270b206cd7f7637a125ddc55aef59e54ef3ea0898dbc9b9094e5665fcd937bedn => A
    399n => PC
    8 => D ; read 20 bytes
    ${getBytecode(A,PC,D)} => B


VAR GLOBAL leftBytes
VAR GLOBAL numBlock
; Params ==> bytes to read (readBytes) (PUSHX)
; compute ==> num_blocks --> readBytes / 4
; compute ==> contador de 4 en 4
; dos contadores: 0,1,2,3    0,1,2,3     0,1,2,3    0, 1        -----> insideBlock
;                 -------    -------     -------   ------
;                    0          1           2                   -----> nums de ROTL_C
;  alreadyReadBytes = numBlock * 4 + insideBlock;
readPush:
    D => A
    0 => E
    PC + D - 1 => PC
    ${A >> 2} => B
    ${A & 0x03} => D
    B * 4 + D                   :ASSERT
    D => A
    0x04 => B
    $                           :LT,JMPNC(failAssert)
    D                           :MSTORE(leftBytes)
    B                           :MSTORE(numBlock)
    0 => B
                                :JMP(readPushBlock)

readPushBlock:
    $ => A                      :MLOAD(numBlock)
    $                           :EQ, JMPC(endPushInit)

    0x270b206cd7f7637a125ddc55aef59e54ef3ea0898dbc9b9094e5665fcd937bedn => A ; load address

    ${getBytecode(A,PC,1)} => C
    PC - 1 => PC

    ${getBytecode(A,PC,1)} => D
    PC - 1 => PC
    D*256 + C => C
    ${getBytecode(A,PC,1)} => D
    PC - 1 => PC
    D*65536 + C => C
    ${getBytecode(A,PC,1)} => D
    PC - 1 => PC
    D*16777216 + C => C
                                :JMP(doRotate)

doRotate:
    B - 1 => A

                                :JMP(doRotateLoop)

doRotateLoop:
    A                           :JMPN(endRotate)
    ROTL_C => C
    A - 1 => A
                                :JMP(doRotateLoop)

endRotate:
    C + E => E
    B + 1 => B
                                :JMP(readPushBlock)

doRotate2:
    B - 1 => A
                                :JMP(doRotateLoop2)

doRotateLoop2:
    A                           :JMPN(endRotate2)
    ROTL_C => C
    A - 1 => A
                                :JMP(doRotateLoop2)

endRotate2:
    C + E => E
                                :JMP(finalPush)

endPushInit:
    $ => A                          :MLOAD(leftBytes)
    A - 1                           :JMPN(finalPush)
    0 => C
    0 => B
                                    :JMP(endPushLoop)

endPushLoop:
    $ => A                               :MLOAD(leftBytes)
    $                               :EQ, JMPC(endPushFinal)
    0x270b206cd7f7637a125ddc55aef59e54ef3ea0898dbc9b9094e5665fcd937bedn => A ; load address
    ${getBytecode(A,PC,1)} => D
    PC - 1 => PC
    B - 1 => A
                                    :JMP(computeFactorLoop)

computeFactorLoop:
    A                               :JMPN(computeFactorEnd)
    256*D => D
    A - 1 => A
                                    :JMP(computeFactorLoop)

computeFactorEnd:
    B + 1 => B
    D + C => C
                                    :JMP(endPushLoop)

endPushFinal:
    $ => B                          :MLOAD(numBlock)
                                    :JMP(doRotate2)

finalPush:

0 => A,B,C,D,E,CTX, SP, PC, GAS,  SR, HASHPOS, RR ; Set all registers to 0
                                                                        :JMP(finalWait)

INCLUDE "../main/end.zkasm"
