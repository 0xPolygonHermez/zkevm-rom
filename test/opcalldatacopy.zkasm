; CALLDATACOPY: memory[destOffset:destOffset+length] = msg.data[offset:offset+length]
;       | destOffset | offset | length | ....
; SP          0          1         2     .....

start:

        STEP => A
        0 :ASSERT

        ; TEST 1: size = 20, offset = 0, destOffset = 0, no MEM (simple test)

        0 => SP
        20              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)    ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234512345000000000000000000000000n     :MLOAD(MEM:E+1)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+2)

        ; TEST 2: size = 20, offset = 4, destOffset = 0, no MEM (offset > 0, size + offset < 32)

        0 => SP
        20              :MSTORE(SP++)   ;size
        4               :MSTORE(SP++)   ;offset
        32               :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x4512345123451234512345123451234512345123000000000000000000000000n     :MLOAD(MEM:E+1)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+2)

        ; TEST 3: size = 20, offset = 0, destOffset = 7, no MEM (destOffset > 0, size + destOffset < 32)

        0 => SP
        20              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32+7            :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x0000000000000012345123451234512345123451234512345123450000000000n     :MLOAD(MEM:E+1)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+2)

        ; TEST 4: size = 40, offset = 0, destOffset = 0, no MEM (size > 32)

        0 => SP
        40              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MLOAD(MEM:E+1)
        0x6789678967896789000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+2)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+3)

        ; TEST 5: size = 66, offset = 31, destOffset = 0, no MEM (size + offset > 32)

        0 => SP
        66              :MSTORE(SP++)   ;size
        15              :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234678967896789678967896789678967n     :MLOAD(MEM:E+1)
        0x8967896789678967896789678967896789123456789123456789123456789123n     :MLOAD(MEM:E+2)
        0x4567000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+3)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+4)

        ; TEST 6: size = 65, offset = 3, destOffset = 30, no MEM (size + offset > 32, size + destOffset > 32)

        0 => SP
        65              :MSTORE(SP++)   ;size
        3               :MSTORE(SP++)   ;offset
        32+30           :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern0)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x0000000000000000000000000000000000000000000000000000000000002345n     :MLOAD(MEM:E+1)
        0x1234512345123451234512345123451234512345123451234512346789678967n     :MLOAD(MEM:E+2)
        0x8967896789678967896789678967896789678967896789678967891234567800n     :MLOAD(MEM:E+3)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E+4)

        ; TEST 7: size = 20, offset = 0, destOffset = 0, set MEM (simple test)

        0 => SP
        20              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234512345222222222222222222222222n     :MLOAD(MEM:E+1)
        0x3333333333333333333333333333333333333333333333333333333333333333n     :MLOAD(MEM:E+2)

        ; TEST 8: size = 20, offset = 4, destOffset = 0, set MEM (offset > 0, size + offset < 32)

        0 => SP
        20              :MSTORE(SP++)   ;size
        4               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x4512345123451234512345123451234512345123222222222222222222222222n     :MLOAD(MEM:E+1)
        0x3333333333333333333333333333333333333333333333333333333333333333n     :MLOAD(MEM:E+2)

        ; TEST 9: size = 20, offset = 0, destOffset = 7, set MEM (destOffset > 0, size + destOffset < 32)

        0 => SP
        20              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32+7            :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x2222222222222212345123451234512345123451234512345123452222222222n     :MLOAD(MEM:E+1)
        0x3333333333333333333333333333333333333333333333333333333333333333n     :MLOAD(MEM:E+2)

        ; TEST 10: size = 40, offset = 0, destOffset = 0, set MEM (size > 32)

        0 => SP
        40              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MLOAD(MEM:E+1)
        0x6789678967896789333333333333333333333333333333333333333333333333n     :MLOAD(MEM:E+2)
        0x4444444444444444444444444444444444444444444444444444444444444444n     :MLOAD(MEM:E+3)

        ; TEST 11: size = 66, offset = 31, destOffset = 0, set MEM (size + offset > 32)

        0 => SP
        66              :MSTORE(SP++)   ;size
        15              :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234678967896789678967896789678967n     :MLOAD(MEM:E+1)
        0x8967896789678967896789678967896789123456789123456789123456789123n     :MLOAD(MEM:E+2)
        0x4567444444444444444444444444444444444444444444444444444444444444n     :MLOAD(MEM:E+3)
        0x5555555555555555555555555555555555555555555555555555555555555555n     :MLOAD(MEM:E+4)
        ; TEST 12: size = 65, offset = 3, destOffset = 30, set MEM (size + offset > 32, size + destOffset > 32)

        0 => SP
        65              :MSTORE(SP++)   ;size
        3               :MSTORE(SP++)   ;offset
        32+30           :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x2222222222222222222222222222222222222222222222222222222222222345n     :MLOAD(MEM:E+1)
        0x1234512345123451234512345123451234512345123451234512346789678967n     :MLOAD(MEM:E+2)
        0x8967896789678967896789678967896789678967896789678967891234567844n     :MLOAD(MEM:E+3)
        0x5555555555555555555555555555555555555555555555555555555555555555n     :MLOAD(MEM:E+4)

        ; TEST 13: size = 60, offset = 0, destOffset = 0, set MEM (txCalldataLen < size)

        0 => SP
        60              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        32              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern2)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MLOAD(MEM:E+1)
        0x6789678967896789678967896789678967890000000000000000000033333333n     :MLOAD(MEM:E+2)
        0x4444444444444444444444444444444444444444444444444444444444444444n     :MLOAD(MEM:E+3)

        ; TEST 14: size = 90, offset = 0, destOffset = 0, set MEM (txCalldataLen < size)
        0 => SP
        90              :MSTORE(SP++)   ;size
        0               :MSTORE(SP++)   ;offset
        0               :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern2)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MLOAD(MEM:E)
        0x6789678967896789678967896789678967890000000000000000000000000000n     :MLOAD(MEM:E+1)
        0x0000000000000000000000000000000000000000000000000000333333333333n     :MLOAD(MEM:E+2)

        ; TEST 15: size = 40, offset = 20, destOffset = 10, set MEM (txCalldataLen < size)

        0 => SP
        40             :MSTORE(SP++)   ;size
        49             :MSTORE(SP++)   ;offset
        1              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern2)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1189000000000000000000000000000000000000000000000000000000000000n     :MLOAD(MEM:E)
        0x0000000000000000002222222222222222222222222222222222222222222222n     :MLOAD(MEM:E+1)

        ; TEST 16: size = 20, offset = 52, destOffset = 1, set MEM (offset > txCalldataLen)

        0 => SP
        20             :MSTORE(SP++)   ;size
        52             :MSTORE(SP++)   ;offset
        32+1              :MSTORE(SP)     ;destOffset

        :CALL(fillCalldataPattern2)
        :CALL(fillMemPattern)
        :CALL(opCALLDATACOPY2)

        0 => E
        0x1111111111111111111111111111111111111111111111111111111111111111n     :MLOAD(MEM:E)
        0x2200000000000000000000000000000000000000002222222222222222222222n     :MLOAD(MEM:E+1)
        0x3333333333333333333333333333333333333333333333333333333333333333n     :MLOAD(MEM:E+2)

0 => A,B,C,D,E,CTX, SP, PC, GAS,  SR, HASHPOS, RR ; Set all registers to 0
                                                                        :JMP(finalizeExecution)

fillCalldataPattern:
        1024 => SP
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MSTORE(SP++)
        0x6789678967896789678967896789678967896789678967896789678967896789n     :MSTORE(SP++)
        0x1234567891234567891234567891234567891234567891234567891234567891n     :MSTORE(SP)
        3 => SP
        96                                                                      :MSTORE(txCalldataLen), RETURN

fillCalldataPattern2:
        1024 => SP
        0x1234512345123451234512345123451234512345123451234512345123451234n     :MSTORE(SP++)
        0x6789678967896789678967896789678967890000000000000000000000000000n     :MSTORE(SP++)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(SP)
        3 => SP
        50                                                                      :MSTORE(txCalldataLen), RETURN

fillMemPattern0:

        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E+1)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E+2)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E+3)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E+4)
        0x0000000000000000000000000000000000000000000000000000000000000000n     :MSTORE(MEM:E+5), RETURN

fillMemPattern:

        0x1111111111111111111111111111111111111111111111111111111111111111n     :MSTORE(MEM:E)
        0x2222222222222222222222222222222222222222222222222222222222222222n     :MSTORE(MEM:E+1)
        0x3333333333333333333333333333333333333333333333333333333333333333n     :MSTORE(MEM:E+2)
        0x4444444444444444444444444444444444444444444444444444444444444444n     :MSTORE(MEM:E+3)
        0x5555555555555555555555555555555555555555555555555555555555555555n     :MSTORE(MEM:E+4)
        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFn     :MSTORE(MEM:E+5), RETURN

INCLUDE "../main/main.zkasm"

VAR GLOBAL auxDestOffset2
VAR GLOBAL calldataOffset2
VAR GLOBAL auxOffset2
VAR GLOBAL numLastBytes2
VAR GLOBAL tmpSHXZkPCtest
/**
 * @link [https://www.evm.codes/#37?fork=berlin]
 * @zk-counters
 *  - 100 steps
 *  - 2 binary
 * @process-opcode
 *  - stack input: [destOffset, offset, size]
 *  - stack output: []
 */
opCALLDATACOPY2:
    RR                      :MSTORE(tmpSHXZkPCtest)
    ; checks zk-counters
    ;%MAX_CNT_STEPS - STEP - 100 :JMPN(outOfCountersStep)
    ;%MAX_CNT_BINARY - CNT_BINARY - 2 :JMPN(outOfCountersBinary)
    ;%MAX_CNT_MEM_ALIGN - CNT_MEM_ALIGN - 2   :JMPN(outOfCountersMemalign)
    ; check stack underflow
    SP - 3 => SP    :JMPN(stackUnderflow)
    $ => E          :MLOAD(SP+2); [destOffset => E]
    $ => B          :MLOAD(SP+1); [offset => B]
    B               :MSTORE(auxOffset2)
    $ => C          :MLOAD(SP); [size => C]
    C               :MSTORE(numLastBytes2)
    ; store lastMemOffset for memory expansion gas cost
    E               :MSTORE(lastMemOffset)
    ; store lastMemLength for memory expansion gas cost
    C               :MSTORE(lastMemLength);, CALL(saveMem); in: [lastMemOffset, lastMemLength]
    ; check out-of-gas
    ;GAS - %GAS_FASTEST_STEP => GAS  :JMPN(outOfGas)
    ;${3*((C+31)/32)}
    ;(C+31)/32 => A
    C+31 => A
                    :CALL(offsetUtil); in: [A: offset] out: [E: offset/32, C: offset%32]
    ;GAS - 3*E => GAS    :JMPN(outOfGas)
    ; save current stack pointer
    SP              :MSTORE(SPw)
    ; Recover destOffset at E
    $ => E          :MLOAD(lastMemOffset)
    ; Recover size at C
    $ => C          :MLOAD(lastMemLength)
    B => A
    $ => B          :MLOAD(txCalldataLen); less than 2**32 bytes (calldata). Enforced by memory expansion gas cost & smart contract batchL2DataHash
    ; if offset is not lower than calldata length, return 0
    $               :LT,JMPNC(opCALLDATACOPY02)
    B => A
    $ => B          :MLOAD(auxOffset2)
    B + C => B
    ; if txCalldataLen < (offset + size) --> opCALLDATACOPYX0
    $               :LT,JMPC(opCALLDATACOPYX02)
    $ => B          :MLOAD(auxOffset2),JMP(opCALLDATACOPYloop2)

opCALLDATACOPYX02:
    $ => C          :MLOAD(txCalldataLen)
    $ => B          :MLOAD(auxOffset2)
    C - B => C      :MSTORE(numLastBytes2)

opCALLDATACOPYloop2:
    ; checks zk-counters
    ;%MAX_CNT_STEPS - STEP - 300 :JMPN(outOfCountersStep)
    ; finish loop
    C               :JMPZ(opCALLDATACOPYcheckLen2)
    ; copy last bytes
    C - 32          :JMPN(opCALLDATACOPYfinal2)
    B => A          :MSTORE(calldataOffset2)
    E => B
                    :CALL(offsetUtil); in: [A: offset] out: [E: offset/32, C: offset%32]
    ; add %CALLDATA_OFFSET to offset to reach calldata in memory
    ; set stack pointer to first byte to read
    %CALLDATA_OFFSET + E => SP
    B => E
    $ => A          :MLOAD(SP++)
    $ => B          :MLOAD(SP)
    $ => A          :MEM_ALIGN_RD, MSTORE(bytesToStore)
    E => A
    ; Store 32 bytes from calldata to memory
                    :CALL(offsetUtil); in: [A: offset] out: [E: offset/32, C: offset%32]
    E               :MSTORE(auxDestOffset2)
    $ => A          :MLOAD(MEM:E)
    $ => B          :MLOAD(MEM:E+1)
    ${memAlignWR_W0(A,mem.bytesToStore,C)} => D                    ; no trust calculate W0
    ${memAlignWR_W1(B,mem.bytesToStore,C)} => E                    ; no trust calculate W1
    $               :MEM_ALIGN_WR,MLOAD(bytesToStore)
    E => A
    $ => E          :MLOAD(auxDestOffset2)
    D               :MSTORE(MEM:E)          ; write W0
    A               :MSTORE(MEM:E+1)        ; write W1
    ; recover stack pointer
    $ => C          :MLOAD(numLastBytes2)
    C - 32 => C     :MSTORE(numLastBytes2)
    $ => E          :MLOAD(lastMemOffset)
    E + 32 => E     :MSTORE(lastMemOffset)
    $ => B          :MLOAD(calldataOffset2)
    B + 32 => B     :JMP(opCALLDATACOPYloop2)

opCALLDATACOPYfinal2:
    ; copy last bytes
    C               :MSTORE(numLastBytes2)
    B => A
    E => D
                    :CALL(offsetUtil); in: [A: offset] out: [E: offset/32, C: offset%32]
    ; add %CALLDATA_OFFSET to offset to reach calldata in memory
    ; set SP to calldata
    %CALLDATA_OFFSET + E => SP
    D => E
    C => D
    $ => A          :MLOAD(SP++), CALL(SHLarith); [calldata => A]; in: [A: value, D: #bytes to left shift] out: [A: shifted result]
    ; Recover init SP to recover input size
    $ => C          :MLOAD(numLastBytes2); [size => C]
    ; point to next memory slot
    C - 32 + D => D :JMPN(opCALLDATACOPYxor2)
    D               :JMPZ(opCALLDATACOPYxor2)
    A => B
    $ => A          :MLOAD(SP); [calldata => C]
    32 - D => D     :CALL(SHRarith); in: [A: value, D: #bytes to right shift] out: [A: shifted result]
    32 - C => D     :CALL(SHLarith); in: [A: value, D: #bytes to left shift] out: [A: shifted result]
    B + A => A
    ; set bytesToStore with value to use in MSTORE
    A               :MSTORE(bytesToStore), CALL(MSTOREX); in: [bytesToStore, E: offset, C: length] out: [E: new offset]
                    :JMP(opCALLDATACOPYcheckLen2)

opCALLDATACOPY02:
    C               :JMPZ(opCALLDATACOPYend2)
    32 - C          :JMPN(opCALLDATACOPY3202)
    ; set bytesToStore with value to use in MSTORE
    0               :MSTORE(bytesToStore), CALL(MSTOREX); in: [bytesToStore, E: offset, C: length] out: [E: new offset]
                    :JMP(opCALLDATACOPYend2)

opCALLDATACOPY3202:
    ; set bytesToStore with value to use in MSTORE
    0               :MSTORE(bytesToStore), CALL(MSTORE32); in: [bytesToStore, E: offset] out: [E: new offset]
    C - 32 => C     :JMP(opCALLDATACOPY02)


opCALLDATACOPYxor2:
    32 - C => D     :CALL(SHRarith); in: [A: value, D: #bytes to right shift] out: [A: shifted result]
                    :CALL(SHLarith); in: [A: value, D: #bytes to left shift] out: [A: shifted result]
    ; set bytesToStore with value to use in MSTORE
    A               :MSTORE(bytesToStore), CALL(MSTOREX); in: [bytesToStore, E: offset, C: length] out: [E: new offset]

opCALLDATACOPYcheckLen2:
    ; fill missing values with 0 (size > calldata)
    $ => C          :MLOAD(lastMemLength)
    $ => A          :MLOAD(txCalldataLen)
    $ => B          :MLOAD(auxOffset2)
    C - A + B => C      :JMPN(opCALLDATACOPYend2, opCALLDATACOPY02)


opCALLDATACOPYend2:
    ; retrieve SP
    $ => SP         :MLOAD(SPw)
    $ => RR         :MLOAD(tmpSHXZkPCtest)
                    :RETURN