; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

CONSTL %BN254_P = 21888242871839275222246405745257275088696311157297823662689037894645226208583n
CONSTL %BN254_P_MINUS_ONE = 21888242871839275222246405745257275088696311157297823662689037894645226208582n
CONSTL %BN254_P_BY_TWO = 43776485743678550444492811490514550177392622314595647325378075789290452417166n

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; 1] Addition
        1n => A
        3n => C
                                                                                        :CALL(addFpBN254)
        C => A
        4n                                                                              :ASSERT

        ; 2] Subtraction
        2n => A
        3n => C
                                                                                        :CALL(subFpBN254)
        C => A
        %BN254_P_MINUS_ONE                                                              :ASSERT

        ; 3] Squaring
        ${const.BN254_P - 2} => A
                                                                                        :CALL(squareFpBN254)
        B => A
        4n                                                                              :ASSERT

        ; 4] Inversion
        0n => A
                                                                                        :CALL(invFpBN254)
        B => A
        0n                                                                              :ASSERT

        %BN254_P + %BN254_P => A
                                                                                        :CALL(invFpBN254)
        B => A
        0n                                                                              :ASSERT

        %BN254_P + %BN254_P + %BN254_P => A
                                                                                        :CALL(invFpBN254)
        B => A
        0n                                                                              :ASSERT

        %BN254_P + %BN254_P + %BN254_P + %BN254_P => A
                                                                                        :CALL(invFpBN254)
        B => A
        0n                                                                              :ASSERT

        %BN254_P + %BN254_P + %BN254_P + %BN254_P + %BN254_P => A
                                                                                        :CALL(invFpBN254)
        B => A
        0n                                                                              :ASSERT

        2n => A
                                                                                        :CALL(invFpBN254)
        B => A
        10944121435919637611123202872628637544348155578648911831344518947322613104292n  :ASSERT

        ; 5] Reduction
        0n => A
                                                                                        :CALL(reduceFpBN254)
        0n                                                                              :ASSERT

        %BN254_P => A
                                                                                        :CALL(reduceFpBN254)
        0n                                                                              :ASSERT

        %BN254_P + 1n => A
                                                                                        :CALL(reduceFpBN254)
        1n                                                                              :ASSERT

        %BN254_P + %BN254_P_MINUS_ONE => A
                                                                                        :CALL(reduceFpBN254)
        %BN254_P_MINUS_ONE                                                              :ASSERT

        %BN254_P_BY_TWO => A
                                                                                        :CALL(reduceFpBN254)
        0n                                                                              :ASSERT


end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "../main/pairings/FPBN254/reduceFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/addFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/subFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/squareFpBN254.zkasm"
INCLUDE "../main/pairings/FPBN254/invFpBN254.zkasm"