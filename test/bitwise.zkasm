start:

    1 => B
    1 => C
    1 => A
    ${bitwise_and(B, C)}  :ASSERT

    ${loadScalar(115792089237316195423570985008687907853269984665640564039457584007913129639935)} => B
    ${loadScalar(255)} => A
    ${bitwise_and(B, 255)}  :ASSERT

    2**32 + 5 => B
    2**8 - 1 => C
    5 => A
    ${bitwise_and(B, C)}  :ASSERT

    2**32 + 5 => B
    2**8 - 1 => C
    5 => A
    ${bitwise_and(B, C)}  :ASSERT

    10 => B
    5 => C
    15 => A
    ${bitwise_or(B, C)}  :ASSERT

    2**16 => B
    2**8 => C
    2**16 + 2**8  => A
    ${bitwise_or(B, C)}  :ASSERT

    ${loadScalar(57896044618658097711785492504343953926634992332820282019728792003956564819968)} => B
    ${loadScalar(1)} => C
    ${loadScalar(57896044618658097711785492504343953926634992332820282019728792003956564819969)}  => A
    ${bitwise_or(B, C)}  :ASSERT

    0 => B
    7 => C
    7 => A
    ${bitwise_xor(B, C)}  :ASSERT

    2**32 - 1 => B
    2**32 - 1 => C
    0 => A
    ${bitwise_xor(B, C)}  :ASSERT

    2**32 - 1 => B
    2**32 - 1 => C
    0 => A
    ${bitwise_xor(B, C)}  :ASSERT

    10 => B
    5 => C
    15 => A
    ${bitwise_xor(B, C)}  :ASSERT

    0 => B
    ${loadScalar(115792089237316195423570985008687907853269984665640564039457584007913129639935)}  => A
    ${bitwise_not(B)}  :ASSERT

    ${loadScalar(115792089237316195423570985008687907853269984665640564039457584007913129639935)}  => B
    0 => A
    ${bitwise_not(B)}  :ASSERT

    ${loadScalar(115792089237316195423570985008687907853269984665640564039457584007913129639929)}  => B
    0x06 => A
    ${bitwise_not(B)}  :ASSERT


    0 => A,B,C,D,E,CTX, SP, PC, GAS,  SR, HASHPOS, RR ; Set all registers to 0
                                                                        :JMP(finalWait)

INCLUDE "../main/end.zkasm"