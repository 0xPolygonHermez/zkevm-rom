; constants needed by executor C++
INCLUDE "../main/constants.zkasm"

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT

        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; 256 BITS EXPONENT TESTS
        ; ---------------------------------------------------------------------------------------------
        ; 1] B == kÂ·M (at any point of the exponentiations) should return 0
        1                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        1                                                                               :MSTORE(modexp_Mlen)
        4n                                                                              :MSTORE(modexp_B)
        78n                                                                             :MSTORE(modexp_E)
        4n                                                                              :MSTORE(modexp_M)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1                                                                               :MLOAD(modexp_outlen)

        1                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        1                                                                               :MSTORE(modexp_Mlen)
        8n                                                                              :MSTORE(modexp_B)
        78n                                                                             :MSTORE(modexp_E)
        4n                                                                              :MSTORE(modexp_M)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1                                                                               :MLOAD(modexp_outlen)

        1                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        1                                                                               :MSTORE(modexp_Mlen)
        2n                                                                              :MSTORE(modexp_B)
        2n                                                                              :MSTORE(modexp_E)
        4n                                                                              :MSTORE(modexp_M)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1                                                                               :MLOAD(modexp_outlen)

        ; Larger inputs
        2                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        1                                                                               :MSTORE(modexp_Mlen)
        0n                                                                              :MSTORE(modexp_B)
        1 => E
        8n                                                                              :MSTORE(modexp_B + E)
        78n                                                                             :MSTORE(modexp_E)
        4n                                                                              :MSTORE(modexp_M)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1                                                                               :MLOAD(modexp_outlen)

        2                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        2                                                                               :MSTORE(modexp_Mlen)
        8n                                                                              :MSTORE(modexp_B)
        1 => E
        8n                                                                              :MSTORE(modexp_B + E)
        78n                                                                             :MSTORE(modexp_E)
        4n                                                                              :MSTORE(modexp_M)
        1 => E
        4n                                                                              :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1                                                                               :MLOAD(modexp_outlen)

        ; 2] B = [100n, 2831023n, 0n, 73916234139162n], E = [2n**256n - 1n], M = [0n, 0n, 8238129386n, 23102318237n]
        ; Hamming weight of E is 256
        4                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        4                                                                               :MSTORE(modexp_Mlen)

        100n                                                                            :MSTORE(modexp_B)
        1 => E
        2831023n                                                                        :MSTORE(modexp_B + E)
        2 => E
        0n                                                                              :MSTORE(modexp_B + E)
        3 => E
        73916234139162n                                                                 :MSTORE(modexp_B + E)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(modexp_E)
        0n                                                                              :MSTORE(modexp_M)
        1 => E
        0n                                                                              :MSTORE(modexp_M + E)
        2 => E
        8238129386n                                                                     :MSTORE(modexp_M + E)
        3 => E
        23102318237n                                                                    :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1 => E
        0n                                                                              :MLOAD(modexp_out + E)
        2 => E
        25636070175539943947777314844209202718110211581133019863886488575898865601868n  :MLOAD(modexp_out + E)
        3 => E
        4679155145n                                                                     :MLOAD(modexp_out + E)
        4                                                                               :MLOAD(modexp_outlen)

        ; 3] B = [100n, 2831023n, 0n, 73916234139162n, 100n, 2831023n, 0n, 73916234139162n,100n, 2831023n, 0n, 73916234139162n], E = [903741926349715234612309461283471234n], M = [0n, 0n, 8238129386n, 23102318237n, 1892397612351n, 7246598123051n, 8238129386n, 1264591241237897123126n]
        ; Hamming weight of E is 120
        12                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        8                                                                               :MSTORE(modexp_Mlen)

        100n                                                                            :MSTORE(modexp_B)
        1 => E
        2831023n                                                                        :MSTORE(modexp_B + E)
        2 => E
        0n                                                                              :MSTORE(modexp_B + E)
        3 => E
        73916234139162n                                                                 :MSTORE(modexp_B + E)
        4 => E
        100n                                                                            :MSTORE(modexp_B + E)
        5 => E
        2831023n                                                                        :MSTORE(modexp_B + E)
        6 => E
        0n                                                                              :MSTORE(modexp_B + E)
        7 => E
        73916234139162n                                                                 :MSTORE(modexp_B + E)
        8 => E
        100n                                                                            :MSTORE(modexp_B + E)
        9 => E
        2831023n                                                                        :MSTORE(modexp_B + E)
        10 => E
        0n                                                                              :MSTORE(modexp_B + E)
        11 => E
        73916234139162n                                                                 :MSTORE(modexp_B + E)
        903741926349715234612309461283471234n                                           :MSTORE(modexp_E)
        0n                                                                              :MSTORE(modexp_M)
        1 => E
        0n                                                                              :MSTORE(modexp_M + E)
        2 => E
        8238129386n                                                                     :MSTORE(modexp_M + E)
        3 => E
        23102318237n                                                                    :MSTORE(modexp_M + E)
        4 => E
        1892397612351n                                                                  :MSTORE(modexp_M + E)
        5 => E
        7246598123051n                                                                  :MSTORE(modexp_M + E)
        6 => E
        8238129386n                                                                     :MSTORE(modexp_M + E)
        7 => E
        1264591241237897123126n                                                         :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        0n                                                                              :MLOAD(modexp_out)
        1 => E
        0n                                                                              :MLOAD(modexp_out + E)
        2 => E
        14984469305990977542353827078899382678368215018946198341845725551977623627446n  :MLOAD(modexp_out + E)
        3 => E
        68986200907052834988812862957862042564780541926701277492865197684364096948359n  :MLOAD(modexp_out + E)
        4 => E
        19960171666179366961875030436152164148711578520678689062449823687317995303656n  :MLOAD(modexp_out + E)
        5 => E
        10163909190618518832451417682132582498490814809943760852308996448668923869413n  :MLOAD(modexp_out + E)
        6 => E
        29735535392706191114764336807325502135962613879333248096358552087717155148899n  :MLOAD(modexp_out + E)
        7 => E
        511131288598502431475n                                                          :MLOAD(modexp_out + E)
        8                                                                               :MLOAD(modexp_outlen)

        ; 4] B = [7n], E = [110n], M = [7719472615821079694904732333912527190217998977709370935963838933860875309329n, 17n]
        ; Hamming weight of E is 5
        1                                                                               :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        2                                                                               :MSTORE(modexp_Mlen)

        7n                                                                              :MSTORE(modexp_B)
        110n                                                                            :MSTORE(modexp_E)
        7719472615821079694904732333912527190217998977709370935963838933860875309329n   :MSTORE(modexp_M)
        1 => E
        17n                                                                             :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        81730215206688390341255830729934766338330049967253209305087427132484271882414n  :MLOAD(modexp_out)
        1 => E
        13n                                                                             :MLOAD(modexp_out + E)
        2                                                                               :MLOAD(modexp_outlen)
        ; ---------------------------------------------------------------------------------------------

        ; 512 BITS EXPONENT TESTS
        ; ---------------------------------------------------------------------------------------------
        ; 1] B = [2n, 1n, 1n, 1n], E = [3n, 5n], M = [4n, 6n, 7n]
        ; Hamming weight of E is 4
        4                                                                               :MSTORE(modexp_Blen)
        2                                                                               :MSTORE(modexp_Elen)
        3                                                                               :MSTORE(modexp_Mlen)

        2n                                                                              :MSTORE(modexp_B)
        1 => E
        1n                                                                              :MSTORE(modexp_B + E)
        2 => E
        1n                                                                              :MSTORE(modexp_B + E)
        3 => E
        1n                                                                              :MSTORE(modexp_B + E)
        3n                                                                              :MSTORE(modexp_E)
        1 => E
        5n                                                                              :MSTORE(modexp_E + E)
        4n                                                                              :MSTORE(modexp_M)
        1 => E
        6n                                                                              :MSTORE(modexp_M + E)
        2 => E
        7n                                                                              :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        16799222018138169590613227618843456355247327644003751420511040302320945803948n  :MLOAD(modexp_out)
        1 => E
        67226185770814561827024093064262870237432709513661454124124794094744315370418n  :MLOAD(modexp_out + E)
        2 => E
        1n                                                                              :MLOAD(modexp_out + E)
        3                                                                               :MLOAD(modexp_outlen)

        ; 2] B = [2n, 1n, 1n, 1n], E = [2n**256n - 1n, 2n**256n - 1n], M = [4n, 6n, 7n]
        ; Hamming weight of E is 512
        4                                                                               :MSTORE(modexp_Blen)
        2                                                                               :MSTORE(modexp_Elen)
        3                                                                               :MSTORE(modexp_Mlen)

        2n                                                                              :MSTORE(modexp_B)
        1 => E
        1n                                                                              :MSTORE(modexp_B + E)
        2 => E
        1n                                                                              :MSTORE(modexp_B + E)
        3 => E
        1n                                                                              :MSTORE(modexp_B + E)
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(modexp_E)
        1 => E
        115792089237316195423570985008687907853269984665640564039457584007913129639935n :MSTORE(modexp_E + E)
        4n                                                                              :MSTORE(modexp_M)
        1 => E
        6n                                                                              :MSTORE(modexp_M + E)
        2 => E
        7n                                                                              :MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
        111873638420780286093512129901489267041413036926649390648147612881355784341812n :MLOAD(modexp_out)
        1 => E
        11181991619082508729788448443921623930160246165837402400671610626538926623319n  :MLOAD(modexp_out + E)
        2 => E
        2n                                                                              :MLOAD(modexp_out + E)
        3                                                                               :MLOAD(modexp_outlen)
        ; ---------------------------------------------------------------------------------------------


        ; 768 BITS TESTS
        ; ---------------------------------------------------------------------------------------------
        ; ---------------------------------------------------------------------------------------------

        ; 1024 BITS TESTS
        ; ---------------------------------------------------------------------------------------------
        ; ---------------------------------------------------------------------------------------------

        ; 4096 BITS TESTS
        ; ---------------------------------------------------------------------------------------------
        ; 1] Blen = 16, Elen = Mlen = 1
        16                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        1                                                                               :MSTORE(modexp_Mlen)

		79682313232473470607411611222799169674661221361161508682342262669488472802709n	:MSTORE(modexp_B)
		1 => E
		64543272570765854206172333138181582698966088677167578455572643857223443534221n	:MSTORE(modexp_B + E)
		2 => E
		41013368700952433297770792072436823191831060400631854801523739861587759544n		:MSTORE(modexp_B + E)
		3 => E
		35685038273887359064520668555491444960261997659381360895406712100398597357348n	:MSTORE(modexp_B + E)
		4 => E
		133029975877400389180684841929675726606225035043435332360926901580693680262n	:MSTORE(modexp_B + E)
		5 => E
		24563713026162797682484577709932170008895098676856309352834837082479016179272n	:MSTORE(modexp_B + E)
		6 => E
		74074900993951345578817327213689306543998883645091080472921659936688993486778n	:MSTORE(modexp_B + E)
		7 => E
		80197086448923126029525338783196583240907328704000619936506876255613296721615n	:MSTORE(modexp_B + E)
		8 => E
		71792675465944011723747087486637283576956028838699944447902066138168469136654n	:MSTORE(modexp_B + E)
		9 => E
		13877126779728100032847034788589797183498695976504905479337327737291047807791n	:MSTORE(modexp_B + E)
		10 => E
		88495657359265959492596595516772192563108933750709883595366806688862143659110n	:MSTORE(modexp_B + E)
		11 => E
		6300958885869768199259392943087237730895172768580010656821154212937168995267n	:MSTORE(modexp_B + E)
		12 => E
		77281623846760171486628064643958778573473599256077586688285526608233051545986n	:MSTORE(modexp_B + E)
		13 => E
		36709413932085823372334931605995244972005987179409640967639352549999163316625n	:MSTORE(modexp_B + E)
		14 => E
		84889305564417480047528247902585206147036955681764230541024345604513927199967n	:MSTORE(modexp_B + E)
		15 => E
		96319562792967333917044767543841059308132754624213291319966533781680198329387n	:MSTORE(modexp_B + E)
        65537n                                                                          :MSTORE(modexp_E)
		72847221021874037642769569132275164094322040442822821773040516004504186942893n	:MSTORE(modexp_M)
                                                                                        :CALL(modexp)
        39835447779732380359272840551895169222953615526693818881919202322941555284426n	:MLOAD(modexp_out)
        1n	                                                                        	:MLOAD(modexp_outlen)

        ; ; 2] Blen = Elen = 16, Mlen = 1
        ; 16                                                                              :MSTORE(modexp_Blen)
        ; 16                                                                              :MSTORE(modexp_Elen)
        ; 1                                                                               :MSTORE(modexp_Mlen)

		; 71050553794075590751574565232558453983936710433844505437607055862219229593147n	:MSTORE(modexp_B)
		; 1 => E
		; 2311119566291524187052166030450225884982623802621020117704297191344877127324n	:MSTORE(modexp_B + E)
		; 2 => E
		; 41425637949145657150896102319789119277799005821234114655819013119845168507004n	:MSTORE(modexp_B + E)
		; 3 => E
		; 27432710158553418316382709013332653477402126158654571642096340165629813029148n	:MSTORE(modexp_B + E)
		; 4 => E
		; 64855884914613940606159196869973315039653219108138872452885841451518173265926n	:MSTORE(modexp_B + E)
		; 5 => E
		; 114179790520345212766915619197467741272399299487910365242276569807467315404460n	:MSTORE(modexp_B + E)
		; 6 => E
		; 65433702517710946687148011723629536032259451607684846408212066673476383092855n	:MSTORE(modexp_B + E)
		; 7 => E
		; 70912716282826624595547370701759759731957555830364521210068342278799344565354n	:MSTORE(modexp_B + E)
		; 8 => E
		; 108962111922998507767637931201156050693693415833391822856491978062799221246004n	:MSTORE(modexp_B + E)
		; 9 => E
		; 104919585803459441841628264650790198163260957103390723319754136236152506833795n	:MSTORE(modexp_B + E)
		; 10 => E
		; 110778956830016126801877727623601484344357351150676372632563206106301131401659n	:MSTORE(modexp_B + E)
		; 11 => E
		; 89805706387954343243725098969923544675293643610200110483949051893210964773484n	:MSTORE(modexp_B + E)
		; 12 => E
		; 49441605214112775122575373711011375251104561280549611203366244610082183044580n	:MSTORE(modexp_B + E)
		; 13 => E
		; 26738415432508710188833636324578379506748044875782481656544300498146163965995n	:MSTORE(modexp_B + E)
		; 14 => E
		; 90061541830655577695920973192174012989086252925414785698224068317321571729683n	:MSTORE(modexp_B + E)
		; 15 => E
		; 104046988730536690188259038943188458054688225850879043983462419897284556724245n	:MSTORE(modexp_B + E)
		; 33971987921089971027144158880891217042643607281942501312815993279017754450637n	:MSTORE(modexp_E)
		; 1 => E
		; 77922126445326164100848586215041815373826676904825562964371979228582873146694n	:MSTORE(modexp_E + E)
		; 2 => E
		; 60053697457808056554587360378419884407306536959014338063828446574565751432749n	:MSTORE(modexp_E + E)
		; 3 => E
		; 28505380659520440046066098541123671022002393699148132115736787164585927247154n	:MSTORE(modexp_E + E)
		; 4 => E
		; 41420006249269960396026897034749989742389552840934426583540014227156932178509n	:MSTORE(modexp_E + E)
		; 5 => E
		; 84788843709997712483448811225886083983449165173145871553902051971557591287552n	:MSTORE(modexp_E + E)
		; 6 => E
		; 9710547385215512619762583843673811942425979810509832827691520725760713874609n	:MSTORE(modexp_E + E)
		; 7 => E
		; 109524086897880409398706197038562166850217293443113563123462332128403500288135n	:MSTORE(modexp_E + E)
		; 8 => E
		; 108766537508841097413327200421979351836702529307991413835619315128358666804902n	:MSTORE(modexp_E + E)
		; 9 => E
		; 97423474307374249213245664777066065954923092308871167915194183816491405037758n	:MSTORE(modexp_E + E)
		; 10 => E
		; 57520346884019806080242434487721962336733788608211778941734017993493361230006n	:MSTORE(modexp_E + E)
		; 11 => E
		; 96939514396867440752505254025053268738361428692795115144833619080874132113659n	:MSTORE(modexp_E + E)
		; 12 => E
		; 106940305798126701930452039042389517483718997182868267407362650816121421348695n	:MSTORE(modexp_E + E)
		; 13 => E
		; 93016388750996612536508398332036279514362682040309020531649384676220760236859n	:MSTORE(modexp_E + E)
		; 14 => E
		; 31557796771274301393544096332573459628658833249730842037307167942246706851427n	:MSTORE(modexp_E + E)
		; 15 => E
		; 82556706461393888060953398750707647347450236004144410511709274016258909496983n	:MSTORE(modexp_E + E)
		; 72847221021874037642769569132275164094322040442822821773040516004504186942893n	:MSTORE(modexp_M)
        ;                                                                                 :CALL(modexp)
        ; 70030934173990436633040632542141848011108687892358966752788121730214829297187n	:MLOAD(modexp_out)
        ; 1n	                                                                        	:MLOAD(modexp_outlen)

        ; 3] Blen = Mlen = 16, Elen = 1
        ; 3.1]
        16                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        16                                                                              :MSTORE(modexp_Mlen)

		37924229408289482165803031675401013124901204286470402501334310819425856080769n	:MSTORE(modexp_B)
		1 => E
		68230554850406790393335622985000862560412869841790282370567989273189176853944n	:MSTORE(modexp_B + E)
		2 => E
		18739220654407561511874385410342272003979993829094184733735102210684894197360n	:MSTORE(modexp_B + E)
		3 => E
		104625700450534358765215410730104048961222066068915559406617272097604826348437n	:MSTORE(modexp_B + E)
		4 => E
		51567802805698379422939389175055821627525780369641743070246650840596365975847n	:MSTORE(modexp_B + E)
		5 => E
		36376329820029959961059111209614438636772206095543453919642843050454582814679n	:MSTORE(modexp_B + E)
		6 => E
		44522495152966940943585404072003181369127388558540531535861861951483372641560n	:MSTORE(modexp_B + E)
		7 => E
		24318250107596801022055177598514809706589223658732683705740708158769957778387n	:MSTORE(modexp_B + E)
		8 => E
		92454610886044395311393075699340229384301806849232216376720819164839986860624n	:MSTORE(modexp_B + E)
		9 => E
		88528324716442370493104391640983024212241659273083705959452539513826125667133n	:MSTORE(modexp_B + E)
		10 => E
		105333534619699493802180629465274795585665601176722460276973393348887271614948n	:MSTORE(modexp_B + E)
		11 => E
		64876030133878208912134468604708622595384009691230250196764254417962709486067n	:MSTORE(modexp_B + E)
		12 => E
		91225894261375645229792693749534518967710703465611009253921289138268358394469n	:MSTORE(modexp_B + E)
		13 => E
		90348546611829849796484333307241739807810147984211446095491573977793020352322n	:MSTORE(modexp_B + E)
		14 => E
		46241614006125728465318582820711043122940783638154174404536596332581026395360n	:MSTORE(modexp_B + E)
		15 => E
		99149831603124336236439483084339386134406219101862706996762378257981741912736n	:MSTORE(modexp_B + E)
		4368560466608909307598443030984237722400255124870596561938643117188181152143n	:MSTORE(modexp_M)
		1 => E
		28204143169940543083491525897627603188033527858690769701170201940374221601245n	:MSTORE(modexp_M + E)
		2 => E
		61217952914925378005374398553074630693728204065011340731170364550878214659815n	:MSTORE(modexp_M + E)
		3 => E
		88118295973651813182703915416869725420348423583318199620990966714598238251552n	:MSTORE(modexp_M + E)
		4 => E
		56204502858079831000146201011573821513739086570348047358071347832618798255717n	:MSTORE(modexp_M + E)
		5 => E
		112725224422902909858467186270562227302175772670104568236470325207555377396666n	:MSTORE(modexp_M + E)
		6 => E
		73339905915381957604898271520718074720658794539748632014341137820762993147466n	:MSTORE(modexp_M + E)
		7 => E
		106528985384520019150189393412999362927371304554912360991203065081415045924966n	:MSTORE(modexp_M + E)
		8 => E
		4694661456344419148913147297494031210082969714867234747900860197119323201863n	:MSTORE(modexp_M + E)
		9 => E
		105539502916971480578816789738846550555830898514461324042801197877663191565909n	:MSTORE(modexp_M + E)
		10 => E
		80665310393851221179007517265906288568261739729516922153119869080362910046925n	:MSTORE(modexp_M + E)
		11 => E
		62925213013801927973636224311530332352379988774606203481041004347356521229626n	:MSTORE(modexp_M + E)
		12 => E
		86615192813531756003302541387953267287184373448109857650547804088087305453939n	:MSTORE(modexp_M + E)
		13 => E
		101432686246979103425668225617022809239473124804448904101486818738156404729830n	:MSTORE(modexp_M + E)
		14 => E
		81185454731627141874646679535037788294928264888432136644606175703270853977033n	:MSTORE(modexp_M + E)
		15 => E
		100952807471413669397287143861650720025441441686015619291329552671298687021944n	:MSTORE(modexp_M + E)
    	3n                                                                              :MSTORE(modexp_E)
    	                                                                                :CALL(modexp)
		39060232210842192865255693643895726380948007613006305279510511321192759611068n	:MLOAD(modexp_out)
		1 => E
		99284533350540419680425679405964684423174339711679803248391935245805209923070n	:MLOAD(modexp_out + E)
		2 => E
		109169237310323530752810777432399949029517390082816750351605208567352805910677n	:MLOAD(modexp_out + E)
		3 => E
		62930166743444693059729355133738944005624699172943263143372681634024231410398n	:MLOAD(modexp_out + E)
		4 => E
		3645377994753503508887388083164875289643316400491295083459296003996043600952n	:MLOAD(modexp_out + E)
		5 => E
		19149461293685740447012477409803281881850209016975673872328641759185258898454n	:MLOAD(modexp_out + E)
		6 => E
		6128211511014754458026757836656478094157704942188309990669408013208226331134n	:MLOAD(modexp_out + E)
		7 => E
		81263218759677486762604599653369440233231715375456338238514334355349665229893n	:MLOAD(modexp_out + E)
		8 => E
		34592371546276592252462635832386263358515320192906350313686959573959463448218n	:MLOAD(modexp_out + E)
		9 => E
		51989835959341673110873745322329233415144893755105568753554688560801263631574n	:MLOAD(modexp_out + E)
		10 => E
		84810801189689344625326584029855645866210550678064651986321335696210733246626n	:MLOAD(modexp_out + E)
		11 => E
		58954497922212024692687026951546733784088063092392876596435949364763456205126n	:MLOAD(modexp_out + E)
		12 => E
		21216023529240327629295276841208141672149657467287315214945207723145873906218n	:MLOAD(modexp_out + E)
		13 => E
		67969553507141474422942950202188631862759071608105134505514789540935945400734n	:MLOAD(modexp_out + E)
		14 => E
		114165984354566243427589886061604906090475523036306719160700002176798973642185n	:MLOAD(modexp_out + E)
		15 => E
		40775987737607964514397594694708916064548205466165308850057770980957535279190n	:MLOAD(modexp_out + E)
        16                                                                              :MLOAD(modexp_outlen)

        ; 3.2]
        16                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        16                                                                              :MSTORE(modexp_Mlen)
		37924229408289482165803031675401013124901204286470402501334310819425856080769n	:MSTORE(modexp_B)
		1 => E
		68230554850406790393335622985000862560412869841790282370567989273189176853944n	:MSTORE(modexp_B + E)
		2 => E
		18739220654407561511874385410342272003979993829094184733735102210684894197360n	:MSTORE(modexp_B + E)
		3 => E
		104625700450534358765215410730104048961222066068915559406617272097604826348437n	:MSTORE(modexp_B + E)
		4 => E
		51567802805698379422939389175055821627525780369641743070246650840596365975847n	:MSTORE(modexp_B + E)
		5 => E
		36376329820029959961059111209614438636772206095543453919642843050454582814679n	:MSTORE(modexp_B + E)
		6 => E
		44522495152966940943585404072003181369127388558540531535861861951483372641560n	:MSTORE(modexp_B + E)
		7 => E
		24318250107596801022055177598514809706589223658732683705740708158769957778387n	:MSTORE(modexp_B + E)
		8 => E
		92454610886044395311393075699340229384301806849232216376720819164839986860624n	:MSTORE(modexp_B + E)
		9 => E
		88528324716442370493104391640983024212241659273083705959452539513826125667133n	:MSTORE(modexp_B + E)
		10 => E
		105333534619699493802180629465274795585665601176722460276973393348887271614948n	:MSTORE(modexp_B + E)
		11 => E
		64876030133878208912134468604708622595384009691230250196764254417962709486067n	:MSTORE(modexp_B + E)
		12 => E
		91225894261375645229792693749534518967710703465611009253921289138268358394469n	:MSTORE(modexp_B + E)
		13 => E
		90348546611829849796484333307241739807810147984211446095491573977793020352322n	:MSTORE(modexp_B + E)
		14 => E
		46241614006125728465318582820711043122940783638154174404536596332581026395360n	:MSTORE(modexp_B + E)
		15 => E
		99149831603124336236439483084339386134406219101862706996762378257981741912736n	:MSTORE(modexp_B + E)
		4368560466608909307598443030984237722400255124870596561938643117188181152143n	:MSTORE(modexp_M)
		1 => E
		28204143169940543083491525897627603188033527858690769701170201940374221601245n	:MSTORE(modexp_M + E)
		2 => E
		61217952914925378005374398553074630693728204065011340731170364550878214659815n	:MSTORE(modexp_M + E)
		3 => E
		88118295973651813182703915416869725420348423583318199620990966714598238251552n	:MSTORE(modexp_M + E)
		4 => E
		56204502858079831000146201011573821513739086570348047358071347832618798255717n	:MSTORE(modexp_M + E)
		5 => E
		112725224422902909858467186270562227302175772670104568236470325207555377396666n	:MSTORE(modexp_M + E)
		6 => E
		73339905915381957604898271520718074720658794539748632014341137820762993147466n	:MSTORE(modexp_M + E)
		7 => E
		106528985384520019150189393412999362927371304554912360991203065081415045924966n	:MSTORE(modexp_M + E)
		8 => E
		4694661456344419148913147297494031210082969714867234747900860197119323201863n	:MSTORE(modexp_M + E)
		9 => E
		105539502916971480578816789738846550555830898514461324042801197877663191565909n	:MSTORE(modexp_M + E)
		10 => E
		80665310393851221179007517265906288568261739729516922153119869080362910046925n	:MSTORE(modexp_M + E)
		11 => E
		62925213013801927973636224311530332352379988774606203481041004347356521229626n	:MSTORE(modexp_M + E)
		12 => E
		86615192813531756003302541387953267287184373448109857650547804088087305453939n	:MSTORE(modexp_M + E)
		13 => E
		101432686246979103425668225617022809239473124804448904101486818738156404729830n	:MSTORE(modexp_M + E)
		14 => E
		81185454731627141874646679535037788294928264888432136644606175703270853977033n	:MSTORE(modexp_M + E)
		15 => E
		100952807471413669397287143861650720025441441686015619291329552671298687021944n	:MSTORE(modexp_M + E)
        65537n                                                                          :MSTORE(modexp_E)
                                                                                        :CALL(modexp)
		30186209231779725290287967878560956226809426123422184270357951605304373492067n	:MLOAD(modexp_out)
		1 => E
		56378602148099721798763724843127971047819132930616646821928609636019413997437n	:MLOAD(modexp_out + E)
		2 => E
		104585421667308091086697809268225553655561004775475565616585559469649707166583n	:MLOAD(modexp_out + E)
		3 => E
		57332553509658954797422316649665205659038504022777901721859372117975729331395n	:MLOAD(modexp_out + E)
		4 => E
		71160297366919404927767288677170830349524526764837835922422603335883060426633n	:MLOAD(modexp_out + E)
		5 => E
		37663010872419315993941035885076737840046461693519376763312965751826491412058n	:MLOAD(modexp_out + E)
		6 => E
		85628163729819079301781131353278733742337215762503145451804427508737406550408n	:MLOAD(modexp_out + E)
		7 => E
		30122934402101644981192140697944460397631812699255947934421267884882036531808n	:MLOAD(modexp_out + E)
		8 => E
		41911641200707400216973090481225463949464966052218601350140915847730936274314n	:MLOAD(modexp_out + E)
		9 => E
		3254957425564395182030426420906148204247695309319941830248629836779514130052n	:MLOAD(modexp_out + E)
		10 => E
		17568574233555430000188504552854565100909697566384677405455446953742520903763n	:MLOAD(modexp_out + E)
		11 => E
		90056336203638444622631463374562301388678031242213951682950635716230152633476n	:MLOAD(modexp_out + E)
		12 => E
		37896075558567471590653368546276409068345631897352750329686231175382953792907n	:MLOAD(modexp_out + E)
		13 => E
		91591557354240243363173128273762107236440333112750521721800907157515037764317n	:MLOAD(modexp_out + E)
		14 => E
		20378189238029856538380830142696517952134481015835070624474088662045027158261n	:MLOAD(modexp_out + E)
		15 => E
		86322360060109307422998669696656057232757405495821912040329317119021810406962n	:MLOAD(modexp_out + E)
        ; ---------------------------------------------------------------------------------------------

        ; 8192 BITS TESTS
        ; ---------------------------------------------------------------------------------------------
        ; ; 1] Blen = 16, Elen = 32, Mlen = 1
        ; 16                                                                              :MSTORE(modexp_Blen)
        ; 32                                                                              :MSTORE(modexp_Elen)
        ; 1                                                                               :MSTORE(modexp_Mlen)

		; 71050553794075590751574565232558453983936710433844505437607055862219229593147n	:MSTORE(modexp_B)
		; 1 => E
		; 2311119566291524187052166030450225884982623802621020117704297191344877127324n	:MSTORE(modexp_B + E)
		; 2 => E
		; 41425637949145657150896102319789119277799005821234114655819013119845168507004n	:MSTORE(modexp_B + E)
		; 3 => E
		; 27432710158553418316382709013332653477402126158654571642096340165629813029148n	:MSTORE(modexp_B + E)
		; 4 => E
		; 64855884914613940606159196869973315039653219108138872452885841451518173265926n	:MSTORE(modexp_B + E)
		; 5 => E
		; 114179790520345212766915619197467741272399299487910365242276569807467315404460n	:MSTORE(modexp_B + E)
		; 6 => E
		; 65433702517710946687148011723629536032259451607684846408212066673476383092855n	:MSTORE(modexp_B + E)
		; 7 => E
		; 70912716282826624595547370701759759731957555830364521210068342278799344565354n	:MSTORE(modexp_B + E)
		; 8 => E
		; 108962111922998507767637931201156050693693415833391822856491978062799221246004n	:MSTORE(modexp_B + E)
		; 9 => E
		; 104919585803459441841628264650790198163260957103390723319754136236152506833795n	:MSTORE(modexp_B + E)
		; 10 => E
		; 110778956830016126801877727623601484344357351150676372632563206106301131401659n	:MSTORE(modexp_B + E)
		; 11 => E
		; 89805706387954343243725098969923544675293643610200110483949051893210964773484n	:MSTORE(modexp_B + E)
		; 12 => E
		; 49441605214112775122575373711011375251104561280549611203366244610082183044580n	:MSTORE(modexp_B + E)
		; 13 => E
		; 26738415432508710188833636324578379506748044875782481656544300498146163965995n	:MSTORE(modexp_B + E)
		; 14 => E
		; 90061541830655577695920973192174012989086252925414785698224068317321571729683n	:MSTORE(modexp_B + E)
		; 15 => E
		; 104046988730536690188259038943188458054688225850879043983462419897284556724245n	:MSTORE(modexp_B + E)
		; 76258746201283982645587901332414432739909461826418801220672878663730191795232n	:MSTORE(modexp_E)
		; 1 => E
		; 14229851287285170470957155497391834688082201047771074134798987350533788031156n	:MSTORE(modexp_E + E)
		; 2 => E
		; 81533024151778482749430962632322707313027767811611043054284702515386692950687n	:MSTORE(modexp_E + E)
		; 3 => E
		; 8141633281699943824118714450443164005237941232831125215672559000204210600323n	:MSTORE(modexp_E + E)
		; 4 => E
		; 51007176328061781717633699014696552750308240998656875784646019437161248510022n	:MSTORE(modexp_E + E)
		; 5 => E
		; 106071722837234389798554094250828902452432434958153184667260839994459611837342n	:MSTORE(modexp_E + E)
		; 6 => E
		; 100230489419677240887089362285203274928102899381652393983569186777557382541779n	:MSTORE(modexp_E + E)
		; 7 => E
		; 87879154397947210087106966625197397862735130068646261788426652869771820509616n	:MSTORE(modexp_E + E)
		; 8 => E
		; 95910832308024171851618993150481921937992827628570313141587551679301205787653n	:MSTORE(modexp_E + E)
		; 9 => E
		; 56325490982677115149543544844429795450475174532268174744912442604171234520684n	:MSTORE(modexp_E + E)
		; 10 => E
		; 92279587189196615790442243986095965191470136365218749875229554640748067293976n	:MSTORE(modexp_E + E)
		; 11 => E
		; 101742530126141978985767956519943040369255818260170518234107534125239287715046n	:MSTORE(modexp_E + E)
		; 12 => E
		; 18149831723885501834780453590048252669895784725869946779703689051215053924210n	:MSTORE(modexp_E + E)
		; 13 => E
		; 108418536966335240982622603956904261958086087919448511653867960379666919908120n	:MSTORE(modexp_E + E)
		; 14 => E
		; 85375756794768575331981790806560537915310410200315059084018867147198618911418n	:MSTORE(modexp_E + E)
		; 15 => E
		; 4695535736413777673751638434146051749639519180545966899214955707210798143404n	:MSTORE(modexp_E + E)
		; 16 => E
		; 107686936858044396353050394658951316054078664889790433925695428956196469052437n	:MSTORE(modexp_E + E)
		; 17 => E
		; 98992960576649555193444049029191167448401916204443503157924491330688962707702n	:MSTORE(modexp_E + E)
		; 18 => E
		; 28831341215365523183447349462928123109504892029366550505460556810244324688706n	:MSTORE(modexp_E + E)
		; 19 => E
		; 6244403745121382062454832675509908005308090603466196964416686333235882672199n	:MSTORE(modexp_E + E)
		; 20 => E
		; 84799957950134760904298775966516653696788779125526887835464675373737783466153n	:MSTORE(modexp_E + E)
		; 21 => E
		; 48627951917191223340396480673320944356213903780640361562966310872761294409321n	:MSTORE(modexp_E + E)
		; 22 => E
		; 1998455226609775634086429009803184701438555046525800041821541457512703578341n	:MSTORE(modexp_E + E)
		; 23 => E
		; 17111686167104302872480175539141080358546990013870782555784830287161441763067n	:MSTORE(modexp_E + E)
		; 24 => E
		; 76956086582271522349024399008827385337580012142740773586608621303394806968931n	:MSTORE(modexp_E + E)
		; 25 => E
		; 30820225218026058791918508922913533862480649168455006349251399787799910264751n	:MSTORE(modexp_E + E)
		; 26 => E
		; 39574930535822637947710846048091464501920884049550344516411346668145380285447n	:MSTORE(modexp_E + E)
		; 27 => E
		; 29958804646464351833720585683972135554033036811000625339867082338282377810146n	:MSTORE(modexp_E + E)
		; 28 => E
		; 31855784112983104278650198470116821131218972166134981173356451075709599588548n	:MSTORE(modexp_E + E)
		; 29 => E
		; 77693939667794234483665826472458446626151021029641861158955235311230466345870n	:MSTORE(modexp_E + E)
		; 30 => E
		; 76470792390833156560070798913966866475970097043371344204493796403126663372415n	:MSTORE(modexp_E + E)
		; 31 => E
		; 114988869843408178999479197752358298421236312058743976013813966822126396167278n	:MSTORE(modexp_E + E)
		; 72847221021874037642769569132275164094322040442822821773040516004504186942893n	:MSTORE(modexp_M)
        ;                                                                                 :CALL(modexp)
        ; 39485175434713692833767794600629031124832788746937134372850464715072794794365n	:MLOAD(modexp_out)
        ; 1n	                                                                        	:MLOAD(modexp_outlen)

        ; 2] Blen = 32, Elen = 1, Mlen = 2
        32                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        2                                                                               :MSTORE(modexp_Mlen)

		58582339313272081541741091700594438953240612446085692295415022086283220626753n	:MSTORE(modexp_B)
		1 => E
		1082278792311219594083944885733732785223732334635289578358568460157040451417n	:MSTORE(modexp_B + E)
		2 => E
		19613517917404142784873662366229906237596579118836502522712489678006364018137n	:MSTORE(modexp_B + E)
		3 => E
		94585942647244454954435025568500649221875007164723745245117096456516601199618n	:MSTORE(modexp_B + E)
		4 => E
		35639633678852084060200900997468850162084312453050227618889913284300596838199n	:MSTORE(modexp_B + E)
		5 => E
		78099865031131508842883969354441126147665120063157525313709234612881360425292n	:MSTORE(modexp_B + E)
		6 => E
		3465260013338549695646534731938806191895940454762761143209085341490292094583n	:MSTORE(modexp_B + E)
		7 => E
		83240820227760283646014632355413985150832638693530940639158230460807255356621n	:MSTORE(modexp_B + E)
		8 => E
		62051656904790802038019733921610445956666260367244273275496729381748290153955n	:MSTORE(modexp_B + E)
		9 => E
		45666393393776004451398686220386880450315878280561353594540553199247513386595n	:MSTORE(modexp_B + E)
		10 => E
		101785040741538888903354844773182179352722786538112190484679500250614319751259n	:MSTORE(modexp_B + E)
		11 => E
		110652338015694281068707365417090078516695327755424649221664897939524884103417n	:MSTORE(modexp_B + E)
		12 => E
		49243470232752527078453874556325179294416166539728462357711709398098439589335n	:MSTORE(modexp_B + E)
		13 => E
		92761635604125986140178553355595569536048741412993352818243357282258747219597n	:MSTORE(modexp_B + E)
		14 => E
		107125026528073614477778162400448845380679887461023000294123673028489410115428n	:MSTORE(modexp_B + E)
		15 => E
		50015491922034682795400667595741184186461047999761793737177234529134772742883n	:MSTORE(modexp_B + E)
		16 => E
		93839364887903211464040378523451721648365970883493581494218955280319875788856n	:MSTORE(modexp_B + E)
		17 => E
		17091472401859236813752505473711584993054095047275178116344296041292612882277n	:MSTORE(modexp_B + E)
		18 => E
		33133235434716137789301333902142435942934988584475245270513939078566706035139n	:MSTORE(modexp_B + E)
		19 => E
		8618563902985774097645699060359830371796371389216077101052936350915552332541n	:MSTORE(modexp_B + E)
		20 => E
		32959204030626041166684100562123025735545974992282090777516360003585051763609n	:MSTORE(modexp_B + E)
		21 => E
		82767509598720527511245866314874791036239553482587678455676791496639924352817n	:MSTORE(modexp_B + E)
		22 => E
		24581016226774148963550354927392864083633602722111543645399304218924673583653n	:MSTORE(modexp_B + E)
		23 => E
		54907909205416467790958752093550345903140417587581313515617803654573424767356n	:MSTORE(modexp_B + E)
		24 => E
		100791016977344006113073169055960011281141395301059720257405619893429714167341n	:MSTORE(modexp_B + E)
		25 => E
		24941924336732284648883856125208379683444168476081791710711797807642735673908n	:MSTORE(modexp_B + E)
		26 => E
		84084005778965612817305629593090007081360298325328658417757739306412791334620n	:MSTORE(modexp_B + E)
		27 => E
		57802445510214963192751495314468666350299014243361752557159297425362287711690n	:MSTORE(modexp_B + E)
		28 => E
		71604073139668550693524183042211626872574021539160119710031007420261347015402n	:MSTORE(modexp_B + E)
		29 => E
		112794949372007878255901773641270094155501693398414692888840800526209520944761n	:MSTORE(modexp_B + E)
		30 => E
		70731187935137252399476378656555562056546473720901706122635244057158114695508n	:MSTORE(modexp_B + E)
		31 => E
		3352858292656216054449205160393741706300333423229119841653557821211210632061n	:MSTORE(modexp_B + E)
        65537n                                                                          :MSTORE(modexp_E)
		39851039703995454411192288480134431431581770200184123399645359412272832511626n	:MSTORE(modexp_M)
		1 => E
		37752885539763212929058244732198218613925905715762498172556148837284915557195n	:MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
		56022410747783146699662217269120785748464099550239963682054680910629578115775n	:MLOAD(modexp_out)
		1 => E
		14493810196578292049955796525564942375140358401736189058384961357909052370153n	:MLOAD(modexp_out + E)
        2	                                                                        	:MLOAD(modexp_outlen)

        ; 3] Blen = Mlen = 32, Elen = 1
        32                                                                              :MSTORE(modexp_Blen)
        1                                                                               :MSTORE(modexp_Elen)
        32                                                                              :MSTORE(modexp_Mlen)
		92206843202422108295909528035550457464239320812270316776092313402308890408911n	:MSTORE(modexp_B)
		1 => E
		40047772076258452565877196627420165964878704505255944176438631996680615030611n	:MSTORE(modexp_B + E)
		2 => E
		55102040540711402889102967093617552676427432935425286148682018808976201507778n	:MSTORE(modexp_B + E)
		3 => E
		35977955280462673410065921775534746257488802258911143491412287540616950769160n	:MSTORE(modexp_B + E)
		4 => E
		37644026846003786822663244057143575378558522684877331457964638586784769687834n	:MSTORE(modexp_B + E)
		5 => E
		95028989117142459258134747419890072384642803238895763244914849595506863386645n	:MSTORE(modexp_B + E)
		6 => E
		98752559915078375248706497466993285247357859991905637655508437702664948471657n	:MSTORE(modexp_B + E)
		7 => E
		57556090597927384265879763338486069464019514834099187336411030352822407281500n	:MSTORE(modexp_B + E)
		8 => E
		43245974976750172864772520889451618739117437705914718778809420871482727125874n	:MSTORE(modexp_B + E)
		9 => E
		37816491176919635104738211146369245940065309375200509983093469423384094112063n	:MSTORE(modexp_B + E)
		10 => E
		20970663255814660086902645966751426055028722148631626981362495496877355851737n	:MSTORE(modexp_B + E)
		11 => E
		98188032184022250155917923589680287518584405350588578347292998398753174211131n	:MSTORE(modexp_B + E)
		12 => E
		25669385787317930981514354902647200932766434979448204542393628100520533481378n	:MSTORE(modexp_B + E)
		13 => E
		68814029900175265564145503634188485940902886536475131975501235640271933000917n	:MSTORE(modexp_B + E)
		14 => E
		87160340236243582192548479249681726729426388277620719812174126540286740215268n	:MSTORE(modexp_B + E)
		15 => E
		29692821174578757130874540207778004864893877954579183917960766336158356467894n	:MSTORE(modexp_B + E)
		16 => E
		73039028043650402284653870956294802036450850175073538200565082725180560418907n	:MSTORE(modexp_B + E)
		17 => E
		11668112155824627458775018373205936935581049325992845160492054092186046358857n	:MSTORE(modexp_B + E)
		18 => E
		7054109538479788725498636965308049949839728294281187091777313524644702701653n	:MSTORE(modexp_B + E)
		19 => E
		101118203028338998071114272484985720901803997816981804606080272352029643017768n	:MSTORE(modexp_B + E)
		20 => E
		106804875640632221507429078060933974218903538309320795560242169811823501762267n	:MSTORE(modexp_B + E)
		21 => E
		76099296226965961367040388859656785469695879825602049246736152150184380430612n	:MSTORE(modexp_B + E)
		22 => E
		43812961873041613946199674284046527360672846592749061754017962280360251277355n	:MSTORE(modexp_B + E)
		23 => E
		7062347313150321268502311461014160635849079926696159188177206139634892948139n	:MSTORE(modexp_B + E)
		24 => E
		8633876293298165655127866110656903949530672877542367025725070246145898674563n	:MSTORE(modexp_B + E)
		25 => E
		110372118966868761743522615580597421512083491043211030463191844113573169356901n	:MSTORE(modexp_B + E)
		26 => E
		80444563886753262124629748205979575562005096448183330362371710369722907876501n	:MSTORE(modexp_B + E)
		27 => E
		42973803045570795229868100199252568426210462234822006788269243160598575230641n	:MSTORE(modexp_B + E)
		28 => E
		11924876837570961813808882528583392494850602245530414004520515070262642005471n	:MSTORE(modexp_B + E)
		29 => E
		36143537899184300246105940770452042497670815178998869929403492308830551975876n	:MSTORE(modexp_B + E)
		30 => E
		264588434667051108106558461267166102941301300012456816625201418909343549391n	:MSTORE(modexp_B + E)
		31 => E
		89390763868221043648698068187735204588647734710461878957221698506204833642203n	:MSTORE(modexp_B + E)
        65537n                                                                          :MSTORE(modexp_E)
		72847221021874037642769569132275164094322040442822821773040516004504186942893n	:MSTORE(modexp_M)
		1 => E
		69731219719976001030717402405830121891735509392988721738752072035354190365546n	:MSTORE(modexp_M + E)
		2 => E
		71031544988545942319520910296463939232109013876586145075301566927609834669888n	:MSTORE(modexp_M + E)
		3 => E
		26988903963140438794051518198668495502883507750878003573810648320004277706214n	:MSTORE(modexp_M + E)
		4 => E
		26923009822476899667478662828545659748880207850162126352168369071390890626682n	:MSTORE(modexp_M + E)
		5 => E
		96931265726466364911193175927701052794262069284608352964995015999732939352960n	:MSTORE(modexp_M + E)
		6 => E
		98173748339862731302780344170956651996850166987441306225289378135087663102392n	:MSTORE(modexp_M + E)
		7 => E
		68934287332388240451226243957707369220107762473159962455924263324767609116793n	:MSTORE(modexp_M + E)
		8 => E
		1832504478079764331915743572886117120628365701742117947359542627373405406328n	:MSTORE(modexp_M + E)
		9 => E
		68301288638357799144485921485489776253909531615993802867385359644936169382323n	:MSTORE(modexp_M + E)
		10 => E
		50972743615540071729221881664796921748468189686351130644316265553337483524672n	:MSTORE(modexp_M + E)
		11 => E
		15207443544656988850347729198275516539450007609685086978085959593060693030487n	:MSTORE(modexp_M + E)
		12 => E
		5433038755888594263181690062917757730627703937725727343727151020245663368439n	:MSTORE(modexp_M + E)
		13 => E
		13791242616407995591280216657127566393158300752530618316359975533848759348327n	:MSTORE(modexp_M + E)
		14 => E
		46359208899322282320547392249270149043047396707829214050316719979015506309260n	:MSTORE(modexp_M + E)
		15 => E
		4136285261198097287643094585085999496114764918441405377568065465080433286535n	:MSTORE(modexp_M + E)
		16 => E
		101010623283584921497494674625278283482597149142501317611342536338650919847285n	:MSTORE(modexp_M + E)
		17 => E
		71718184868458030700513008557233607166388496070600773105990878610566352668478n	:MSTORE(modexp_M + E)
		18 => E
		58835915852484627531546395518481357741140083996335714932736008557799387806379n	:MSTORE(modexp_M + E)
		19 => E
		110990609890790220505193608739997845349191779958492236054709193460408621504669n	:MSTORE(modexp_M + E)
		20 => E
		96379496026765561813937988417405440162695262824201145254831686004222812216418n	:MSTORE(modexp_M + E)
		21 => E
		82925026338043992721120049617193479691714841002654113449473181778596956082920n	:MSTORE(modexp_M + E)
		22 => E
		100023901102385901973724374201876255032845338138580308882617263003615020308810n	:MSTORE(modexp_M + E)
		23 => E
		95952213078202102225468090590217757485597979953604518053194588551562232005328n	:MSTORE(modexp_M + E)
		24 => E
		3577026816335999968748395316796404869630041860090349190142189122043709889551n	:MSTORE(modexp_M + E)
		25 => E
		109063498273720822329401504720108142219864403250117040531373131752282931463324n	:MSTORE(modexp_M + E)
		26 => E
		27979004844780866654085603865732315060118803050644142741740092959358337388274n	:MSTORE(modexp_M + E)
		27 => E
		24825258000785841949542820675205430709826458566611547296010427802043033991005n	:MSTORE(modexp_M + E)
		28 => E
		49031301463517022513899268811000038114693491982961073699105948652240780094456n	:MSTORE(modexp_M + E)
		29 => E
		114204515557203015266974583011383895979566987933197495441844505245979656755929n	:MSTORE(modexp_M + E)
		30 => E
		78491904893089992686529903837940897519206435582635929630386408975070579157365n	:MSTORE(modexp_M + E)
		31 => E
		102675521321841909801053294363031989532243193264355291794310082365691483423498n	:MSTORE(modexp_M + E)
                                                                                        :CALL(modexp)
		677894576676631978762225005345398803352392083933732578515354226985023681792n    :MLOAD(modexp_out)
		1 => E
		30983700189750465957952042435955105754963199835136808771081585991196056603533n	:MLOAD(modexp_out + E)
		2 => E
		96977624522594450801541733995544628971015390835463187143212961973552500720710n	:MLOAD(modexp_out + E)
		3 => E
		56114900155652441916464774637573049435630604518898416817685636860353438904690n	:MLOAD(modexp_out + E)
		4 => E
		26654824404634087607897029500347455956982618454171914029346215577013032668874n	:MLOAD(modexp_out + E)
		5 => E
		82588806309433243368106809807628870406466678061433605795202724077569780612666n	:MLOAD(modexp_out + E)
		6 => E
		97933618002683983699820462412182946416951394764940011329348416882228004555192n	:MLOAD(modexp_out + E)
		7 => E
		91974656276525162864490852539001571486994660590533935810085276565543825792935n	:MLOAD(modexp_out + E)
		8 => E
		14136595934712265420422087179017462511247051603950489074490810742177656003907n	:MLOAD(modexp_out + E)
		9 => E
		48125222252921746199762482100491455173844534471982929161438685737650186283704n	:MLOAD(modexp_out + E)
		10 => E
		48107851915594109975315423983766253025680196062973422346056328244340733385970n	:MLOAD(modexp_out + E)
		11 => E
		86954418248654364144745131584472622053075114694263175729171643632936297192862n	:MLOAD(modexp_out + E)
		12 => E
		109691144365836675943146054875317393326628140256492700988957490200625823775185n	:MLOAD(modexp_out + E)
		13 => E
		32292512431244590061446854088456146854345648248097217451888860871153877828563n	:MLOAD(modexp_out + E)
		14 => E
		65792790710630644347879244464254837532349265508035775328499355449612521734549n	:MLOAD(modexp_out + E)
		15 => E
		89765858380763137329673491280409498253435611301713781654835842065015314105304n	:MLOAD(modexp_out + E)
		16 => E
		35171816476825758331036644979464255466931468945835176682525048220517607291864n	:MLOAD(modexp_out + E)
		17 => E
		87898794801683267042131251427895513029310648885531121798980287601368853382291n	:MLOAD(modexp_out + E)
		18 => E
		64388675366825537694841610983948205362927385527175427273890935480735460523881n	:MLOAD(modexp_out + E)
		19 => E
		99955447086715432279557400852227643751624133140601483306492249769432748925953n	:MLOAD(modexp_out + E)
		20 => E
		24476073658846379337950527005029962650889618395597987670121609506999218493048n	:MLOAD(modexp_out + E)
		21 => E
		111763844358629697753193373290688595861299431022701437954908278806392751790575n	:MLOAD(modexp_out + E)
		22 => E
		79904940302542711327641239100871361685141987738151011046821092049887467991286n	:MLOAD(modexp_out + E)
		23 => E
		43707225392916562210253783663272091369045047071043018557053394387471461416479n	:MLOAD(modexp_out + E)
		24 => E
		98308041900501354334940003472357888716582517911775035256283753134795218938611n	:MLOAD(modexp_out + E)
		25 => E
		65935384960991952146654815676745484728495550460251405131997483203896289078769n	:MLOAD(modexp_out + E)
		26 => E
		20130837003505484436463566444811036744003990239310189118996363703596530902859n	:MLOAD(modexp_out + E)
		27 => E
		16957048272619737139490804874038052955006088486308702807491576262642577133096n	:MLOAD(modexp_out + E)
		28 => E
		11616018929629640269971042218145996725282129064687370436521646879832529443317n	:MLOAD(modexp_out + E)
		29 => E
		63617577915798873005195071463719881573415608074827000652669926242766448670534n	:MLOAD(modexp_out + E)
		30 => E
		12384180274645355595105366212522790398784832091160640277349754557987863589673n	:MLOAD(modexp_out + E)
		31 => E
		40734125863026273932428199995766034988856785758079943910749929611210985198371n	:MLOAD(modexp_out + E)
        32                                                                              :MLOAD(modexp_outlen)
        ; ---------------------------------------------------------------------------------------------

        ; ; SINGLETON TESTS TO ENSURE THE MAXIMUM INPUT LENGTH WE CAN ACHIEVE IN EACH OF BASE, EXPONENT
        ; ; AND MODULUS WITHOUT OVERFLOWING EITHER THE ARITH, BINARY OF STEPS COUNTERS
        ; ; ---------------------------------------------------------------------------------------------
        ; ; 1] B = [2n:1818n], E = [1n], M = [2n]
        ; ; Hamming weight of E is 1
        ; 1818            :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 1818 => E
        ; singleton_test1_copy_in_loop:
        ; E - 1 => E
        ; 2               :MSTORE(modexp_B + E)
        ; E               :JMPZ(singleton_test1_modexp, singleton_test1_copy_in_loop)

        ; singleton_test1_modexp:
        ; 1n              :MSTORE(modexp_E)
        ; 2n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)
        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 2] B = [2n], E = [1n], M = [2n:1818]
        ; ; Hamming weight of E is 1
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1818            :MSTORE(modexp_Mlen)

        ; 1818 => E
        ; singleton_test2_copy_in_loop:
        ; E - 1 => E
        ; 1               :MSTORE(modexp_M + E)
        ; E               :JMPZ(singleton_test2_modexp, singleton_test2_copy_in_loop)

        ; singleton_test2_modexp:
        ; 2n              :MSTORE(modexp_B)
        ; 1n              :MSTORE(modexp_E)
        ;                 :CALL(modexp)
        ; 2n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 3] B = [2n], E = [1n:1818], M = [2n]
        ; ; Hamming weight of E is 1818
        ; 1               :MSTORE(modexp_Blen)
        ; 1818            :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 1818 => E
        ; singleton_test3_copy_in_loop:
        ; E - 1 => E
        ; 1               :MSTORE(modexp_E + E)
        ; E               :JMPZ(singleton_test3_modexp, singleton_test3_copy_in_loop)

        ; singleton_test3_modexp:
        ; 2n              :MSTORE(modexp_B)
        ; 2n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)
        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)
        ; ; ---------------------------------------------------------------------------------------------

        ; ; UPDATE: Edge cases are not handled by the modexp function directly anymore
        ; ; EDGE CASES TESTS
        ; ; ---------------------------------------------------------------------------------------------
        ; ; 1] B == 0, E != 0, M != 0 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 3n              :MSTORE(modexp_E)
        ; 4n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 1               :MSTORE(modexp_Blen)
        ; 2               :MSTORE(modexp_Elen)
        ; 2               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 1 => E
        ; 1n              :MSTORE(modexp_E + E)
        ; 0n              :MSTORE(modexp_M)
        ; 1 => E
        ; 1n              :MSTORE(modexp_M + E)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 2] B != 0, E == 0, M != 0 should return 1
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 4n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 1n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 2               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 2               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 1 => E
        ; 4n              :MSTORE(modexp_B + E)
        ; 0n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ; 1 => E
        ; 1n              :MSTORE(modexp_M + E)
        ;                 :CALL(modexp)

        ; 1n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 3] B != 0, E != 0, M == 0 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 1n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)
        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 2               :MSTORE(modexp_Blen)
        ; 2               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 1 => E
        ; 4n              :MSTORE(modexp_B + E)
        ; 0n              :MSTORE(modexp_E)
        ; 1 => E
        ; 4n              :MSTORE(modexp_E + E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 4] B != 0, E != 0, M == 1 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 1n              :MSTORE(modexp_E)
        ; 1n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)
        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 2               :MSTORE(modexp_Blen)
        ; 2               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 2n              :MSTORE(modexp_B)
        ; 1 => E
        ; 4n              :MSTORE(modexp_B + E)
        ; 0n              :MSTORE(modexp_E)
        ; 1 => E
        ; 4n              :MSTORE(modexp_E + E)
        ; 1n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 5] B == 0, E == 0, M != 0 should return 0^0 = 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 4n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 2               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ; 1 => E
        ; 1n              :MSTORE(modexp_M + E)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 6] B == 0, E != 0, M == 0 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 4n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 1               :MSTORE(modexp_Blen)
        ; 2               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 1 => E
        ; 1n              :MSTORE(modexp_E + E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 7] B != 0, E == 0, M == 0 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 1n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; 2               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 1 => E
        ; 1n              :MSTORE(modexp_B + E)
        ; 0n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)

        ; ; 8] B == 0, E == 0, M == 0 should return 0
        ; 1               :MSTORE(modexp_Blen)
        ; 1               :MSTORE(modexp_Elen)
        ; 1               :MSTORE(modexp_Mlen)

        ; 0n              :MSTORE(modexp_B)
        ; 0n              :MSTORE(modexp_E)
        ; 0n              :MSTORE(modexp_M)
        ;                 :CALL(modexp)

        ; 0n              :MLOAD(modexp_out)
        ; 1               :MLOAD(modexp_outlen)
        ; ; ---------------------------------------------------------------------------------------------

        :JMP(end)

outOfCountersBinary:
        ${dump(CNT_BINARY)}     :JMP(end)
outOfCountersStep:
        ${dump(STEP)}           :JMP(end)
outOfCountersArith:
        ${dump(CNT_ARITH)}      :JMP(end)

;@info function to force a failed assert
failAssert:
    1 => A
    2               :ASSERT

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "../main/modexp/constants.zkasm"

INCLUDE "../main/modexp/array_lib/array_add_AGTB.zkasm"
INCLUDE "../main/modexp/array_lib/array_add_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_mul_long.zkasm"
INCLUDE "../main/modexp/array_lib/array_mul_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_square.zkasm"
INCLUDE "../main/modexp/array_lib/array_div_short.zkasm"
INCLUDE "../main/modexp/array_lib/array_div_long.zkasm"

INCLUDE "../main/modexp/modexp.zkasm"